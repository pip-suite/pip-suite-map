{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/GoogleMapsRemoveAfterService.ts","src/HelpService.ts","src/Map.ts","src/MapEventHandlerService.ts","src/config.ts","src/edit/MapEdit.ts","src/edit/index.ts","src/elements/MapElementControllerService.ts","src/elements/MapElementDirectiveService.ts","src/elements/MapElementRequireService.ts","src/elements/circles/MapCircles.ts","src/elements/index.ts","src/elements/kml/MapKml.ts","src/elements/markers/MapMarkers.ts","src/elements/polygons/MapPolygons.ts","src/elements/polylines/MapPolylines.ts","src/index.ts","src/popup/MapElementPopupService.ts","src/popup/MapPopup.ts","src/popup/MapPopupContent.ts","src/popup/MapPopupService.ts","src/popup/index.ts","temp/pip-suite-map-html.min.js"],"names":[],"mappings":"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F,WAAW,CAAC,SAAS,CAAC,sBAAsB,GAAG;YAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC;gBAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACrE,CAAC,CAAC;QAUF,WAAW,CAAC,SAAS,CAAC,KAAK,GAAG;YAC1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC;YACX,CAAC;YAED,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YAErB,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAE9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACxB,CAAC,CAAC;QAYF,WAAW,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU,QAAQ;YAClD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC7B,CAAC,CAAC;QAGF,MAAM,CAAC;YAUH,MAAM,EAAE;gBACJ,MAAM,CAAC,IAAI,WAAW,EAAE,CAAC;YAC7B,CAAC;SACJ,CAAC;IACN,CAAC;IAED,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC;SACzB,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;AAC7C,CAAC,CAAC,EAAE,CAAC;;;;AC/ML,CAAC;IACG,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;AACvC,CAAC;AAED,oCAAkC;AAClC,sBAAoB;AACpB,6BAA2B;AAC3B,6BAA2B;;ACP3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-suite-map.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","declare let google: any;\n\n(() => {\n    'use strict';\n\n    /**\n     * @ngdoc module\n     * @name pipGoogleMaps\n     *\n     * @description\n     * Module with common helper functionality for Google Maps\n     */\n\n    /**\n     * @ngdoc provider\n     * @name pipGoogleMaps\n     */\n    function GoogleMapsProvider() {\n\n        var mapOptions = {\n            mapTypeId: google.maps.MapTypeId.SATELLITE,\n            disableDefaultUI: true,\n            panControl: false,\n            zoomControl: false\n        };\n\n        /**\n         * Getter/setter for Google Maps options.\n         * @param {Object} options @link https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n         * @returns {Object}\n         */\n        this.mapOptions = function (options) {\n            mapOptions = _.defaults({}, options, mapOptions);\n\n            return _.cloneDeep(mapOptions);\n        };\n\n        this.$get = function ($rootScope) {\n            return {\n                /**\n                 * Getter for Google Maps options.\n                 * @returns {Object} @link https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n                 */\n                mapOptions: function () {\n                    return _.cloneDeep(mapOptions);\n                },\n\n                /**\n                 * Helper function to create new Angular Google Maps object. @link http://angular-ui.github.io/angular-google-maps/#!/api/google-map\n                 * @param {Object} (options={}) - additional map options\n                 * @param {Number} (options.maxZoom) - max map zoom level\n                 * @param {Number} (options.minZoom) - min map zoom level\n                 * @param {Object} (geoRegion) - object with coordinates of map bounds. Has specific format.\n                 * @param {Object} geoRegion.boundary - map bounds object\n                 * @param {Number} geoRegion.boundary.nw_lat - North-West latitude\n                 * @param {Number} geoRegion.boundary.nw_lob - North-West longitude\n                 * @param {Number} geoRegion.boundary.se_lat - South-East latitude\n                 * @param {Number} geoRegion.boundary.se_lon - South-East longitude\n                 * @param {Function} (onMapClickCallback) - function to call when map itself is clicked\n                 * @returns {Object}\n                 */\n                map: function (options, geoRegion, onMapClickCallback) {\n                    options || (options = {});\n\n                    var onTilesLoaded = _.once(function (map) {\n                        google.maps.event.trigger(map, 'resize');  // fix map is not fully loaded issue\n                    });\n\n                  var boundary = geoRegion && geoRegion.boundary || {};\n\n                    return {\n                        center: {\n                            latitude:  (boundary.nw_lat + boundary.se_lat) / 2 || 0,\n                            longitude: (boundary.nw_lon + boundary.se_lon) / 2 || 0\n                        },\n                        zoom: 16,\n                        control: {},\n                        options: _.assign({}, options, mapOptions),\n                        bounds: {},\n                        events: {\n                            click: onMapClickCallback || function () {},\n                            tilesloaded: onTilesLoaded,\n                            zoom_changed: onZoomChanged\n                        }\n                    };\n\n                    function onZoomChanged(map) {\n                        var directiveSpecificMaxZoomLevel = options.maxZoomLevel,\n                            directiveSpecificMinZoomLevel = options.minZoomLevel,\n                            maxZoomLevel = directiveSpecificMaxZoomLevel == null ? mapOptions['maxZoom'] : directiveSpecificMaxZoomLevel,\n                            minZoomLevel = directiveSpecificMinZoomLevel == null ? mapOptions['minZoom'] : directiveSpecificMinZoomLevel,\n                            currentZoomLevel = map.getZoom();\n\n                        if (currentZoomLevel > maxZoomLevel) {\n                            map.setZoom(maxZoomLevel);\n                        } else if (currentZoomLevel < minZoomLevel) {\n                            map.setZoom(minZoomLevel);\n                        }\n                    }\n                },\n\n                /**\n                 * Helper function to create new info window object. @link http://angular-ui.github.io/angular-google-maps/#!/api/window\n                 * @param {String} (additionalClass=\"\") - additional classes to append to info window along with default \"pip-map-info-window\"\n                 * @param {google.maps.Size} (offset=new google.maps.Size(-175, -210, 'px', 'px')) - offset of info window from marker\n                 * @returns {Object}\n                 */\n                infoWindow: function (additionalClass, offset) {\n                    return {\n                        show: false,\n                        control: {},\n                        options: {\n                            boxClass: 'pip-map-info-window ' + additionalClass,\n                            closeBoxURL: '',\n                            pixelOffset: offset || new google.maps.Size(-175, -210, 'px', 'px')\n                        }\n                    };\n                },\n\n                /**\n                 * Set map bounds\n                 * @param {Object} map - Angular Google Maps object\n                 * @param {Object} geoRegion - object with coordinates of map bounds. Has specific format.\n                 * @param {Object} geoRegion.boundary - map bounds object\n                 * @param {Number} geoRegion.boundary.nw_lat - North-West latitude\n                 * @param {Number} geoRegion.boundary.nw_lob - North-West longitude\n                 * @param {Number} geoRegion.boundary.se_lat - South-East latitude\n                 * @param {Number} geoRegion.boundary.se_lon - South-East longitude\n                 */\n                setMapBounds: function (map, geoRegion) {\n                    var unwatchBoundsChange = $rootScope.$watch(function() {\n                        return map.bounds;\n                    }, function (newVal) {\n                        if (newVal.northeast && newVal.southwest) {\n                            map.bounds = {\n                                northeast: {\n                                    latitude: geoRegion.boundary.nw_lat,\n                                    longitude: geoRegion.boundary.se_lon\n                                },\n                                southwest: {\n                                    latitude: geoRegion.boundary.se_lat,\n                                    longitude: geoRegion.boundary.nw_lon\n                                }\n                            };\n\n                            unwatchBoundsChange();\n                        }\n                    }, true);\n                },\n\n                /**\n                 * Fit map to specified bounds\n                 * @param {Object} map - Angular Google Maps object\n                 * @param {google.maps.LatLngBounds} bounds - bounds, @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n                 */\n                fitMapToBounds: function (map, bounds) {\n                    if (!bounds.isEmpty()) {\n                        var currentMapBounds = map.getBounds();\n\n                        if (_.isEmpty(currentMapBounds)\n                            || (!_.isEmpty(currentMapBounds)\n                            && currentMapBounds.contains\n                            && (!currentMapBounds.contains(bounds.getNorthEast())\n                            || !currentMapBounds.contains(bounds.getSouthWest())))) {\n                            map.fitBounds(bounds);\n                        }\n                    }\n                }\n            };\n        };\n    }\n\n    angular\n        .module('pipMaps')\n        .provider('pipGoogleMaps', <any>GoogleMapsProvider);\n})();\n","(() => {\n  'use strict';\n\n  function uiGmapModelKeyDecorator($delegate) {\n    /**\n     * This is a hot fix to the setChildScope problem\n     * @see https://github.com/angular-ui/angular-google-maps/issues/1562\n     * The issue is that ModelKey.prototype.setChildScope sets childScope.model = model;\n     * where model is always for some reason is undefined\n     * then in BasePolysParentModel.prototype.pieceMeal it extends\n     * _.extend(obj.child.scope, obj.model);\n     *\n     * in scope we have childScope with model: {} and in obj.model we have model: undefined\n     * then we will have undefined as a model and crashes.\n     * For some reason it is not working this way anytime, because sometimes payload.updates is empty\n     * and it works as expected but we should remove this undefined property to avoid this issues\n     *\n     * TODO: Remove this hot-fix when it is resolved inside angular-google-maps\n     */\n\n\n    var setChildScope = $delegate.prototype.setChildScope;\n\n    $delegate.prototype.setChildScope = function (keys, childScope) {\n      var result = setChildScope.apply(this, arguments);\n\n      if (childScope && childScope.hasOwnProperty('model') && !childScope.model) {\n        delete childScope.model;\n      }\n\n      return result;\n    };\n\n    return $delegate;\n  }\n\n\n  /**\n   * @typedef {Object} Map~GeoRegion\n   * @property {Object} boundary Map bounds object\n   * @property {Number} boundary.nw_lat North-West latitude\n   * @property {Number} boundary.nw_lon North-West longitude\n   * @property {Number} boundary.se_lat South-East latitude\n   * @property {Number} boundary.se_lon South-East longitude\n   */\n\n\n  /**\n   * @typedef {Object} Map~position\n   * @property {*} latitude Latitude\n   * @property {*} longitude Longitude\n   */\n\n\n  /**\n   * @ngdoc service\n   * @name pipMapComponent.pipMapHelperSrvProvider\n   *\n   * @description Helper for map. Contains methods to work with icons, map constants, etc.\n   */\n  function /*@ngInject*/ pipMapHelperSrv() {\n    var defaultIconParameters = {\n      iconBaseSize: 96,\n      iconNormalScaleFactor: 0.5,\n      iconActiveScaleFactor: 1,\n      iconsPerSprite: 1\n    };\n\n    var directions = [{\n        name: 'North',\n        numberInSprite: 0,\n        scope: [-22.5, 22.5]\n      },\n      {\n        name: 'Northeast',\n        numberInSprite: 1,\n        scope: [22.5, 67.5]\n      },\n      {\n        name: 'East',\n        numberInSprite: 2,\n        scope: [67.5, 112.5]\n      },\n      {\n        name: 'Southeast',\n        numberInSprite: 3,\n        scope: [112.5, 157.5]\n      },\n      {\n        name: 'South',\n        numberInSprite: 4,\n        scope: [157.5, -157.5]\n      },\n      {\n        name: 'SouthWest',\n        numberInSprite: 5,\n        scope: [-157.5, -112.5]\n      },\n      {\n        name: 'West',\n        numberInSprite: 6,\n        scope: [-112.5, -67.5]\n      },\n      {\n        name: 'Northwest',\n        numberInSprite: 7,\n        scope: [-67.5, -22.5]\n      },\n      {\n        name: 'Stop',\n        numberInSprite: 8,\n        scope: []\n      }\n    ];\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.pipMapHelperSrvProvider\n     * @name pipMapComponent.pipMapHelperSrvProvider#setIconSettings\n     * @param {Object} sizes Object with new sizes\n     * @param {number} [sizes.baseSize] Base icon size\n     * @param {number} [sizes.normalFactor] Scale factor for normal icon state\n     * @param {number} [sizes.activeFactor] Scale facor for active icon state\n     * @param {number} [sizes.perSprite] ??\n     *\n     * @description Override service defaults\n     */\n    this.setIconSettings = function (sizes) {\n      angular.extend(defaultIconParameters, sizes);\n    };\n\n\n    this.$get = (uiGmapGoogleMapApi, $timeout) => {\n      /**\n       * @ngdoc service\n       * @name pipMapComponent.pipMapHelperSrv\n       *\n       * @description Helper for map. Contains methods to work with icons, map constants, etc.\n       */\n      var service = {\n        isReady: false,\n        whenReady: uiGmapGoogleMapApi,\n        maps: {},\n        getIconDimensions: null,\n        setIcon: null,\n        triggerEvent: null,\n        createSize: null,\n        createPoint: null,\n        createKML: null,\n        getCenterFromRegion: null,\n        fitMapToRegion: null,\n        getBoundsFromRegion: null,\n        getBoundsFromCoordinates: null,\n        fitMapToBounds: null,\n        forceMapToFitBounds: null,\n        shouldFitBound: null,\n        setModelOptions: null,\n        getDegreesBetweenTwoPoints: null,\n        getDirection: null,\n        getDirectionByAngle: null,\n        getIconOriginByDirection: null\n      };\n\n\n      uiGmapGoogleMapApi.then(onInit.bind(service));\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#getIconDimensions\n       * @private\n       *\n       * @param {Object} icon Icon set dimensions to\n       * @param {number} [icon.numberInSprite] Icon position in sprite\n       * @param {boolean} [isActive = false] Whether to set active scale or normal\n       *\n       * @returns {Object} Icon dimensions\n       * @see http://blog.mridey.com/2010/03/using-markerimage-in-maps-javascript.html for more details\n       * Including method name\n       * 1. It is used only in this service\n       * 2. It seems to count position of an arrow near the icon, which shows it's movement direction\n       */\n      service.getIconDimensions = function (icon, isActive) {\n        var parameters = angular.extend({}, defaultIconParameters, icon);\n        var scaleFactor = isActive ? parameters.iconActiveScaleFactor : parameters.iconNormalScaleFactor;\n        var size = parameters.iconBaseSize * scaleFactor;\n\n        return {\n          origin: this.createPoint(0, size * icon.numberInSprite || 1),\n          anchor: this.createPoint(size / 2, size / 2),\n          size: this.createSize(size, size),\n          scaledSize: this.createSize(size, parameters.iconsPerSprite * size),\n          isActive: isActive\n        };\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#setIcon\n       *\n       * @param {Object} icon Icon to set position for\n       * @param {boolean} [icon.isActive] True if icon currently is active\n       * @param {number} [icon.numberInSprite] Icon position in sprite\n       * @param {?boolean} isActive True if marker is active. If not boolean - it will leave old value of active\n       *\n       * @description Adds to an icon size properties\n       */\n      service.setIcon = function (icon, isActive) {\n        isActive = typeof isActive === 'boolean' ? isActive : icon.isActive;\n\n        service.whenReady.then(function () {\n          var iconDimensions = this.getIconDimensions(icon, isActive);\n          _.extend(icon, iconDimensions);\n        }.bind(this));\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#triggerEvent\n       *\n       * @description Triggers event with provided arguments\n       */\n      service.triggerEvent = function () {\n        var event = this.maps.event;\n\n        if (!event) {\n          return null;\n        }\n\n        return event.trigger.apply(event, arguments);\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#createSize\n       * @param {number} width Width property for the size object\n       * @param {number} height Height property for the size object\n       * @returns {Object} New size instance or empty object\n       *\n       * @description Creates new size object of a given width and height in pixels\n       */\n      service.createSize = function (width, height) {\n        var Size = this.maps.Size;\n\n        if (!Size) {\n          return {};\n        }\n\n        return new Size(width, height, 'px', 'px');\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#createPoint\n       * @param {number} x X coordinate for the point object\n       * @param {number} y Y coordinate for the point object\n       * @returns {Object} New point instance or empty object\n       *\n       * @description Creates new point object of a given coordinates\n       */\n      service.createPoint = function (x, y) {\n        var Point = this.maps.Point;\n\n        if (!Point) {\n          return {};\n        }\n\n        return new Point(x, y);\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#createPoint\n       * @param {Object} options Settings for KML layer\n       * @param {google.maps.Map} options.map Map instance to create kml layer for\n       * @param {string} options.url Url of KML file\n       *\n       * @description Creates new point object of a given coordinates\n       */\n      service.createKML = function (options) {\n        var Layer = this.maps.KmlLayer;\n\n        if (!Layer) {\n          return {};\n        }\n\n        return new Layer(options);\n      };\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#getCenterFromRegion\n       *\n       * @param {Map~GeoRegion} geoRegion - object with coordinates of map bounds. Has specific format.\n       * @return {Map~position} Map center\n       *\n       * @description Get map center from geo region\n       */\n      service.getCenterFromRegion = function (geoRegion) {\n        if (!geoRegion || !geoRegion.boundary) {\n          return {\n            latitude: 0,\n            longitude: 0\n          };\n        }\n\n        return {\n          latitude: (geoRegion.boundary.nw_lat + geoRegion.boundary.se_lat) / 2,\n          longitude: (geoRegion.boundary.nw_lon + geoRegion.boundary.se_lon) / 2\n        };\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#fitMapToRegion\n       *\n       * @param {google.maps.Map} map Map to fit bounds\n       * @param {Map~GeoRegion} geoRegion bounds\n       * @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n       *\n       * @description Fit map to specified geo region\n       */\n      service.fitMapToRegion = function (map, geoRegion) {\n        var bounds = this.getBoundsFromRegion(geoRegion);\n\n        // without timeout it sometimes is not working\n        $timeout(this.forceMapToFitBounds.bind(this, map, bounds));\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#getBoundsFromRegion\n       *\n       * @param {Map~GeoRegion} geoRegion - object with coordinates of map bounds. Has specific format\n       * @returns {google.maps.LatLngBounds|Object} New boundary or\n       * empty object if no geoRegion is not provided or empty\n       *\n       * @description Get map bounds from geo region\n       */\n      service.getBoundsFromRegion = function (geoRegion) {\n        if (!geoRegion || !geoRegion.boundary) {\n          return {};\n        }\n\n        return this.getBoundsFromCoordinates([{\n            latitude: geoRegion.boundary.se_lat,\n            longitude: geoRegion.boundary.se_lon\n          },\n          {\n            latitude: geoRegion.boundary.nw_lat,\n            longitude: geoRegion.boundary.nw_lon\n          }\n        ]);\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#getBoundsFromCoordinates\n       *\n       * @param {Array<Map~position>} coordinates Coordinates to get bounds from\n       * @returns {google.maps.LatLngBounds|Object} Bounds fit coordinates\n       *\n       * @description Creates google bounds instance from given coordinates\n       */\n      service.getBoundsFromCoordinates = function (coordinates) {\n        var LatLngBounds = this.maps.LatLngBounds;\n        var LatLng = this.maps.LatLng;\n\n        if (!LatLng || !LatLngBounds) {\n          return {};\n        }\n\n        var bounds = new LatLngBounds();\n\n        coordinates.forEach(function (coordinate) {\n          if (!coordinate.latitude || !coordinate.longitude) {\n            return;\n          }\n\n          bounds.extend(new LatLng(coordinate.latitude, coordinate.longitude));\n        });\n\n        return bounds;\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#fitMapToBounds\n       *\n       * @param {google.maps.Map} map Map to fit bounds\n       * @param {google.maps.LatLngBounds} bounds bounds\n       * @param {boolean} [force = false] force If true - forces setting of the bounds\n       * @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n       *\n       * @description Checks whether given bounds is larger then current\n       * and fit map to specified bounds if so\n       */\n      service.fitMapToBounds = function (map, bounds, force) {\n        if (bounds.isEmpty()) {\n          return;\n        }\n\n        if (force || this.shouldFitBound(map, bounds)) {\n          map.fitBounds(bounds);\n        }\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#forceMapToFitBounds\n       *\n       * @param {google.maps.Map} map Map to fit bounds\n       * @param {google.maps.LatLngBounds} bounds bounds\n       * @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n       *\n       * @description Fit map to specified bounds\n       */\n      service.forceMapToFitBounds = function (map, bounds) {\n        this.fitMapToBounds(map, bounds, true);\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#shouldFitBound\n       *\n       * @param {google.maps.Map} map Map to fit bounds\n       * @param {google.maps.LatLngBounds} bounds bounds\n       *\n       * @private\n       * @description Checks if map should fit bounds\n       */\n      service.shouldFitBound = function (map, bounds) {\n        var northEast = bounds.getNorthEast();\n        var southWest = bounds.getSouthWest();\n\n        var currentMapBounds = map.getBounds();\n        var mapContainsBounds = currentMapBounds.contains &&\n          (!currentMapBounds.contains(northEast) || !currentMapBounds.contains(southWest));\n\n        return _.isEmpty(currentMapBounds) || mapContainsBounds;\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#setModelOptions\n       *\n       * @param {Object} pluralModel Plural model to set options for\n       * @param {Object} [pluralModel.gObject] Google object\n       * @param {Object} options New options\n       *\n       * @description Sets options for plural model if it is possible\n       */\n      service.setModelOptions = function (pluralModel, options) {\n        var plainObject = pluralModel && pluralModel.gObject;\n\n        if (plainObject && angular.isFunction(plainObject.setOptions)) {\n          plainObject.setOptions(options);\n        }\n      };\n\n\n      service.getDegreesBetweenTwoPoints = function (point1, point2) {\n        let p1 = {\n          lat: () => {\n            return point1.lat || point1.latitude\n          },\n          lng: () => {\n            return point1.lng || point1.longitude\n          }\n        };\n        let p2 = {\n          lat: () => {\n            return point2.lat || point2.latitude\n          },\n          lng: () => {\n            return point2.lng || point2.longitude\n          }\n        };\n\n        return google.maps.geometry.spherical.computeHeading(p1, p2);\n      }\n\n\n      service.getDirection = function (point1, point2) {\n        const degree = this.getDegreesBetweenTwoPoints(point1, point2);\n\n          if (\n            (point1.lat || point1.latitude) === (point2.lat || point2.latitude) &&\n            (point1.lng || point1.longitude) === (point2.lng || point2.longitude)\n          ) {\n            return directions[8];\n          }\n\n        for (let i = 0; i < 8; i++) {\n          if (degree >= directions[i].scope[0] && degree <= directions[i].scope[1]) {\n            return directions[i];\n          }\n        }\n\n        return directions[8];\n      }\n\n      service.getDirectionByAngle = function(degree) {\n        for (let i = 0; i < 8; i++) {\n          if (degree >= directions[i].scope[0] && degree <= directions[i].scope[1]) {\n            return directions[i];\n          }\n        }\n\n        return directions[8];\n      }\n\n      service.getIconOriginByDirection = function (point1, point2, iconSize: number = 82, gutter: number = 15) {\n        const direction = this.getDirection(point1, point2);\n\n        return new google.maps.Point(0, direction.numberInSprite * iconSize + direction.numberInSprite * gutter);\n      }\n\n\n      function onInit(maps) {\n        var mapTypeId = maps.MapTypeId || {};\n        var mapTypes = {\n          roadMap: mapTypeId.ROADMAP,\n          satellite: mapTypeId.SATELLITE,\n          hybrid: mapTypeId.HYBRID,\n          terrain: mapTypeId.TERRAIN\n        };\n\n\n        var symbolPath = maps.SymbolPath || {};\n        var symbols = {\n          circle: symbolPath.CIRCLE,\n          backwardClosed: symbolPath.BACKWARD_CLOSED_ARROW,\n          forwardClosed: symbolPath.FORWARD_CLOSED_ARROW,\n          backwardOpened: symbolPath.BACKWARD_OPEN_ARROW,\n          forwardCOpened: symbolPath.FORWARD_OPEN_ARROW\n        };\n\n        this.isReady = true;\n\n        angular.extend(this, {\n          mapTypes: mapTypes,\n          symbols: symbols,\n          maps: maps\n        });\n      }\n\n\n      return service;\n    };\n  }\n\n  angular.module('pipMaps')\n    .provider('pipMapHelperSrv', < any > pipMapHelperSrv)\n    .decorator('uiGmapModelKey', uiGmapModelKeyDecorator);\n})();","(() => {\n  'use strict';\n  USGSOverlay.prototype = new google.maps.OverlayView();\n\n  /** @constructor */\n  function USGSOverlay(bounds, image, map, opacity) {\n\n    // Initialize all properties.\n    this.bounds_ = bounds;\n    this.image_ = image;\n    this.map_ = map;\n\n    this.opacity = opacity ? opacity : null;\n    // Define a property to hold the image's div. We'll\n    // actually create this div upon receipt of the onAdd()\n    // method so we'll leave it null for now.\n    this.div_ = null;\n\n    // Explicitly call setMap on this overlay.\n    this.setMap(map);\n  }\n\n  USGSOverlay.prototype.onAdd = function () {\n\n    var div = document.createElement('div');\n    div.style.borderStyle = 'none';\n    div.style.borderWidth = '0px';\n    div.style.position = 'absolute';\n    if (this.opacity) div.style.opacity = this.opacity;\n\n    // Create the img element and attach it to the div.\n    var img = document.createElement('img');\n    img.src = this.image_;\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.position = 'absolute';\n    div.appendChild(img);\n\n    this.div_ = div;\n\n    // Add the element to the \"overlayLayer\" pane.\n    var panes = this.getPanes();\n    panes.overlayLayer.appendChild(div);\n  };\n\n  USGSOverlay.prototype.draw = function (bounds) {\n\n    // We use the south-west and north-east\n    // coordinates of the overlay to peg it to the correct position and size.\n    // To do this, we need to retrieve the projection from the overlay.\n    var overlayProjection = this.getProjection();\n    if (!overlayProjection) return;\n\n    // Retrieve the south-west and north-east coordinates of this overlay\n    // in LatLngs and convert them to pixel coordinates.\n    // We'll use these coordinates to resize the div.\n    if (bounds) {\n      this.bounds_ = bounds\n    }\n    var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());\n    var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());\n\n\n    // Resize the image's div to fit the indicated dimensions.\n    var div = this.div_;\n\n    if (!div) return;\n\n    // div.style.left = sw.x + 'px';\n    // div.style.top = ne.y + 'px';\n    // div.style.width = (ne.x - sw.x) + 'px';\n    // div.style.height = (sw.y - ne.y) + 'px';\n    div.style.left = sw.x + 'px';\n    div.style.top = sw.y + 'px';\n    div.style.width = (ne.x - sw.x) + 'px';\n    div.style.height = (ne.y - sw.y) + 'px';\n    if (this.opacity) div.style.opacity = this.opacity;\n  };\n\n  // The onRemove() method will be called automatically from the API if\n  // we ever set the overlay's map property to 'null'.\n  USGSOverlay.prototype.onRemove = function () {\n    if (this.div_ && this.div_.parentNode) this.div_.parentNode.removeChild(this.div_);\n    this.div_ = null;\n  };\n\n  /**\n   * @ngdoc directive\n   * @name pipMapComponent.pipMap\n   * @restrict AE\n   *\n   * @scope\n   * @property {Object} pipOptions Options for a map (including options for map provider)\n   *\n   * @property {Map~GeoRegion} pipOptions.geoRegion Geo region to set map center and bounds\n   * @see https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n   * @property {Object} [pipOptions.map] Options for map provider\n   * @property {boolean} [pipOptions.map.mapTypeId = satellite] Map view\n   * @property {boolean} [pipOptions.map.disableDefaultUI = true] Disabling default UI controls\n   * @property {boolean} [pipOptions.map.panControl = false] Allows pan control\n   * @property {boolean} [pipOptions.map.zoomControl = false] Allows zoom control\n   * @property {boolean} [pipOptions.setInitBounds = false] True if need to set bounds on init from geoRegion\n   *\n   * @property {Object} pipInstance Instance of the directive's controller to be able to use it's methods manually\n   *\n   * @description Directive to create map. It is an abstraction between a map provider and the framework\n   * Also it provides methods with controller to zoom, fit map, etc\n   */\n\n  function MapComponentCtrl($injector, $scope, $element) {\n    var mapEventHandlerMixinFct = $injector.get('mapEventHandlerMixinFct');\n    mapEventHandlerMixinFct.mixTo(this, $scope.$applyAsync.bind($scope));\n    this.sidePanel = {};\n\n    this.embededMap = null;\n\n    this.pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n    this.uiGmapIsReady = $injector.get('uiGmapIsReady');\n    this.$timeout = $injector.get('$timeout');\n    this.$rootScope = $injector.get('$rootScope');\n    this.MapPopupFct = $injector.get('MapPopupFct');\n\n    this.pipMapHelperSrv.whenReady.then(this.init.bind(this));\n\n    $element.addClass('pip-map flex layout-row');\n\n    $scope.$watch('ctrl.componentOptions.center', (newVal) => {\n      if (this.justResized == true) {\n        //this.justResized = false;\n        return;\n      }\n\n      if (this.gMap && newVal) {\n        let newCenter = { lat: newVal.latitude || newVal.lat, lng: newVal.longitude || newVal.lng };\n\n        if (_.isNumber(newCenter.lat) && _.isNumber(newCenter.lng)) {\n          this.gMap.panTo(newCenter);\n        }\n      }\n    }, true);\n\n    $scope.$watch('ctrl.componentOptions.zoom', (newVal) => {\n      if (this.map) this.map.zoom = newVal;\n    });\n\n    $scope.$watch('ctrl.componentOptions.embededMap', (newVal, oldVal) => {\n      if (newVal && oldVal && newVal.embededSrc && oldVal.embededSrc && newVal.embededSrc == oldVal.embededSrc) {\n        if (this.embededOverlay) {\n          var bounds = new google.maps.LatLngBounds(new google.maps.LatLng(newVal.map_north, newVal.map_west), new google.maps.LatLng(newVal.map_south, newVal.map_east));\n          this.embededOverlay.draw(bounds)\n          return;\n        }\n      }\n      this.setEmbededBounds();\n    });\n\n    this.$rootScope.$on('pipMainResized', () => {\n      //this.$timeout(this.updateMapTiles(true));\n      this.throttleResize();\n    });\n  }\n\n\n  /**\n   * @ngdoc property\n   * @propertyOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#defaultOptions\n   * @type {{mapTypeId: *, disableDefaultUI: boolean, panControl: boolean, zoomControl: boolean}}\n   *\n   * @description Default map components\n   */\n  MapComponentCtrl.prototype.defaultOptions = {\n    map: {\n      disableDefaultUI: true,\n      panControl: false,\n      zoomControl: false,\n      disableDoubleClickZoom: true\n    },\n\n    setInitBounds: false,\n\n    popup: {}\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#init\n   *\n   * @description Init map\n   */\n  MapComponentCtrl.prototype.init = function () {\n    /**\n     * @ngdoc property\n     * @propertyOf pipMapComponent.MapComponentCtrl\n     * @name pipMapComponent.MapComponentCtrl#componentOptions\n     * @type {Object}\n     *\n     * @description Options from outer scope\n     */\n    this.options = angular.merge({\n      map: {\n        mapTypeId: this.pipMapHelperSrv.mapTypes.satellite\n      }\n    }, this.defaultOptions, this.componentOptions);\n\n    if (!this.componentOptions.control) this.componentOptions.control = {};\n    this.map = this.getMap();\n    this.map.zoom = this.componentOptions.zoom;\n    this.map.center = this.componentOptions.center;\n\n    if (this.options.sidePanel && this.options.sidePanel.templateUrl) {\n      this.showSidePanel(this.options.sidePanel.templateUrl);\n    }\n\n    this.uiGmapIsReady.promise()\n      .finally(this.onMapReady.bind(this));\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#onMapReady\n   *\n   * @description On map ready handler\n   */\n  MapComponentCtrl.prototype.onMapReady = function () {\n    this.setInitBounds();\n    this.setEmbededBounds();\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#setInitBounds\n   *\n   * @description On map ready handler\n   */\n  MapComponentCtrl.prototype.setInitBounds = function () {\n    var map = this.getMapInstance();\n\n    if (this.options.setInitBounds && map) {\n      this.pipMapHelperSrv.fitMapToRegion(map, this.options.geoRegion);\n    }\n  };\n\n  MapComponentCtrl.prototype.setEmbededBounds = function () {\n    var map = this.getMapInstance();\n    if (this.componentOptions.embededMap && this.componentOptions.embededMap.embededSrc) {\n      var bounds = new google.maps.LatLngBounds(new google.maps.LatLng(this.componentOptions.embededMap.map_north, this.componentOptions.embededMap.map_west), new google.maps.LatLng(this.componentOptions.embededMap.map_south, this.componentOptions.embededMap.map_east));\n      var srcImage = this.componentOptions.embededMap.embededSrc;\n      this.embededOverlay = new USGSOverlay(bounds, srcImage, map, this.componentOptions.embededMap.opacity);\n    } else {\n      if (this.embededOverlay) this.embededOverlay.onRemove();\n      this.embededOverlay = null;\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#getMapInstance\n   * @returns {google.maps.Map} Google map instance\n   *\n   * @protected\n   * @description Returns Google map object\n   */\n  MapComponentCtrl.prototype.getMapInstance = function () {\n    if (!this.gMap && this.componentOptions && this.componentOptions.control && this.componentOptions.control.getGMap) {\n      this.gMap = this.componentOptions.control.getGMap();\n    }\n\n    return this.gMap;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#getMap\n   *\n   * @link http://angular-ui.github.io/angular-google-maps/#!/api/google-map\n   * @description Helper function to create new Angular Google Maps object.\n   */\n  MapComponentCtrl.prototype.getMap = function () {\n    let externalClick = this.options.events && this.options.events.click ? this.options.events.click : angular.noop;\n    let externalZoom = this.options.events && this.options.events.zoom_changed ? this.options.events.zoom_changed : angular.noop;\n    let externalCenter = this.options.events && this.options.events.center_changed ? this.options.events.center_changed : angular.noop;\n    var debounceCenterChange = _.debounce(function (event) {\n      externalCenter(event);\n    }, 500)\n    // var debounceZoomChange = _.debounce(function (event) {\n    //   externalZoom(event);\n    // }, 50)\n    return {\n      control: {},\n      options: this.options.map,\n      bounds: this.options.bounds || {},\n      events: _.extend(this.options.events, {\n        click: (event) => {\n          this.onClick(event);\n          externalClick();\n        },\n        zoom_changed: (event) => {\n          if (event && this.componentOptions && this.componentOptions.mapId) {\n            event.mapId = this.componentOptions.mapId;\n            externalZoom(event);\n            // debounceZoomChange(event);\n          }\n        },\n        center_changed: (event) => {\n          if (event && this.componentOptions && this.componentOptions.mapId) {\n            event.mapId = this.componentOptions.mapId;\n            // externalCenter(event);\n            debounceCenterChange(event);\n          }\n        },\n        dblclick: this.onEventHandler.bind(this),\n        tilesloaded: this.updateMapTiles.bind(this)\n      })\n    };\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#updateMapTiles\n   *\n   * @description Updates map tiles. It is fix for all problems related to not fully loaded tiles\n   */\n  MapComponentCtrl.prototype.updateMapTiles = function (updateCenter = false) {\n    var gMap = this.getMapInstance();\n    if (!gMap) return;\n    this.pipMapHelperSrv.triggerEvent(gMap, 'resize'); // fix map is not fully loaded issue\n  };\n\n  var throttleUpdatingCenter = _.throttle((gMap, center) => {\n    if (!center) return;\n\n    gMap.panTo(center);\n    gMap.setCenter(center);\n  }, 400);\n\n  MapComponentCtrl.prototype.throttleResize = function () {\n    var gMap = this.getMapInstance();\n    if (!gMap)\n      return;\n    if (this.justResized != true) {\n      this.justResized = true;\n      var center = gMap.getCenter();\n      this.$timeout(() => {\n        throttleUpdatingCenter(gMap, center);\n      });\n      this.$timeout(() => {\n        this.justResized = false;\n      }, 400)\n    }\n\n    this.pipMapHelperSrv.triggerEvent(gMap, 'resize');\n  };\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#fitMapToBounds\n   *\n   * @param {google.maps.LatLngBounds} bounds bounds\n   * @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n   *\n   * @description Fit map to specified bounds\n   */\n  MapComponentCtrl.prototype.fitMapToBounds = function (bounds) {\n    this.pipMapHelperSrv.fitMapToBounds(this.getMapInstance(), bounds);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#showSidePanel\n   * @param {string} template Template url to pass to ng-include directive\n   *\n   * @description Shows side panel\n   */\n  MapComponentCtrl.prototype.showSidePanel = function (template) {\n    this.sidePanel.template = template;\n    this.sidePanel.show = true;\n    this.$timeout(this.updateMapTiles.bind(this));\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#hideSidePanel\n   *\n   * @description Hides side panel\n   */\n  MapComponentCtrl.prototype.hideSidePanel = function () {\n    this.sidePanel.template = null;\n    this.sidePanel.show = false;\n    this.$timeout(this.updateMapTiles.bind(this));\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#onClick\n   *\n   * @description On click default handler\n   */\n  MapComponentCtrl.prototype.onClick = function () {\n    this.closePopup();\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#freeze\n   *\n   * @description Freezes map's pan and zoom with mouse\n   */\n  MapComponentCtrl.prototype.freeze = function () {\n    if (this.isFrozen) {\n      return;\n    }\n\n    this.setMapOptions({\n      draggable: false,\n      disableDoubleClickZoom: true,\n      scrollwheel: false\n    });\n    this.isFrozen = true;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#unfreeze\n   *\n   * @description Unfreezes map's pan and zoom with mouse\n   */\n  MapComponentCtrl.prototype.unfreeze = function () {\n    if (!this.isFrozen) {\n      return;\n    }\n\n    this.setMapOptions({\n      draggable: true,\n      disableDoubleClickZoom: true,\n      scrollwheel: true\n    });\n    this.isFrozen = false;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#setCursor\n   * @param {string} [cursor] Cursor code. If empty - the default behaviour is restored\n   *\n   * @description Overrides cursor for the map or set back default behaviour if cursor is not provided\n   * @todo: I couldn't find any possibility to set a cursor for a map.\n   * We can only set cursor for draggableMap and map dragging.\n   * Also it is possible to set cursors for markers (not polys)\n   */\n  MapComponentCtrl.prototype.setCursor = function (cursor) {\n    this.cursor = cursor;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#setMapOptions\n   * @param {google.maps.MapOptions} options Options to set\n   *\n   * @description Sets map options from given options object\n   */\n  MapComponentCtrl.prototype.setMapOptions = function (options) {\n    var mapInstance = this.getMapInstance();\n    mapInstance.setOptions(options);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#createElementPopup\n   * @param {Object} options Popup options\n   * @returns {Object} Popup instance\n   *\n   * @description Creates popup instance and returns it\n   */\n  MapComponentCtrl.prototype.createElementPopup = function (options) {\n    this.createPopupInstance();\n\n    return this.popup.add(options);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#createPopupInstance\n   *\n   * @description Creates popup instance\n   */\n  MapComponentCtrl.prototype.createPopupInstance = function () {\n    if (this.popup) {\n      return;\n    }\n\n    this.popup = this.MapPopupFct.create();\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#closePopup\n   *\n   * @description Closes popup\n   */\n  MapComponentCtrl.prototype.closePopup = function () {\n    if (!this.popup) {\n      return;\n    }\n    console.log('this.popup', this.popup);\n    this.popup.close();\n  };\n\n  function pipMapComponent() {\n    return {\n      strict: 'AE',\n      scope: true,\n      transclude: true,\n      bindToController: {\n        componentOptions: '=pipOptions'\n      },\n      controller: 'MapComponentCtrl',\n      controllerAs: 'ctrl',\n      templateUrl: 'map.html'\n    };\n  }\n\n  angular.module('pipMaps')\n    .controller('MapComponentCtrl', MapComponentCtrl)\n    .directive('pipMap', pipMapComponent);\n})();","\n(() => {\n  'use strict';\n\n  /**\n   * @typedef {Object} Map~eventObj\n   * @property {Object} gModel Google native model passed to event handler\n   * @property {string} eventName Event name\n   * @property {Array} args Arguments passed to the original handler\n   * @property {Object} [model] Model related to an element, fired an event\n   * @property {Object} [position] Clicked position coordinates\n   * @property {Object} [position.latitude] Clicked position latitude\n   * @property {Object} [position.longitude] Clicked position longitude\n   */\n\n\n  /**\n   * @ngdoc service\n   * @name pipMapComponent.mapEventHandlerMixinFct\n   * @description Provides methods for types conversion\n   * @mixin\n   */\n  function mapEventHandlerMixinFct() {\n    /**\n     *  @param {Object} gModel Google element class instance\n     * @param {string} eventName Fired event name\n     * @param {Object|Array} model Element model (settings object like we create here) or 'args'\n     * @param {Array} [args] Arguments passed to google native handler\n     * @returns {Map~eventObj}\n     *\n     * @private\n     * @description Creates event object from arguments\n     * Can be used for both map and model clickers\n     */\n\n    var createEventObjFromHandlerArguments = function (gModel, eventName, model, args) {\n      if (!args || !args.length) {\n        args  = model;\n        model = null;\n      }\n\n      var position = args[0] && args[0].latLng && getPositionFromLatLng(args[0].latLng);\n\n      return {\n        gModel   : gModel,\n        eventName: eventName,\n        args     : args,\n        model    : model,\n        position : position\n      };\n    };\n\n    /**\n     * @param {Object} latLng Google longitude-latitude class instance\n     * @returns {Map~position}\n     *\n     * @private\n     * @description Gets latitude and longitude from latLng instance\n     */\n    var getPositionFromLatLng = function (latLng) {\n      return {\n        latitude : latLng.lat(),\n        longitude: latLng.lng()\n      };\n    };\n\n\n    var mixin = function (postHandler) {\n      postHandler = postHandler || angular.noop;\n\n      return {\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.mapEventHandlerMixinFct\n         * @name pipMapComponent.mapEventHandlerMixinFct#addEventHandler\n         * @param {string} eventName Event name\n         * @param {Function} callback Callback to call\n         *\n         * @returns {Function} Remove handler method\n         * @description Add event handler for given event name\n         */\n        addEventHandler: function (eventName, callback) {\n          var handlerName   = '__onEventOverridden_' + eventName;\n          this[handlerName] = callback;\n\n          return function () {\n            this[handlerName] = null;\n          }.bind(this);\n        },\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.mapEventHandlerMixinFct\n         * @name pipMapComponent.mapEventHandlerMixinFct#onEventHandler\n         * @param {Object} gObject Google map class instance\n         * @param {string} eventName Fired event name\n         * @param {Object|Array} args Model on which event was fired or args\n         * @param {Array} [model] Arguments passed to google native handler\n         *\n         * @description Event handler\n         */\n        onEventHandler: function (gObject, eventName) {\n          var handlerName = '__onEventOverridden_' + eventName;\n          var eventObj    = createEventObjFromHandlerArguments.apply(null, arguments);\n\n          if (angular.isFunction(this[handlerName])) {\n            this[handlerName](eventObj);\n            postHandler();\n\n            return;\n          }\n\n          var defaultHandlerName = 'on' + eventName.charAt(0).toUpperCase() + eventName.slice(1);\n\n          if (angular.isFunction(this[defaultHandlerName])) {\n            this[defaultHandlerName](eventObj);\n            postHandler();\n          }\n        }\n      };\n    };\n\n    return {\n      mixTo: function (obj, $scope) {\n        angular.extend(obj, mixin($scope));\n      }\n    };\n  }\n\n  angular.module('pipMaps')\n    .factory('mapEventHandlerMixinFct', mapEventHandlerMixinFct);\n})();\n","{\n    const config = function (uiGmapGoogleMapApiProvider) {\n        uiGmapGoogleMapApiProvider.configure({\n            key: 'AIzaSyBg6cm-FDBFPWzRcn39AuSHGQSrdtVIjEo',\n            v: '3.23',\n            libraries: 'geometry'\n        });\n    };\n\n    angular.module('pipMaps')\n        .config(config);\n}","interface IMapEditBindings {\n    [key: string]: any;\n\n    overlay: any;\n    onEdit: any;\n    mapOptions: any;\n    showActionPanel: any;\n    actionTypes: any;\n    control: any;\n    disabled: any;\n}\n\nconst MapEditBindings: IMapEditBindings = {\n    overlay: '<pipOverlay',\n    onEdit: '&?pipOnEdit',\n    mapOptions: '=?pipMapOptions',\n    showActionPanel: '<?pipShowActionPanel',\n    actionTypes: '<?pipActionTypes',\n    control: '&?pipControl',\n    disabled: '<?pipDisabled',\n    disabledPolygons: '<?pipDisabledPolygons',\n    disabledPolygonsOptions: '<?pipDisabledPolygonsOptions',\n    disabledPolylines: '<?pipDisabledPolylines',\n    disabledPolylinesOptions: '<?pipDisabledPolylinesOptions',\n    disabledCircles: '<?pipDisabledCircles',\n    disabledCirclesOptions: '<?pipDisabledCirclesOptions'\n}\n\nclass actionTypes {\n    public static clearMap: string = 'clear';\n    public static addCircle: string = 'circle';\n    public static addRectangle: string = 'rectangle';\n    public static addPolygon: string = 'polygon';\n    public static addLine: string = 'line';\n}\n\nclass MapEditChanges implements ng.IOnChangesObject, IMapEditBindings {\n    [key: string]: ng.IChangesObject<any>;\n\n    overlay: ng.IChangesObject<any>;\n    mapOptions: ng.IChangesObject<any>;\n    showActionPanel: ng.IChangesObject<boolean>;\n    actionTypes: ng.IChangesObject<any>;\n    disabled: ng.IChangesObject<boolean>;\n    control: any;\n    onEdit: any;\n}\n\n\nclass MapEditController {\n    public map = {\n        control: {},\n        options: {\n            disableDefaultUI: true,\n            mapTypeId: \"satellite\",\n            panControl: false,\n            zoomControl: false,\n            mapTypeControl: false,\n            streetViewControl: false\n        }\n    };\n    public drawingManagerControl: any = {};\n    public drawingManagerOptions: any = {};\n    public currentOverlay: any = {};\n    public actionTypes: any[];\n\n    public showActionPanel: boolean;\n    public overlay: any;\n    public mapOptions: any;\n    public onEdit: Function;\n    public control: Function;\n    public disabled: boolean;\n\n    private _circleOptions = {\n        fillColor: '#F8E81C',\n        fillOpacity: 0.2,\n        strokeWeight: 3,\n        strokeColor: '#F8E81C',\n        clickable: false,\n        editable: !this.disabled,\n        zIndex: 1\n    };\n    private _polygonOptions = {\n        fillColor: '#F8E81C',\n        fillOpacity: 0.2,\n        strokeWeight: 3,\n        strokeColor: '#F8E81C',\n        clickable: false,\n        editable: !this.disabled,\n        draggable: !this.disabled,\n        zIndex: 1\n    };\n    private _polylineOptions = {\n        strokeWeight: 6,\n        strokeColor: '#F8E81C',\n        clickable: false,\n        editable: !this.disabled,\n        zIndex: 1\n    };\n    private _markerOptions = {\n        icon: {\n            path: 0,\n            scale: 4,\n            strokeWeight: 8,\n            fillColor: '#F8E81C',\n            strokeColor: '#F8E81C',\n            strokeOpacity: 0.9,\n            draggable: !this.disabled\n        }\n    };\n\n    private _rectangleOptions = {\n        fillColor: '#F8E81C',\n        fillOpacity: 0.2,\n        strokeWeight: 3,\n        strokeColor: '#F8E81C',\n        clickable: false,\n        editable: !this.disabled,\n        draggable: !this.disabled,\n        zIndex: 1\n    };\n\n    constructor(\n        private $element: JQuery,\n        private $scope: ng.IScope,\n        private $mdConstant: any,\n        private $document: ng.IDocumentService,\n        private $timeout: ng.ITimeoutService,\n        private uiGmapGoogleMapApi: any\n    ) {\n        $element.addClass('pip-map-edit');\n\n        uiGmapGoogleMapApi.then((maps) => {\n            this.drawingManagerOptions = {\n                drawingControl: false,\n                drawingControlOptions: {\n                    position: google.maps.ControlPosition.TOP_CENTER,\n                    drawingModes: [\n                        google.maps.drawing.OverlayType.CIRCLE,\n                        google.maps.drawing.OverlayType.POLYGON,\n                        google.maps.drawing.OverlayType.POLYLINE\n                    ]\n                },\n                circleOptions: this._circleOptions,\n                polygonOptions: this._polygonOptions,\n                polylineOptions: this._polylineOptions,\n                markerOptions: this._markerOptions,\n                rectangleOptions: this._rectangleOptions\n                \n            };\n        });\n\n        $scope.$watch('$ctrl.map.control.getGMap', () => {\n            if (this.currentOverlay && this.currentOverlay.setMap && _.isFunction(this.map.control['getGMap'])) {\n                this.currentOverlay.setMap(this.map.control['getGMap']());\n                this.fitBounds();\n            }\n        });\n\n        $scope.$watch('$ctrl.mapOptions.embededMap', () => {\n            _.assign(this.map, this.mapOptions);\n        }, true);\n\n        $scope.$watch('$ctrl.mapOptions.isEmbeded', () => {\n            _.assign(this.map, this.mapOptions);\n        });\n\n\n        $scope.$watch('$ctrl.drawingManagerControl.getDrawingManager', (val) => {\n            if (!this.drawingManagerControl.getDrawingManager) {\n                return;\n            }\n\n            google.maps.event.addListener(this.drawingManagerControl.getDrawingManager(), 'overlaycomplete', (e) => {\n                this.drawingManagerControl.getDrawingManager().setDrawingMode(null);\n                this.setOverlay(e.overlay, e.type, false);\n                this.onEditOverlay();\n            });\n\n            google.maps.event.addListener(this.drawingManagerControl.getDrawingManager(), 'drawingmode_changed', () => {\n                if (this.drawingManagerControl.getDrawingManager().getDrawingMode() !== null) {\n                    if (this.currentOverlay && this.currentOverlay.map) this.currentOverlay.setMap(null);\n                }\n            });\n\n            google.maps.event.addDomListener(document, 'keyup', (e) => {\n                const code = (e.keyCode ? e.keyCode : e.which);\n\n                if (code === 27) {\n                    this.drawingManagerControl.getDrawingManager().setDrawingMode(null);\n                }\n\n                if (code === 46) {\n                    this.clearMap();\n                }\n            });\n\n        });\n    }\n\n    public $onDestroy(): void {\n\n    }\n\n    public $onChanges(changes: MapEditChanges): void {\n        if (changes.overlay && changes.overlay.currentValue) {\n            this.setOverlay(this.convertToGoogleMapOverlay(changes.overlay.currentValue), changes.overlay.currentValue.type);\n        }\n\n        if (changes.disabled) {\n            if (this.currentOverlay) {\n                this.currentOverlay.setDraggable(!changes.disabled.currentValue);\n                if (this.currentOverlay.setEditable) this.currentOverlay.setEditable(!changes.disabled.currentValue);\n            }\n        }\n    }\n\n    public $onInit() {\n        angular.extend(this.map, this.mapOptions);\n\n        if (this.control) {\n            this.control({ control: this });\n        }\n    }\n\n    private fitBounds() {\n        if (!this.map.control['getGMap'] || !this.currentOverlay) return;\n\n        switch (this.overlay.type) {\n            case 'circle': {\n                this.map.control['getGMap']().fitBounds(this.currentOverlay.getBounds());\n                break;\n            }\n\n            case 'marker': {\n                if (this.currentOverlay.getPosition) {\n                    this.map.control['getGMap']().panTo(this.currentOverlay.getPosition());\n                }\n                break;\n            }\n\n            case 'rectangle': {\n                this.map.control['getGMap']().fitBounds(this.currentOverlay.getBounds());\n                break;\n            }\n\n            default: {\n                if (this.currentOverlay.getPath().getArray().length > 0) {\n                    var bounds = new google.maps.LatLngBounds();\n                    _.each(this.currentOverlay.getPath().getArray(), (coor) => {\n                        bounds.extend(coor);\n                    });\n                    this.map.control['getGMap']().fitBounds(bounds);\n                }\n            }\n        }\n    }\n\n    private convertToGoogleMapOverlay(overlay) {\n        if (overlay.type === 'polygon') {\n            return this.createPolygon(overlay);\n        }\n\n        if (overlay.type === 'line' || overlay.type === 'polyline') {\n            return this.createPolyline(overlay);\n        }\n\n        if (overlay.type === 'circle') {\n            return this.createCircle(overlay);\n        }\n\n        if (overlay.type === 'marker') {\n            return this.createMarker(overlay);\n        }\n\n        if (overlay.type === 'rectangle') {\n            return this.createRectangle(overlay);\n        }\n    }\n\n    private createMarker(overlay: any) {\n        if ((overlay.pos && overlay.pos.coordinates) || (overlay.latitude && overlay.longitude)) {\n            let centerCoords = {};\n            centerCoords = {\n                lat: overlay.pos.coordinates ? overlay.pos.coordinates[1] : overlay.latitude,\n                lng: overlay.pos.coordinates ? overlay.pos.coordinates[0] : overlay.longitude\n            };\n\n            const marker = new google.maps.Marker(angular.extend(\n                this.getOptionsByType('marker'),\n                { position: centerCoords }\n            ));\n\n            if (this.map.control['getGMap']) marker.setMap(this.map.control['getGMap']());\n\n            return marker;\n        }\n\n        return new google.maps.Circle(this.getOptionsByType('circle'));\n    }\n\n    private createCircle(overlay: any) {\n        if (overlay.center && (overlay.center.coordinates || (overlay.center.latitude && overlay.center.longitude)) && overlay.distance) {\n            let centerCoords = {};\n            centerCoords = {\n                lat: overlay.center.coordinates ? overlay.center.coordinates[1] : overlay.center.latitude,\n                lng: overlay.center.coordinates ? overlay.center.coordinates[0] : overlay.center.longitude\n            };\n\n            const circle = new google.maps.Circle(angular.extend(\n                this.getOptionsByType('circle'),\n                { center: centerCoords, radius: overlay.distance }\n            ));\n\n            if (this.map.control['getGMap']) circle.setMap(this.map.control['getGMap']());\n\n            return circle;\n        }\n\n        return new google.maps.Circle(this.getOptionsByType('circle'));\n    }\n\n    private createPolygon(overlay) {\n        if (overlay.geometry && overlay.geometry.coordinates) {\n            const polygonCoords = [];\n\n            _.each(overlay.geometry.coordinates[0], (coor) => {\n                polygonCoords.push({ lat: coor[1], lng: coor[0] });\n            });\n\n            const polygon = new google.maps.Polygon(angular.extend(\n                this.getOptionsByType('polygon'),\n                { paths: polygonCoords }\n            ));\n\n            if (this.map.control['getGMap']) polygon.setMap(this.map.control['getGMap']());\n\n            return polygon;\n        }\n\n        return new google.maps.Polygon(this.getOptionsByType('polygon'));;\n    }\n\n    private createPolyline(overlay) {\n        if (overlay.geometry && overlay.geometry.coordinates) {\n            const polylineCoords = [];\n\n            _.each(overlay.geometry.coordinates, (coor) => {\n                polylineCoords.push({ lat: coor[1], lng: coor[0] });\n            });\n\n            const polyline = new google.maps.Polyline(angular.extend(\n                this.getOptionsByType('line'),\n                { path: polylineCoords }\n            ));\n\n            if (this.map.control['getGMap']) polyline.setMap(this.map.control['getGMap']());\n\n            return polyline;\n        }\n\n        return new google.maps.Polyline(this.getOptionsByType('line'));\n    }\n\n    private createRectangle(overlay) {\n        if (overlay.bounds) {\n            var rectangleBounds = overlay.bounds;\n            var rectangle = new google.maps.Rectangle(angular.extend(this.getOptionsByType('rectangle'), { bounds: rectangleBounds }));\n\n            if (this.map.control['getGMap'])\n                rectangle.setMap(this.map.control['getGMap']());\n            \n            return rectangle;\n        }\n        return new google.maps.Rectangle(this.getOptionsByType('rectangle'));\n    };\n\n    private getOptionsByType(type: string): any {\n        switch (type) {\n            case 'polygon':\n                return _.cloneDeep(angular.extend(this._polygonOptions, this.getDisableOptions()));\n            case 'circle':\n                return _.cloneDeep(angular.extend(this._circleOptions, this.getDisableOptions()));\n            case 'line':\n                return _.cloneDeep(angular.extend(this._polylineOptions, this.getDisableOptions()));\n            case 'polyline':\n                return _.cloneDeep(angular.extend(this._polylineOptions, this.getDisableOptions()));\n            case 'marker':\n                return _.cloneDeep(angular.extend(this._markerOptions, this.getDisableOptions()));\n            case 'rectangle':\n                return _.cloneDeep(angular.extend(this._rectangleOptions, this.getDisableOptions()));\n        }\n    }\n\n    private getDisableOptions() {\n        return {\n            editable: !this.disabled,\n            draggable: !this.disabled\n        }\n    }\n\n    private setOverlay(overlay, type, fitBounds = true) {\n        if (!overlay) return;\n\n        this.clearMap();\n        this.currentOverlay = overlay || {};\n        this.currentOverlay.type = type;\n        switch (type) {\n            case 'circle': {\n                this.currentOverlay.center_changed = () => {\n                    this.onEditOverlay();\n                };\n\n                this.currentOverlay.radius_changed = () => {\n                    this.onEditOverlay();\n                };\n                break;\n            }\n\n            case 'marker': {\n                if (!this.currentOverlay.addListener) return;\n\n                this.currentOverlay.addListener('position_changed', () => {\n                    this.onEditOverlay();\n                });\n                break;\n            }\n\n            case 'rectangle': {\n                if (!this.currentOverlay.addListener)\n                    return;\n                this.currentOverlay.addListener('bounds_changed', () => {\n                    this.onEditOverlay();\n                });\n                break;\n            }\n\n            default: {\n                if (!this.currentOverlay.getPath) return;\n\n                google.maps.event.addListener(this.currentOverlay.getPath(), 'set_at', () => {\n                    this.onEditOverlay();\n                });\n\n                google.maps.event.addListener(this.currentOverlay.getPath(), 'insert_at', () => {\n                    this.onEditOverlay();\n                });\n            }\n        }\n\n        if (fitBounds) this.fitBounds();\n    }\n\n    private onEditOverlay() {\n        if (this.onEdit) this.onEdit({\n            overlay: this.currentOverlay,\n            bounds: this.currentOverlay && this.currentOverlay.type === 'rectangle' ? {\n                north: this.currentOverlay.getBounds().getNorthEast().lat(),\n                east: this.currentOverlay.getBounds().getNorthEast().lng(),\n                south: this.currentOverlay.getBounds().getSouthWest().lat(),\n                west: this.currentOverlay.getBounds().getSouthWest().lng(),\n            } : {},\n            type: this.currentOverlay ? this.currentOverlay.type : null,\n            path: this.currentOverlay && (this.currentOverlay.type === 'polygon' || this.currentOverlay.type === 'polyline') ? this.currentOverlay.getPath() : [],\n            center: this.currentOverlay && this.currentOverlay.type === 'circle' ?\n                this.currentOverlay.getCenter() : this.currentOverlay && this.currentOverlay.getPosition && this.currentOverlay.type === 'marker' ? this.currentOverlay.getPosition() : {},\n            radius: this.currentOverlay && this.currentOverlay.type === 'circle' ? this.currentOverlay.getRadius() : {}\n        });\n    }\n\n    public showAction(action) {\n        return !this.actionTypes ? true : this.actionTypes.includes(action);\n    }\n\n    public get showPanel() {\n        return this.showActionPanel === false ? false : true;\n    }\n\n    public addCircle() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.CIRCLE;\n    }\n\n    public addPolygon() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.POLYGON;\n    }\n    \n    public addRectangle() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.RECTANGLE;\n    }\n\n    public addLine() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.POLYLINE;\n    }\n\n    public addMarker() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.MARKER;\n    }\n\n    public clearMap() {\n        this.drawingManagerOptions.drawingMode = null;\n        if (this.currentOverlay && this.currentOverlay.map) {\n            this.currentOverlay.setMap(null);\n            this.currentOverlay = null;\n            this.onEditOverlay();\n        }\n    }\n\n}\n\nlet config = function (uiGmapGoogleMapApiProvider) {\n    uiGmapGoogleMapApiProvider.configure({\n        libraries: 'drawing'\n    });\n};\n\n(() => {\n    angular.module('pipMapsEdit')\n        .component('pipMapEdit', {\n            bindings: MapEditBindings,\n            templateUrl: 'edit/MapEdit.html',\n            controller: MapEditController,\n            controllerAs: '$ctrl'\n        })\n        .config(config);\n})();\n","angular.module('pipMapsEdit', []);\n\nimport './MapEdit';","(function () {\n    'use strict';\n\n    function MapElementsCtrlFct() {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapElementsCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         *\n         * @description Controller for a map component (directive)\n         */\n        function MapElementsCtrl($injector, $scope) {\n            var mapEventHandlerMixinFct = $injector.get('mapEventHandlerMixinFct');\n            mapEventHandlerMixinFct.mixTo(this, $scope.$applyAsync.bind($scope));\n\n            this.control = {};\n            this.popUpOpened = null;\n            this.pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n            this.uiGmapIsReady = $injector.get('uiGmapIsReady');\n            this.$q = $injector.get('$q');\n        }\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#$onInit\n         *\n         * @description Init component\n         */\n        MapElementsCtrl.prototype.$onInit = function () {\n            /**\n             * @ngdoc property\n             * @propertyOf pipMapComponent.MapElementsCtrl\n             * @name pipMapComponent.MapElementsCtrl#componentOptions\n             * @type {Object}\n             *\n             * @description Options from outer scope\n             */\n            this.options = angular.merge({}, this.defaultOptions, this.componentOptions);\n            this.models = this.models || [];\n\n            this.externalDblclick = this.options.events && this.options.events.dblclick ? this.options.events.dblclick : angular.noop;\n            this.externalClick = this.options.events && this.options.events.click ? this.options.events.click : angular.noop;\n            this.externalRightclick = this.options.events && this.options.events.rightclick ? this.options.events.rightclick : angular.noop;\n\n            this.events = _.extend(this.options.events,\n                {\n                    dblclick: this.onEventHandler.bind(this),\n                    mousedown: this.onEventHandler.bind(this),\n                    mouseup: this.onEventHandler.bind(this),\n                    rightclick: this.onEventHandler.bind(this),\n                    click: this.onEventHandler.bind(this),\n                    position_changed: (objEvent) => {\n                        this.updatePopupPosition(objEvent);\n                    }\n                });\n        };\n        \n        MapElementsCtrl.prototype.$onDestroy = function () { \n            this.closePopup();\n        };\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapElementsCtrl.prototype.defaultOptions = {\n            popup: false,\n            fitBounds: false\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#init\n         * @param {Object} mapCtrl Instance of the map controller\n         *\n         * @description Init edition\n         */\n        MapElementsCtrl.prototype.init = function (mapCtrl) {\n            this.mapCtrl = mapCtrl;\n            this.initPopup();\n        };\n\n        MapElementsCtrl.prototype.setNewOptions = function (popupOptions) {\n            if (this.popup) this.popup.setNewOptions(popupOptions);\n        };\n\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#initPopup\n         *\n         * @description Init popup for an element\n         */\n        MapElementsCtrl.prototype.initPopup = function () {\n            if (!this.options.popup) {\n                return;\n            }\n\n            this.options.popup = angular.merge({}, this.options.popup, {\n                onShow: this.onShowPopup.bind(this),\n                onClose: this.onClosePopup.bind(this)\n            });\n\n            this.pipMapHelperSrv.whenReady.then(function () {\n                this.popup = this.mapCtrl.createElementPopup(this.options.popup);\n            }.bind(this));\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#onShowPopup\n         * @param {Object} model Model to which popup is shown\n         * @param {Object} options Options of the popup\n         *\n         * @description On popup show handler\n         */\n        MapElementsCtrl.prototype.onShowPopup = function () {\n            this.popUpOpened = true;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#onClosePopup\n         *\n         * @description On popup close handler\n         */\n        MapElementsCtrl.prototype.onClosePopup = function () {\n            this.popUpOpened = false;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getBoundsToFitAsync\n         * @return {Promise} Promise for getting bounds\n         *\n         * @description Gets bounds from model positions to fit them. Does so async, after map is ready\n         * If options for fitting is switched off - it rejects the promise\n         */\n        MapElementsCtrl.prototype.getBoundsToFitAsync = function () {\n            if (!this.options.fitBounds) {\n                return this.$q.reject('Fit is switched off');\n            }\n\n            return this.uiGmapIsReady.promise()\n                .then(function () {\n                    return this.getBounds();\n                }.bind(this));\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getBounds\n         * @return {Object} Bounds for the models\n         *\n         * @description Gets bounds from model positions to fit them\n         */\n        MapElementsCtrl.prototype.getBounds = function () {\n            return this.pipMapHelperSrv.getBoundsFromCoordinates(this.getAllPositions());\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getAllPositions\n         * @returns {Array<Object>} Positions for given model or an empty array\n         *\n         * @description Gets model positions array.\n         */\n        MapElementsCtrl.prototype.getAllPositions = function () {\n            if (!angular.isArray(this.models)) {\n                return [];\n            }\n\n            return this.models.map(function (model) {\n                return this.getPosition(model);\n            }, this);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getPosition\n         * @param {Object} model Model to get position for\n         * @returns {Array<Map~position>|<Map~position>} Position for a model\n         *\n         * @description Default maker position getter. We use it if coords is set to 'self'\n         */\n        MapElementsCtrl.prototype.getPosition = function (model) {\n            return {\n                latitude: model.latitude,\n                longitude: model.longitude\n            };\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#isModelEmpty\n         * @param {Object} model Model to check position for\n         * @returns {boolean} True if current model is empty\n         *\n         * @description Checks whether model is empty\n         */\n        MapElementsCtrl.prototype.isModelEmpty = function (model) {\n            var position = this.getPosition(model);\n            return !position.latitude || !position.longitude;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#onClick\n         * @param {Map~eventObj} eventObj Event object\n         *\n         * @description Handler on model click\n         */\n        MapElementsCtrl.prototype.onDblclick = function (eventObj) {\n            this.externalDblclick(eventObj);\n            //this.correctCircleModel(eventObj);\n            //this.togglePopup(eventObj);\n        };\n\n        MapElementsCtrl.prototype.onClick = function (eventObj) {\n            this.externalClick(eventObj);\n            if (this.longClick) {\n                this.correctCircleModel(eventObj);\n                this.togglePopup(eventObj);\n                this.longClick = false;\n            } else {\n                this.closePopup();\n            }\n            \n        };\n\n        MapElementsCtrl.prototype.correctCircleModel = function (eventObj) {\n            if (eventObj.gModel.radius && eventObj.gModel.center) {\n                let model = {};\n\n                _.each(this.models, (m) => {\n                    if (m[this.options.center] && m[this.options.radius]) {\n                        if (m[this.options.center].latitude.toFixed(5) == eventObj.gModel.center.lat().toFixed(5) &&\n                            m[this.options.center].longitude.toFixed(5) == eventObj.gModel.center.lng().toFixed(5) &&\n                            m[this.options.radius].toFixed(5) === eventObj.gModel.radius.toFixed(5)) {\n                            model = m;\n                        }\n                    }\n                });\n\n                eventObj.model = model;\n            }\n        };\n\n        MapElementsCtrl.prototype.onRightclick = function (eventObj) {\n            this.externalRightclick(eventObj);\n            this.correctCircleModel(eventObj);\n            this.togglePopup(eventObj);\n        };\n\n        MapElementsCtrl.prototype.onMousedown = function (eventObj) {\n            this.start = new Date().getTime();\n        };\n\n        MapElementsCtrl.prototype.onMouseup = function (eventObj) {\n            this.end = new Date().getTime();\n            this.longClick = (this.end - this.start > 300);\n        };\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#togglePopup\n         * @param {Map~eventObj} eventObj Event object\n         *\n         * @description Toggles popup\n         */\n        MapElementsCtrl.prototype.togglePopup = function (eventObj) {\n            if (!this.popup) {\n                return;\n            }\n\n            this.popup.toggle(eventObj);\n        };\n\n        MapElementsCtrl.prototype.closePopup = function (eventObj) {\n            if (!this.popup) {\n                return;\n            }\n\n            this.popup.close();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getModels\n         * @returns {Array<Object>} Array of current models\n         *\n         * @description Returns current models list\n         */\n        MapElementsCtrl.prototype.getModels = function () {\n            return this.models;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#checkContainsModel\n         * @param {Object} model Model to check\n         * @returns {boolean} True if contains\n         *\n         * @description Check whether current element contains given model\n         */\n        MapElementsCtrl.prototype.checkContainsModel = function (model) {\n            return this.models.indexOf(model) > -1;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getPlural\n         * @param {*} id Id of the model to get plural for\n         * @returns {Object} Plural model with given id\n         *\n         * @description Returns plural models with given id.\n         */\n        MapElementsCtrl.prototype.getPlural = function (id) {\n            return this.getPlurals().get(id);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getPlurals\n         * @returns {Object} Plural object with methods\n         *\n         * @description Returns plurals models\n         */\n        MapElementsCtrl.prototype.getPlurals = function () {\n            return this.control.getPlurals();\n        };\n\n        MapElementsCtrl.prototype.updatePopupPosition = function (objEvent) {\n            if (this.popUpOpened === objEvent.model.id) {\n                this.popup.setPosition({\n                    latitude: objEvent.position.lat(),\n                    longitude: objEvent.position.lng()\n                });\n            }\n        }\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#freezeMap\n         *\n         * @description Freezes map\n         */\n        MapElementsCtrl.prototype.freezeMap = function () {\n            return this.mapCtrl.freeze();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#unfreezeMap\n         *\n         * @description unfreezes map\n         */\n        MapElementsCtrl.prototype.unfreezeMap = function () {\n            return this.mapCtrl.unfreeze();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#setCursor\n         * @param {string} [cursor] Cursor code. If empty - the default behaviour is restored\n         *\n         * @description Overrides cursor for the map or set back default behaviour if cursor is not provided\n         * @todo: This is not used currently. It was developed to able change cursors from actions\n         */\n        MapElementsCtrl.prototype.setCursor = function (cursor) {\n            return this.mapCtrl.setCursor(cursor);\n        };\n\n\n        return MapElementsCtrl;\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapElementsCtrlFct', MapElementsCtrlFct);\n})();","(function () {\n    'use strict';\n\n    /**\n     * @typedef {Object} Map~PopupBreakpoint\n     * @property {string} name Name of the breakpoint (according to material docs)\n     * @property {number} width Width of the offset\n     * @property {number} height Height of the offset\n     */\n    /**\n     * @ngdoc service\n     * @name pipMapComponent.pipMapElementsFct\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Models array\n     * @property {Object} pipOptions Options for a map elements\n     * @property {boolean} [pipOptions.fitBounds = true] Whether map fit bounds method should work\n     * @property {boolean|Object} [pipOptions.popup = false] Popup for an element settings.\n     * If set to false - popup is disabled\n     * @property {string} [pipOptions.popup.className] Class name to add to a popup\n     * @property {string} [pipOptions.popup.templateUrl] Template url for a popup\n     * @property {Object} [pipOptions.popup.offset] Offset for a popup from current position\n     * @property {number} [pipOptions.popup.width] Width of the offset\n     * @property {number} [pipOptions.popup.height] Height of the offset\n     * @property {Array.<Map~PopupBreakpoint>} [pipOptions.popup.breakpoints] Breakpoints to change offset for\n     * Array is used for ability to prioritize them. If no breakpoint is matched - default offset is used\n     *\n     * @description\n     * This is a template for a directive.\n     * You SHOULD provide proper 'require', 'controller' and 'template' properties\n     * Also you can decorate anything in it\n     */\n    function pipMapElementsFct($timeout) {\n        return {\n            strict: 'AE',\n            scope: {},\n            require: ['^pipMap', 'pipMapElements'],\n            link: function ($scope, $element, $attrs, $controllers) {\n                var mapCtrl = $controllers[0];\n                var elementController = $controllers[1];\n\n                elementController.init(mapCtrl);\n\n                $scope.$watch('ctrl.models', function (models) {\n                    if (models) {\n                        elementController.getBoundsToFitAsync().then(function (bounds) {\n                            // fix issue with map zooming.\n                            // We need timeout because map is fit bound on this call, but then it fits given zoom and bounds are lost\n                            $timeout(mapCtrl.fitMapToBounds.bind(mapCtrl, bounds), 200);\n                        });\n                    }\n                });\n\n                $scope.$watch('ctrl.componentOptions.popup', (popupOptions) => {\n                    elementController.setNewOptions(popupOptions);\n                }, true);\n            },\n\n            bindToController: {\n                componentOptions: '=pipOptions',\n                models: '=pipModels'\n            },\n\n            controller: 'MapElementsCtrl',\n            controllerAs: 'ctrl',\n            templateUrl: 'elements/map-elements.html'\n        };\n    }\n\n    angular.module('pipMapsElements')\n        .factory('pipMapElementsFct', pipMapElementsFct);\n})();","(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name pipMapComponent.mapElementsRequireFct\n   *\n   * @description Provide methods for requiring elements, detect there controllers and types\n   */\n  function mapElementsRequireFct() {\n    return {\n      /**\n       * @ngdoc property\n       * @propertyOf pipMapComponent.mapElementsRequireFct\n       * @name pipMapComponent.mapElementsRequireFct#elements\n       *\n       * @type {Array<string>}\n       */\n      elements: ['?^pipMapMarkers', '?^pipMapPolylines', '?^pipMapPolygons', '?^pipMapKml'],\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.mapElementsRequireFct\n       * @name pipMapComponent.mapElementsRequireFct#getType\n       *\n       * @param {Array<Object>} $controllers Controllers instances which were required\n       * @param {number} [startIndex = 0] Index to start searching from\n       * @returns {string} Type of the element on which this directive is used\n       *\n       * @description Detects by controllers names element type on which this directive is being used\n       */\n      getType: function ($controllers, startIndex) {\n        try {\n          return $controllers.slice(startIndex)\n            .map(function (ctrl, index) {\n              return ctrl && this.elements[index];\n            }, this)\n            .filter(function (ctrlName) {\n              return ctrlName;\n            })[0]\n            .replace('?^pipMap', '')\n            .toLowerCase();\n        } catch (e) {\n          throw new Error('pip-map-editable-element can be used only with map elements directives');\n        }\n      },\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.mapElementsRequireFct\n       * @name pipMapComponent.mapElementsRequireFct#getController\n       *\n       * @param {Array<Object>} $controllers Controllers instances which were required\n       * @param {number} [startIndex = 0] Index to start searching from\n       * @returns {Object} Instance of the controller\n       *\n       * @description Returns element's controllers among other controllers instances\n       */\n      getController: function ($controllers, startIndex) {\n        return $controllers.slice(startIndex)\n          .filter(function (ctrl) {\n            return ctrl;\n          })[0];\n      }\n    };\n  }\n\n  angular.module('pipMapsElements')\n    .factory('mapElementsRequireFct', mapElementsRequireFct);\n})();\n","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapCircles\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Circles array\n     * @property {Object} pipOptions Options for a map circles\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapCirclesCtrlFct(MapElementsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapCirclesCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapElementsCtrl\n         *\n         * @description Controller for a map circles\n         */\n        function MapCirclesCtrl($injector, $scope) {\n            MapElementsCtrlFct.call(this, $injector, $scope);\n            this.$parse = $injector.get('$parse');\n        }\n\n\n        var _super = MapElementsCtrlFct.prototype;\n        MapCirclesCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapCirclesCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {\n            stroke: 'stroke',\n            fill: 'fill',\n            radius: 'radius',\n            center: 'center',\n            fitBounds: false\n        });\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#$onInit\n         *\n         * @description Init component\n         */\n        MapCirclesCtrl.prototype.$onInit = function () {\n            _super.$onInit.call(this);\n            this.setPositionGetterSetter();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#setPositionGetterSetter\n         *\n         * @description Sets getter for coordinates or null if it not needed. Treats options.model.coords\n         */\n        MapCirclesCtrl.prototype.setPositionGetterSetter = function () {\n            var pathProp = this.options.path;\n\n            this.getPosition = this.$parse(pathProp);\n            this.setPosition = this.getPosition.assign;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#setDefaultPositionsIfNeeded\n         * @param {Object} model Marker to set position for\n         *\n         * @description Checks if current positions is empty and sets default if needed\n         */\n        MapCirclesCtrl.prototype.setDefaultPositionsIfNeeded = function (model) {\n            var positions = this.getPosition(model);\n\n            if (!angular.isArray(positions)) {\n                this.setPosition(model, []);\n            }\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#getAllPositions\n         * @returns {Array<Object>} Positions for given model or an empty array\n         *\n         * @description Gets model positions array.\n         */\n        MapCirclesCtrl.prototype.getAllPositions = function () {\n            var paths = _super.getAllPositions.call(this);\n            return Array.prototype.concat.apply([], paths); //flatten array of arrays\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#setPosition\n         * @param {Object} model Marker to set position for\n         * @param {Array<Map~position>|<Map~position>} position Position to set\n         *\n         * @description Default maker position setter. We use it if coords is set to 'self'\n         */\n        MapCirclesCtrl.prototype.setPosition = function (model, position) {\n            model[this.defaultOptions.center] = position;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#getPosition\n         * @param {Object} model Marker to get position for\n         * @returns {Array<Map~position>|<Map~position>} Position for a model\n         *\n         * @description Default polygon position getter. We use it if coords is set to 'self'\n         */\n        MapCirclesCtrl.prototype.getPosition = function (model) {\n            return model[this.defaultOptions.center];\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#isModelEmpty\n         * @param {Object} model Model to check position for\n         * @returns {boolean} True if current model is empty\n         *\n         * @description Checks whether model is empty\n         */\n        MapCirclesCtrl.prototype.isModelEmpty = function (model) {\n            var position = this.getPosition(model);\n            return !position;\n        };\n\n\n        return MapCirclesCtrl;\n    }\n\n\n    /**\n     * Create controller\n     */\n    function MapCirclesCtrlBuilder($controller, $scope, MapCirclesCtrlFct) {\n        var instance = $controller(MapCirclesCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n    function pipMapCircles(pipMapElementsFct) {\n        return angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapCircles'],\n            controller: 'MapCirclesCtrl',\n            templateUrl: 'elements/circles/map-circles.html'\n        });\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapCirclesCtrlFct', MapCirclesCtrlFct)\n        .controller('MapCirclesCtrl', MapCirclesCtrlBuilder)\n        .directive('pipMapCircles', pipMapCircles);\n})();","angular.module('pipMapsElements', []);\n\nimport './MapElementControllerService';\nimport './MapElementDirectiveService';\nimport './MapElementRequireService';\n\nimport './kml/MapKml';\nimport './markers/MapMarkers';\nimport './polygons/MapPolygons';\nimport './polylines/MapPolylines';\nimport './circles/MapCircles';","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapKml\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Kml array\n     * @property {Object} pipOptions Options for a map markers\n     * @property {boolean|Object} [pipOptions.connect = false] Connection lines settings\n     * (connect markers or groups together). If set to false - connections are disabled\n     * @property {Object} [pipOptions.connect.stroke] Settings for connections stroke\n     * @property {Object} [pipOptions.connect.icons] Settings for connection icons\n     * @property {Object} [pipOptions.connect.property] Settings for connection data\n     * from which property it should take data to show connections.\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapKmlCtrlFct(MapElementsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapKmlCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapElementsCtrl\n         *\n         * @description Controller for a map KML\n         */\n        function MapKmlCtrl($injector, $scope) {\n            MapElementsCtrlFct.call(this, $injector, $scope);\n\n            this.pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n            this.existingModels = [];\n        }\n\n\n        var _super = MapElementsCtrlFct.prototype;\n        MapKmlCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapKmlCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {\n            layer: {\n                preserveViewport: true,\n                suppressInfoWindows: true\n            }\n        });\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#getPopupParameters\n         * @returns {Object} Parameters object\n         *\n         * @description Gets parameters object for a popup template\n         * @todo: Check whether this code is actual after moving to one popup instance per map\n         */\n        MapKmlCtrl.prototype.getPopupParameters = function (): any {\n            if (!this.popup.model) {\n                return {};\n            }\n\n            return {\n                model: this.popup.model,\n                position: this.popup.position,\n                meta: this.popup.model.instance.getMetadata()\n            };\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#update\n         *\n         * @description Updates models\n         */\n        MapKmlCtrl.prototype.update = function () {\n            this.pipMapHelperSrv.whenReady.then(function () {\n                this.removeOldModels();\n                this.addNewModels();\n            }.bind(this));\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#removeOldModels\n         *\n         * @description Removes old models\n         */\n        MapKmlCtrl.prototype.removeOldModels = function () {\n            this.getOldModels()\n                .forEach(function (model) {\n                    model.instance.setMap(null);\n                    this.deRegisterModel(model);\n                }, this);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#getOldModels\n         * @returns {Array<Object>} Old models\n         *\n         * @description Returns old models\n         */\n        MapKmlCtrl.prototype.getOldModels = function () {\n            var newUrls = this.models.map(function (model) {\n                return model.url;\n            });\n\n            return this.existingModels\n                .filter(function (model) {\n                    return newUrls.indexOf(model.url) === -1;\n                });\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#addNewModels\n         *\n         * @description Adds new models to the map models\n         */\n        MapKmlCtrl.prototype.addNewModels = function () {\n            this.getNewModels()\n                .forEach(function (model) {\n                    var copy = angular.copy(model);\n                    this.addModel(copy);\n                    this.registerModel(copy);\n                    this.addEvents(copy);\n                }, this);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#getNewModels\n         * @returns {Array<Object>} New models\n         *\n         * @description Returns array of models to add\n         */\n        MapKmlCtrl.prototype.getNewModels = function () {\n            var existingUrls = this.existingModels.map(function (model) {\n                return model.url;\n            });\n\n            return this.models\n                .filter(function (model) {\n                    return existingUrls.indexOf(model.url) === -1;\n                });\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#addModel\n         * @param {Object} model Model to add\n         *\n         * @description Adds a model to the map\n         */\n        MapKmlCtrl.prototype.addModel = function (model) {\n            var mapInstance = this.mapCtrl.getMapInstance();\n            var options = angular.merge({\n                map: mapInstance,\n                url: model.url\n            }, this.options.layer);\n\n            model.instance = this.pipMapHelperSrv.createKML(options);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#addEvents\n         * @param {Object} model Model to add\n         * @param {Object} model.instance Instance of the model's map element\n         *\n         * @description Adds events to a model\n         */\n        MapKmlCtrl.prototype.addEvents = function (model) {\n            var clickHandler = this.onEvent.bind(this, model, 'click');\n            model.instance.addListener('click', clickHandler);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#onEvent\n         * @param {Object} model Model to add\n         * @param {Object} model.instance Instance of the model's map element\n         * @param {string} name Event name\n         *\n         * @description Event handler - adapter between mixin's handler and native events\n         */\n        MapKmlCtrl.prototype.onEvent = function (model, name) {\n            var args = this.copyArguments(arguments, 2);\n            this.onEventHandler(model.instance, name, model, args);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#copyArguments\n         *\n         * @param {Arguments} args Arguments array\n         * @param {number} startIndex Starting index for copying\n         * @return {Array} Copied arguments\n         *\n         * @description Copies arguments into an array.\n         * @see https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n         */\n        MapKmlCtrl.prototype.copyArguments = function (args, startIndex) {\n            var result = [];\n\n            for (var i = 0; i < args.length - startIndex; ++i) {\n                result[i] = args[i + startIndex];\n            }\n\n            return result;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#getPopupMetaData\n         * @returns {?Object} Metadata for current model in popup\n         *\n         * @description Returns metadata\n         * @todo: Check whether this code is actual after moving to one popup instance per map\n         */\n        MapKmlCtrl.prototype.getPopupMetaData = function () {\n            return this.popup.model && this.popup.model.instance.getMetadata();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#registerModel\n         * @param {Object} model Model to register\n         *\n         * @description Registers model as existing\n         */\n        MapKmlCtrl.prototype.registerModel = function (model) {\n            this.existingModels.push(model);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#deRegisterModel\n         * @param {Object} model Model to de-register\n         *\n         * @description De-registers model as existing\n         */\n        MapKmlCtrl.prototype.deRegisterModel = function (model) {\n            var index = this.existingModels.indexOf(model);\n            this.existingModels.splice(index, 1);\n        };\n\n\n        return MapKmlCtrl;\n    }\n\n\n    /**\n     * Create controller\n     */\n    function MapKmlCtrlBuilder($controller, $scope, MapKmlCtrlFct) {\n        var instance = $controller(MapKmlCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n\n    function pipMapKml(pipMapElementsFct) {\n        var definition = angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapKml'],\n            controller: 'MapKmlCtrl',\n            templateUrl: 'elements/kml/map-kml.html'\n        });\n\n        var link = definition.link;\n        definition.link = function ($scope, $element, $attrs, $controllers) {\n            link.apply(this, arguments);\n\n            var mapCtrl = $controllers[0];\n            var elementController = $controllers[1];\n\n            elementController.mapCtrl = mapCtrl;\n            $scope.$watchCollection('ctrl.models', function (models) {\n                if (models) {\n                    elementController.update();\n                }\n            });\n        };\n\n        return definition;\n    }\n\n    angular.module('pipMapsElements')\n        .directive('pipMapKml', pipMapKml)\n        .factory('MapKmlCtrlFct', MapKmlCtrlFct)\n        .controller('MapKmlCtrl', MapKmlCtrlBuilder);\n})();","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapMarkers\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Markers array\n     * @property {Object} pipOptions Options for a map markers\n     * @property {boolean|Object} [pipOptions.connect = false] Connection lines settings\n     * (connect markers or groups together). If set to false - connections are disabled\n     * @property {Object} [pipOptions.connect.stroke] Settings for connections stroke\n     * @property {Object} [pipOptions.connect.icons] Settings for connection icons\n     * @property {Object} [pipOptions.connect.property] Settings for connection data\n     * from which property it should take data to show connections.\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapMarkersCtrlFct(MapElementsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapMarkersCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapElementsCtrl\n         *\n         * @description Controller for a map marker\n         */\n        function MapMarkersCtrl($injector, $scope) {\n            MapElementsCtrlFct.call(this, $injector, $scope);\n\n            this.$parse = $injector.get('$parse');\n            this.pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n        }\n\n\n        var _super = MapElementsCtrlFct.prototype;\n        MapMarkersCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapMarkersCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {\n            model: {\n                coords: 'self',\n                icon: 'icon'\n            },\n            connect: false\n        });\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#$onInit\n         *\n         * @description Init component\n         */\n        MapMarkersCtrl.prototype.$onInit = function () {\n            _super.$onInit.call(this);\n            this.setPositionGetterSetter();\n            this.initConnect();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#initConnect\n         *\n         * @description Init polyline configuration for connections\n         */\n        MapMarkersCtrl.prototype.initConnect = function () {\n            if (!this.options.connect) {\n                return;\n            }\n\n            var options = this.options.connect;\n\n            this.connect = angular.merge({\n                show: true\n            }, options);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#setPositionGetterSetter\n         *\n         * @description Sets getter for coordinates or null if it not needed. Treats options.model.coords\n         */\n        MapMarkersCtrl.prototype.setPositionGetterSetter = function () {\n            var coordsProp = this.options.model.coords;\n\n            if (coordsProp === 'self') { // take object with coordinates\n                return;\n            }\n\n            this.getPosition = this.$parse(coordsProp);\n            this.setPosition = this.getPosition.assign;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#setPosition\n         * @param {Object} model Marker to set position for\n         * @param {Array<Map~position>|<Map~position>} position Position to set\n         *\n         * @description Default maker position setter. We use it if coords is set to 'self'\n         */\n        MapMarkersCtrl.prototype.setPosition = function (model, position) {\n            angular.extend(model, position);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#onShowPopup\n         * @param {Object} model Model to which popup is shown\n         *\n         * @description Closes popup window and clears related data\n         */\n        MapMarkersCtrl.prototype.onShowPopup = function (model) {\n            //this.resetIconActive();\n            this.popUpOpened = model.id;\n            if (!this.options.popup.options.setPosition) {\n                return;\n            }\n\n            //this.setIconActive(model);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#onClosePopup\n         *\n         * @description Closes popup window and clears related data\n         */\n        MapMarkersCtrl.prototype.onClosePopup = function () {\n            //this.resetIconActive();\n            this.popUpOpened = null;\n        };\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#setIconActive\n         * @param {Object} model Model to set icon for\n         *\n         * @description Sets icon for the marker active\n         */\n        MapMarkersCtrl.prototype.setIconActive = function (model) {\n            if (!model || !model.icon) {\n                return;\n            }\n\n            this.popupModel = model;\n            this.pipMapHelperSrv.setIcon(this.popupModel.icon, true);\n        };\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#resetIconActive\n         *\n         * @description Sets icon for the marker inactive\n         */\n        MapMarkersCtrl.prototype.resetIconActive = function () {\n            if (!this.popupModel || !this.popupModel.icon) {\n                return;\n            }\n\n            this.pipMapHelperSrv.setIcon(this.popupModel.icon, false);\n            this.popupModel = null;\n        };\n\n        return MapMarkersCtrl;\n    }\n\n    /**\n     * Create controller\n     */\n    function MapMarkersCtrlBuilder($controller, $scope, MapMarkersCtrlFct) {\n        var instance = $controller(MapMarkersCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n    function pipMapMarkers(pipMapElementsFct) {\n        return angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapMarkers'],\n            controller: 'MapMarkersCtrl',\n            templateUrl: 'elements/markers/map-markers.html'\n        });\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapMarkersCtrlFct', MapMarkersCtrlFct)\n        .controller('MapMarkersCtrl', MapMarkersCtrlBuilder)\n        .directive('pipMapMarkers', pipMapMarkers);\n})();","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapPolygons\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Polygons array\n     * @property {Object} pipOptions Options for a map polygons\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapPolygonsCtrlFct(MapElementsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapPolygonsCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapElementsCtrl\n         *\n         * @description Controller for a map polygons\n         */\n        function MapPolygonsCtrl($injector, $scope) {\n            MapElementsCtrlFct.call(this, $injector, $scope);\n            this.$parse = $injector.get('$parse');\n        }\n\n\n        var _super = MapElementsCtrlFct.prototype;\n        MapPolygonsCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapPolygonsCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {\n            path: 'path',\n            stroke: {\n                color: '#ff6262',\n                weight: 5\n            },\n            fitBounds: false\n        });\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#$onInit\n         *\n         * @description Init component\n         */\n        MapPolygonsCtrl.prototype.$onInit = function () {\n            _super.$onInit.call(this);\n            this.setPositionGetterSetter();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#setPositionGetterSetter\n         *\n         * @description Sets getter for coordinates or null if it not needed. Treats options.model.coords\n         */\n        MapPolygonsCtrl.prototype.setPositionGetterSetter = function () {\n            var pathProp = this.options.path;\n\n            this.getPosition = this.$parse(pathProp);\n            this.setPosition = this.getPosition.assign;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#setDefaultPositionsIfNeeded\n         * @param {Object} model Marker to set position for\n         *\n         * @description Checks if current positions is empty and sets default if needed\n         */\n        MapPolygonsCtrl.prototype.setDefaultPositionsIfNeeded = function (model) {\n            var positions = this.getPosition(model);\n\n            if (!angular.isArray(positions)) {\n                this.setPosition(model, []);\n            }\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#getAllPositions\n         * @returns {Array<Object>} Positions for given model or an empty array\n         *\n         * @description Gets model positions array.\n         */\n        MapPolygonsCtrl.prototype.getAllPositions = function () {\n            var paths = _super.getAllPositions.call(this);\n            return Array.prototype.concat.apply([], paths); //flatten array of arrays\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#setPosition\n         * @param {Object} model Marker to set position for\n         * @param {Array<Map~position>|<Map~position>} position Position to set\n         *\n         * @description Default maker position setter. We use it if coords is set to 'self'\n         */\n        MapPolygonsCtrl.prototype.setPosition = function (model, position) {\n            model[this.defaultOptions.path] = position;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#getPosition\n         * @param {Object} model Marker to get position for\n         * @returns {Array<Map~position>|<Map~position>} Position for a model\n         *\n         * @description Default polygon position getter. We use it if coords is set to 'self'\n         */\n        MapPolygonsCtrl.prototype.getPosition = function (model) {\n            return model[this.defaultOptions.path];\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#isModelEmpty\n         * @param {Object} model Model to check position for\n         * @returns {boolean} True if current model is empty\n         *\n         * @description Checks whether model is empty\n         */\n        MapPolygonsCtrl.prototype.isModelEmpty = function (model) {\n            var position = this.getPosition(model);\n            return !position || !position.length || !position[0].latitude || !position[0].longitude;\n        };\n\n\n        return MapPolygonsCtrl;\n    }\n\n\n    /**\n     * Create controller\n     */\n    function MapPolygonsCtrlBuilder($controller, $scope, MapPolygonsCtrlFct) {\n        var instance = $controller(MapPolygonsCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n    function pipMapPolygons(pipMapElementsFct) {\n        return angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapPolygons'],\n            controller: 'MapPolygonsCtrl',\n            templateUrl: 'elements/polygons/map-polygons.html'\n        });\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapPolygonsCtrlFct', MapPolygonsCtrlFct)\n        .controller('MapPolygonsCtrl', MapPolygonsCtrlBuilder)\n        .directive('pipMapPolygons', pipMapPolygons);\n})();","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapPolylines\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Polylines array\n     * @property {Object} pipOptions Options for a map polylines\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapPolylinesCtrlFct(MapPolygonsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapPolylinesCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapPolygonsCtrl\n         * @description Controller for a map polylines\n         */\n        function MapPolylinesCtrl($injector, $scope) {\n            MapPolygonsCtrlFct.call(this, $injector, $scope);\n        }\n\n\n        var _super = MapPolygonsCtrlFct.prototype;\n        MapPolylinesCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapPolylinesCtrl\n         * @name pipMapComponent.MapPolylinesCtrl#defaultOptions\n         * @type {Object}\n         * @description Default map components\n         */\n        MapPolylinesCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {});\n\n\n        return MapPolylinesCtrl;\n    }\n\n    /**\n     * Create controller\n     */\n    function MapPolylinesCtrlBuilder($controller, $scope, MapPolylinesCtrlFct) {\n        var instance = $controller(MapPolylinesCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n    function pipMapPolylines(pipMapElementsFct) {\n        return angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapPolylines'],\n            controller: 'MapPolylinesCtrl',\n            templateUrl: 'elements/polylines/map-polylines.html'\n        });\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapPolylinesCtrlFct', MapPolylinesCtrlFct)\n        .controller('MapPolylinesCtrl', MapPolylinesCtrlBuilder)\n        .directive('pipMapPolylines', pipMapPolylines);\n})();","/// <reference path=\"../typings/tsd.d.ts\" />\n\nimport './popup';\nimport './elements';\nimport './edit';\n//import './editable_element/EditableElement';\n\n{\n    angular.module('pipMaps', [\n        'uiGmapgoogle-maps',\n        // Map services\n        'pipMaps.Templates',\n        'pipMapsPopup',\n        'pipMapsElements',\n  //      'pipMapsEditableElement',\n        'pipMapsEdit'\n    ]);\n}\n\nimport './config';\nimport './GoogleMapsRemoveAfterService';\nimport './HelpService';\nimport './Map';\nimport './MapEventHandlerService';\n","\n(() => {\n  'use strict';\n\n  function MapElementPopupFct($injector) {\n    var pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n    var $rootScope = $injector.get('$rootScope');\n\n    /**\n     * @ngdoc service\n     * @name pipMapComponent.MapElementPopupFct\n     *\n     * @class\n     * @description Element popup class\n     */\n    function MapElementPopupFct(options) {\n      var er = new Error();\n      var offset = pipMapHelperSrv.createSize(options.offset.width, options.offset.height);\n\n      this.options = angular.merge({\n        boxClass: 'pip-map-info-window ' + options.className,\n        closeBoxURL: '',\n        pixelOffset: offset\n      }, options.options);\n\n      this.templateUrl = options.templateUrl;\n\n      this.onShow = options.onShow;\n      this.onClose = options.onClose;\n\n      this.initBreakpoints(options.offset.breakpoints);\n    }\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#initBreakpoints\n     * @private\n     *\n     * @param {Array<Object>} breakpoints Array of breakpoint to init\n     *\n     * @description Init popup breakpoints if any\n     */\n    MapElementPopupFct.prototype.initBreakpoints = function (breakpoints) {\n      breakpoints = breakpoints || [];\n\n      this.breakpoints = breakpoints.map(function (breakpoint) {\n        return {\n          name: breakpoint.name,\n          offset: pipMapHelperSrv.createSize(breakpoint.width, breakpoint.height)\n        };\n      }, this);\n\n      this.defaultOffset = this.options.pixelOffset;\n    };\n\n    MapElementPopupFct.prototype.setNewOptions = function (options) {\n      var offset = pipMapHelperSrv.createSize(options.offset.width, options.offset.height);\n\n      this.options = angular.merge({\n        boxClass: 'pip-map-info-window ' + options.className,\n        closeBoxURL: '',\n        pixelOffset: offset\n      }, options.options);\n\n      this.initBreakpoints(options.offset.breakpoints);\n      this.fitOffset();\n    }\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#close\n     *\n     * @description Closes element popup\n     */\n    MapElementPopupFct.prototype.close = function () {\n      this.onClose();\n    };\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#show\n     * @param {Object} model to show popup for\n     *\n     * @description Shows element popup\n     */\n    MapElementPopupFct.prototype.show = function (model) {\n      this.onShow(model);\n      this.fitOffset();\n    };\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#setPosition\n     *\n     * @description Sets position of the element popup\n     */\n    MapElementPopupFct.prototype.setPosition = function () {\n      this.fitOffset();\n    };\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#fitOffset\n     *\n     * @description\n     */\n    MapElementPopupFct.prototype.fitOffset = function () {\n      var hasBreakpoint = this.breakpoints.some(function (breakpoint) {\n        var isTargetBreakpoint = $rootScope.utils.hasBreakpoint(breakpoint.name);\n\n        if (isTargetBreakpoint) {\n          this.options.pixelOffset = breakpoint.offset;\n          return true;\n        }\n      }, this);\n\n      if (!hasBreakpoint) {\n        this.options.pixelOffset = this.defaultOffset;\n      }\n    };\n\n\n    return {\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.MapElementPopupFct\n       * @name pipMapComponent.MapElementPopupFct#fitOffset\n       * @static\n       *\n       * @description\n       */\n      create: function (options) {\n        return new MapElementPopupFct(options);\n      }\n    };\n  }\n\n  angular.module('pipMapsPopup')\n    .factory('MapElementPopupFct', MapElementPopupFct);\n\n})();\n","(() => {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.mapPopup\n     * @restrict A\n     *\n     * @description Directive for popup for map elements. Also treats editable elements properly\n     */\n    function mapPopup() {\n        return {\n            strict: 'A',\n            scope: {\n                popup: '=pipMapPopup'\n            },\n            templateUrl: 'popup/map-popup.html'\n        };\n    }\n\n    angular.module('pipMapsPopup')\n        .directive('pipMapPopup', mapPopup);\n})();","(() => {\n  'use strict';\n\n  /**\n   * @ngdoc directive\n   * @name pipMapComponent.mapPopupContent\n   * @restrict AE\n   *\n   * @description Directive for basic popup content. Transcluded.\n   */\n  function mapPopupContent() {\n    return {\n      strict     : 'AE',\n      transclude : true,\n      templateUrl: 'popup/map-popup-content.html'\n    };\n  }\n\n  angular.module('pipMapsPopup')\n    .directive('pipMapPopupContent', mapPopupContent);\n})();\n","(() => {\n    'use strict';\n\n    function MapPopupFct($injector) {\n        var MapElementPopup = $injector.get('MapElementPopupFct');\n        var $rootScope = $injector.get('$rootScope');\n        var $timeout = $injector.get('$timeout');\n\n        /**\n         * @ngdoc service\n         * @name pipMapComponent.MapPopupFct\n         *\n         * @description Controller for popup for map elements directive\n         */\n        function MapPopupFct() {\n            this.elements = [];\n        }\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#add\n         *\n         * @param {Object} options Popup options\n         * @returns {Object}\n         *\n         * @description Init popup configuration\n         */\n        MapPopupFct.prototype.add = function (options) {\n            var element = MapElementPopup.create(options);\n            this.elements.push(element);\n\n            return {\n                toggle: this.toggle.bind(this, element),\n                close: this.close.bind(this, element),\n                setPosition: (position) => {\n                    if (this.element.options.updatePosition === false) return;\n\n                    this.position = position;\n                },\n                setNewOptions: (options) => {\n                    element.setNewOptions(options);\n                }\n            };\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#toggle\n         *\n         * @param {pipMapComponent.MapElementPopupFct} element Element popup to show\n         * @param {Map~eventObj} eventObj Event object for popup\n         *\n         * @description Toggles popup\n         */\n        MapPopupFct.prototype.toggle = function (element, eventObj) {\n            if (this.isNewModel(eventObj)) {\n                // if (this.element !== element) {\n                this.close();\n\n                this.element = element;\n                $timeout(function () {\n                    this.show(element);\n                }.bind(this), 10); //magic number to let info-popup-window to be destroyed and init once again\n                // }\n\n                this.setPosition(eventObj);\n                return;\n            }\n\n            this.close();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#isNewModel\n         *\n         * @param {Map~eventObj} eventObj Event object for popup\n         * @returns {boolean} true if new\n         *\n         * @description Checks whether this is new popup to show\n         */\n        MapPopupFct.prototype.isNewModel = function (eventObj) {\n            return this.model !== eventObj.model;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#show\n         *\n         * @param {pipMapComponent.MapElementPopupFct} element Element popup to show\n         *\n         * @description Shows popup for an element with given event object\n         */\n        MapPopupFct.prototype.show = function (element) {\n            if (!this.model || !this.position) {\n                return;\n            }\n\n            this.isEnabled = true;\n\n            this.setBreakpointHandler(element);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#setPosition\n         *\n         * @param {Map~eventObj} eventObj Event for showing popup\n         *\n         * @description Closes popup window and clears related data\n         */\n        MapPopupFct.prototype.setPosition = function (eventObj) {\n            this.position = this.getPosition(eventObj);\n            this.model = eventObj.model;\n            this.element.show(this.model);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#setBreakpointHandler\n         * @param {pipMapComponent.MapElementPopupFct} element Element popup to show\n         *\n         * @description Sets breakpoint handler\n         */\n        MapPopupFct.prototype.setBreakpointHandler = function (element) {\n            this.removeBreakpointHandler = $rootScope.$on('pipMainLayoutResized', element.setPosition.bind(element));\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#resetBreakpointHandler\n         *\n         * @description Resets breakpoint handler\n         */\n        MapPopupFct.prototype.resetBreakpointHandler = function () {\n            if (this.removeBreakpointHandler) this.removeBreakpointHandler();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#close\n         *\n         * @description Closes popup window and clears related data\n         */\n        MapPopupFct.prototype.close = function () {\n            if (!this.element) {\n                return;\n            }\n\n            this.element.close();\n\n            this.resetBreakpointHandler();\n\n            this.model = null;\n            this.isEnabled = false;\n            this.position = null;\n            this.element = null;\n        };\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#getPosition\n         * @private\n         *\n         * @param {Map~eventObj} eventObj Event for showing popup\n         *\n         * @description Gets position for a popup\n         */\n        MapPopupFct.prototype.getPosition = function (eventObj) {\n            return eventObj.position;\n        };\n\n\n        return {\n            /**\n             * @ngdoc method\n             * @methodOf pipMapComponent.MapPopupFct\n             * @name pipMapComponent.MapPopupFct#create\n             * @returns {pipMapComponent.MapPopupFct} Popup service instance\n             *\n             * @static\n             * @description Creates popup service instance\n             */\n            create: function () {\n                return new MapPopupFct();\n            }\n        };\n    }\n\n    angular.module('pipMapsPopup')\n        .factory('MapPopupFct', MapPopupFct);\n})();","{\n    angular.module('pipMapsPopup', []);\n}\n\nimport './MapElementPopupService';\nimport './MapPopup';\nimport './MapPopupContent';\nimport './MapPopupService';","(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('map.html',\n    '<div class=\"pip-map-side-panel flex-fixed flex-order-1\" ng-if=\"ctrl.sidePanel.show\"><ng-include src=\"ctrl.sidePanel.template\"></ng-include></div><ui-gmap-google-map class=\"flex pip-map-provider-wrapper\" control=\"ctrl.componentOptions.control\" center=\"ctrl.map.center\" zoom=\"ctrl.map.zoom\" options=\"ctrl.map.options\" bounds=\"ctrl.map.bounds\" events=\"ctrl.map.events\"><div pip-map-popup=\"ctrl.popup\" ng-if=\"ctrl.popup\"></div><ng-transclude></ng-transclude></ui-gmap-google-map>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('edit/MapEdit.html',\n    '<pip-map pip-options=\"$ctrl.map\"><ui-gmap-drawing-manager options=\"$ctrl.drawingManagerOptions\" control=\"$ctrl.drawingManagerControl\"></ui-gmap-drawing-manager><pip-map-polygons pip-models=\"$ctrl.disabledPolygons\" pip-options=\"$ctrl.disabledPolygonsOptions\"></pip-map-polygons><pip-map-polylines pip-models=\"$ctrl.disabledPolylines\" pip-options=\"$ctrl.disabledPolylinesOptions\"></pip-map-polylines><pip-map-circles pip-models=\"$ctrl.disabledCircles\" pip-options=\"$ctrl.disabledCirclesOptions\"></pip-map-circles></pip-map><div class=\"action-panel w-stretch layout-row layout-align-center-center\" ng-if=\"$ctrl.showPanel\"><div class=\"action-buttons color-primary-bg flex-fixed\"><md-button ng-click=\"$ctrl.clearMap()\" ng-if=\"$ctrl.showAction(\\'clear\\')\">{{ \\'CLEAR_MAP\\' | translate }}</md-button><md-button ng-click=\"$ctrl.addCircle()\" ng-if=\"$ctrl.showAction(\\'circle\\')\">{{ \\'ADD_CIRCLE\\' | translate }}</md-button><md-button ng-click=\"$ctrl.addPolygon()\" ng-if=\"$ctrl.showAction(\\'polygon\\')\">{{ \\'ADD_POLYGON\\' | translate }}</md-button><md-button ng-click=\"$ctrl.addLine()\" ng-if=\"$ctrl.showAction(\\'line\\')\">{{ \\'ADD_LINE\\' | translate }}</md-button></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('edit_old/map-edit-tool.html',\n    '<div layout=\"column\" class=\"pip-map-edit-tool theme-text-primary\" ng-init=\"currentElement = editCtrl.currentElement; tool = currentElement.tool; model = tool.currentModel\"><header hide-xs=\"\" class=\"pip-map-edit-header\" layout=\"column\" layout-align=\"space-between\"><h2 class=\"md-title\">{{:: currentElement.getEditTitle() }}</h2><div class=\"pip-map-edit-actions\" layout=\"row\"><span class=\"pip-map-edit-actions-block-main\"><md-button ng-click=\"tool.undo()\" ng-disabled=\"tool.isUndoDisabled()\"><md-icon md-svg-icon=\"map:undo\" aria-label=\"Undo\"></md-icon></md-button></span><md-divider></md-divider><span class=\"pip-map-edit-actions-block-tool\"><md-button ng-repeat=\"action in tool.actions\" ng-disabled=\"tool.isActionDisabled(action)\" ng-click=\"tool.setAction(action)\"><md-icon md-svg-icon=\"{{:: action.definition.icon }}\" aria-label=\"{{:: action.definition.name }}\" ng-class=\"{ active: tool.isActionActive(action) }\"></md-icon></md-button></span></div></header><header hide-gt-xs=\"\" class=\"pip-map-edit-header\" layout=\"column\" layout-align=\"space-between\"><form name=\"editCtrl.modelForm\" ng-include=\"editCtrl.currentElement.tool.template\"></form></header><md-divider></md-divider><section flex=\"auto\" class=\"pip-map-edit-content\"><form hide-xs=\"\" name=\"editCtrl.modelForm\" ng-include=\"editCtrl.currentElement.tool.template\"></form></section><md-divider></md-divider><footer hide-xs=\"\" class=\"pip-map-edit-footer\" layout=\"row\" layout-align=\"end center\"><div flex=\"\"><md-button ng-click=\"editCtrl.remove()\">{{:: \\'DELETE\\' | translate }} {{:: currentElement.name }}</md-button></div><md-button ng-click=\"editCtrl.cancel()\">{{:: \\'CANCEL\\' | translate }}</md-button><md-button ng-click=\"editCtrl.save()\" ng-disabled=\"editCtrl.modelForm.$invalid\">{{:: tool.titleSave | translate }}</md-button></footer><footer hide-gt-xs=\"\" class=\"pip-map-edit-footer\" layout=\"row\" layout-align=\"start center\"><div layout=\"row\" layout-align=\"space-around\"><md-button ng-click=\"tool.undo()\" ng-disabled=\"tool.isUndoDisabled()\"><md-icon md-svg-icon=\"map:undo\" aria-label=\"Remove\"></md-icon></md-button></div><md-divider></md-divider><md-menu flex=\"\" layout=\"column\"><md-button class=\"pip-map-edit-actions-trigger\" ng-click=\"$mdOpenMenu($event)\"><md-icon class=\"active\" md-svg-icon=\"{{ tool.currentAction.definition.icon }}\" aria-label=\"Trigger menu\" md-menu-origin=\"\"></md-icon><md-icon md-svg-icon=\"map:tools\" aria-label=\"Triangle down\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"action in tool.actions\"><md-button ng-click=\"tool.setAction(action)\" ng-disabled=\"tool.isActionDisabled(action)\"><md-icon md-svg-icon=\"{{:: action.definition.icon }}\" aria-label=\"{{:: action.definition.name }}\" ng-class=\"{ active: tool.isActionActive(action) }\" md-menu-align-target=\"\"></md-icon>{{:: action.definition.name }}</md-button></md-menu-item></md-menu-content></md-menu><md-divider></md-divider><div layout=\"row\" layout-align=\"space-around\"><md-button ng-click=\"editCtrl.cancel()\"><md-icon md-svg-icon=\"map:cross\" aria-label=\"Close\"></md-icon></md-button><md-button ng-click=\"editCtrl.save()\" ng-disabled=\"editCtrl.modelForm.$invalid\"><md-icon md-svg-icon=\"map:check\" aria-label=\"Sumbit\"></md-icon></md-button></div></footer></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('edit_old/map-edit-tools-list.html',\n    '<md-fab-speed-dial class=\"pip-floating-button map-add-button md-scale\" md-direction=\"up\" md-open=\"fab.isOpen\"><md-fab-trigger><md-button class=\"md-fab\" ng-class=\"{\\'md-accent md-raised\\': !fab.isOpen, \\'md-warn\\': fab.isOpen}\"><md-icon md-svg-icon=\"map:plus\" aria-label=\"Open\" class=\"md-headline centered-add-icon\" ng-if=\"!fab.isOpen\"></md-icon><md-icon md-svg-icon=\"map:cross\" aria-label=\"Close\" class=\"md-headline centered-add-icon\" ng-if=\"fab.isOpen\"></md-icon></md-button></md-fab-trigger><md-fab-actions class=\"pip-map-edit-tools-list\"><div ng-repeat=\"element in ::editCtrl.elements\"><span class=\"pip-map-edit-tooltip\">{{:: element.name }}</span><md-button class=\"md-fab md-raised md-mini\" ng-click=\"editCtrl.createElement(element)\"><md-icon md-svg-icon=\"{{:: element.icon }}\" aria-label=\"{{:: element.icon }}\"></md-icon></md-button></div></md-fab-actions></md-fab-speed-dial>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('edit_old/map-edit.html',\n    '<script type=\"text/ng-template\" id=\"map-icons.svg\"><svg xmlns=\"http://www.w3.org/2000/svg\"> <defs> <g id=\"trash\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M128 107c0-24 19-43 43-43l170 0c24 0 43 19 43 43l0 256-256 0z m277 320l-74 0-22 21-106 0-22-21-74 0 0-43 298 0z\"/></g> <g id=\"plus\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M405 235l-128 0 0-128-42 0 0 128-128 0 0 42 128 0 0 128 42 0 0-128 128 0z\"/></g> <g id=\"cross\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M405 375l-30 30-119-119-119 119-30-30 119-119-119-119 30-30 119 119 119-119 30 30-119 119z\"/></g> <g id=\"undo\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M213 320l0 85-149-149 149-149 0 87c107 0 182-34 235-109-21 107-85 214-235 235z\"/></g> <g id=\"check\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M192 167l-89 89-30-30 119-119 256 256-30 30z\"/></g> <g id=\"tools\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M149 299l107-107 107 107z\"/></g> <g id=\"add-point\" transform=\"translate(0,0) scale(25)\"><path class=\"cls-1\" d=\"M8.46,9l2.81-.17a0.31,0.31,0,0,0,.2-0.53L3.4,0.09A0.31,0.31,0,0,0,2.87.3V11.81a0.31,0.31,0,0,0,.51.23L5.51,10.2l1.9,4.64a0.31,0.31,0,0,0,.4.17l2.37-1a0.31,0.31,0,0,0,.17-0.4Z\"/><polygon class=\"cls-1\" points=\"14.96 15.62 14.96 12.72 13.49 12.72 13.49 15.62 10.59 15.62 10.59 17.1 13.49 17.1 13.49 20 14.96 20 14.96 17.1 17.87 17.1 17.87 15.62 14.96 15.62\"/></g> <g id=\"remove-point\" transform=\"translate(0,0) scale(25)\"><path class=\"cls-1\" d=\"M8.46,9l2.81-.17a0.31,0.31,0,0,0,.2-0.53L3.4,0.09a0.31,0.31,0,0,0-.53.22V11.82a0.31,0.31,0,0,0,.51.23l2.12-1.84,1.9,4.64a0.31,0.31,0,0,0,.4.17l2.37-1a0.31,0.31,0,0,0,.17-0.4Z\"/><rect class=\"cls-1\" x=\"10.58\" y=\"15.63\" width=\"7.28\" height=\"1.48\"/></g> <g id=\"pan\" transform=\"translate(0,0) scale(25)\"><path d=\"M15.28,6.56V9H11V4.74h2.41a0.31,0.31,0,0,0,.24-0.51L10.24,0.13a0.31,0.31,0,0,0-.47,0L6.31,4.23a0.31,0.31,0,0,0,.24.51H9V9H4.72V6.56a0.31,0.31,0,0,0-.51-0.24L0.11,9.78a0.31,0.31,0,0,0,0,.47l4.11,3.46a0.31,0.31,0,0,0,.51-0.24V11.07H9v4.23H6.54a0.31,0.31,0,0,0-.24.51l3.46,4.11a0.31,0.31,0,0,0,.47,0l3.46-4.11a0.31,0.31,0,0,0-.24-0.51H11V11.07h4.23v2.41a0.31,0.31,0,0,0,.51.24l4.11-3.46a0.31,0.31,0,0,0,0-.47L15.78,6.32A0.31,0.31,0,0,0,15.28,6.56Z\"/></g> <g id=\"pen\" transform=\"translate(0,0) scale(25)\"><path d=\"M18.92,1.08a3.27,3.27,0,0,0-2.33-1,3.9,3.9,0,0,0-2.71,1.25,3.47,3.47,0,0,0-.44.54L5.66,10.66l-0.43-.43A0.36,0.36,0,0,0,5,10.12a0.39,0.39,0,0,0-.27.11L3.62,11.31a0.38,0.38,0,0,0,0,.53l0.45,0.45a8,8,0,0,1-2.46,1.09,0.54,0.54,0,0,0-.35.38v0S1,18.13,0,19.43a0.36,0.36,0,0,0,0,.36h0l0.13,0.14h0A0.57,0.57,0,0,0,.43,20a0.27,0.27,0,0,0,.13,0c1.42-.82,5.62-1.22,5.66-1.22h0a0.55,0.55,0,0,0,.38-0.35,9.52,9.52,0,0,1,1.1-2.45l0.44,0.44a0.36,0.36,0,0,0,.26.11,0.38,0.38,0,0,0,.27-0.11l1.07-1.07A0.39,0.39,0,0,0,9.87,15a0.36,0.36,0,0,0-.11-0.27l-0.43-.43,8.83-7.79a3.46,3.46,0,0,0,.54-0.44,4,4,0,0,0,1.24-2.47A3.22,3.22,0,0,0,18.92,1.08ZM4.66,17a1.15,1.15,0,1,1,0-1.63A1.15,1.15,0,0,1,4.66,17Z\"/></g> <g id=\"select\" transform=\"translate(0,0) scale(25)\"><path d=\"M15.66,11.25L4.71,0.09a0.31,0.31,0,0,0-.53.22V15.94a0.31,0.31,0,0,0,.51.23l3-2.57,2.54,6.21a0.31,0.31,0,0,0,.4.17l3.31-1.35a0.31,0.31,0,0,0,.17-0.4L11.54,12l3.92-.24A0.31,0.31,0,0,0,15.66,11.25Z\"/></g> <g id=\"hand\" transform=\"translate(0,0) scale(25)\"><path d=\"M16.9,3.52a0.92,0.92,0,0,0-.92.92v4a0.44,0.44,0,0,1-.88,0V1.76a1.1,1.1,0,0,0-2.21,0V8.44h0a0.42,0.42,0,0,1-.83,0V1.2a1.2,1.2,0,0,0-2.39,0s0,7.19,0,7.27a0.4,0.4,0,0,1-.8,0V2.24a1.2,1.2,0,1,0-2.39,0c0,8.67,0,7.67,0,8.39a2,2,0,0,1-.13,1c-0.11.08-.25,0-0.43-0.26C5.51,10.79,4.13,9,2.79,9.63a1.33,1.33,0,0,0-.33,1.93s3,4.34,4,5.84c0.59,0.88.75,1.16,1,1.45C8.15,20,8.58,20,9.84,20H15c2.79,0,2.79-3.31,2.79-4.73V4.94C17.82,3.93,17.41,3.52,16.9,3.52Z\"/></g> <g id=\"draw\" transform=\"translate(0,0) scale(25)\"><path d=\"M1.94,4.37L0,2.49A2.08,2.08,0,0,1,.19,2.27L0.41,2l0.27-.26A2.84,2.84,0,0,0,1,1.48l0.39-.34A5.66,5.66,0,0,1,2,.68,6.24,6.24,0,0,1,2.92.27,3,3,0,0,1,4,.09a2.72,2.72,0,0,1,.81.15A2.6,2.6,0,0,1,5.7.79a2.85,2.85,0,0,1,.74,1,3.49,3.49,0,0,1,.3,1.54,4.64,4.64,0,0,1-.1,1,4.76,4.76,0,0,1-.28.88Q6.14,5.59,5.88,6t-0.59.88l-0.46.75q-0.28.46-.59,1L3.68,9.75a9.54,9.54,0,0,0-.43,1,4.27,4.27,0,0,0-.15.85,2,2,0,0,0,.05.67,1,1,0,0,0,.19.45,0.42,0.42,0,0,0,.32.17A0.72,0.72,0,0,0,4,12.79a1.59,1.59,0,0,0,.34-0.26,2.42,2.42,0,0,0,.3-0.3L4.9,12l0.4-.48L6,10.65l0.77-.93q0.39-.46.62-0.77T8.26,8A9.38,9.38,0,0,1,9.5,7a8.58,8.58,0,0,1,1.57-.84,4.66,4.66,0,0,1,1.78-.35,4,4,0,0,1,2,.46,4.25,4.25,0,0,1,1.33,1.16A4.89,4.89,0,0,1,17,9a8.61,8.61,0,0,1,.32,1.48H20V13.2H17.29a9.87,9.87,0,0,1-.74,3.25,7.19,7.19,0,0,1-1.33,2.06,4.55,4.55,0,0,1-1.6,1.08,4.31,4.31,0,0,1-1.5.31,3.5,3.5,0,0,1-1.37-.27,3.43,3.43,0,0,1-1.11-.74,3.47,3.47,0,0,1-.77-1.08,3.12,3.12,0,0,1-.28-1.32,4.63,4.63,0,0,1,.35-1.61A6.43,6.43,0,0,1,10,13.1a7.75,7.75,0,0,1,1.85-1.55,7.63,7.63,0,0,1,2.67-1q-0.05-.31-0.1-0.66a1.6,1.6,0,0,0-.23-0.63,1.25,1.25,0,0,0-.55-0.49,2.45,2.45,0,0,0-1-.18A2.09,2.09,0,0,0,11.5,9a8.11,8.11,0,0,0-1.17.9q-0.57.57-1.15,1.24T8.1,12.4L7.23,13.46a10.26,10.26,0,0,1-.83.88,6.4,6.4,0,0,1-.81.7,2.76,2.76,0,0,1-.86.41,3.09,3.09,0,0,1-.75.12,4.28,4.28,0,0,1-.75,0,4,4,0,0,1-.74-0.22,3,3,0,0,1-.66-0.37A3.32,3.32,0,0,1,.72,13.56a5.4,5.4,0,0,1-.28-0.92,4.69,4.69,0,0,1-.1-1A5.76,5.76,0,0,1,.8,9.5a21.73,21.73,0,0,1,1-2.15q0.57-1,1.07-1.74l0.61-.89,0.27-.46A3,3,0,0,0,4,3.75,0.91,0.91,0,0,0,4.05,3.3,0.38,0.38,0,0,0,3.82,3a0.42,0.42,0,0,0-.34.05A2.67,2.67,0,0,0,3,3.34L2.5,3.81Q2.22,4.06,1.94,4.37ZM12.15,17.23A1.36,1.36,0,0,0,12.81,17a2.31,2.31,0,0,0,.68-0.63,4.77,4.77,0,0,0,.62-1.17,7.65,7.65,0,0,0,.41-1.85A4.78,4.78,0,0,0,13,14a4.59,4.59,0,0,0-1,.85,3.77,3.77,0,0,0-.53.88,1.89,1.89,0,0,0-.17.67,0.74,0.74,0,0,0,.08.34,0.76,0.76,0,0,0,.21.26,0.66,0.66,0,0,0,.25.15A0.79,0.79,0,0,0,12.15,17.23Z\"/></g> <g id=\"point\" transform=\"translate(0,0) scale(25)\"><path d=\"M10,0a6.88,6.88,0,0,1,4.94,2.06A6.88,6.88,0,0,1,17,7q0,3.93-7,13Q3,10.94,3,7A6.88,6.88,0,0,1,5.06,2.06,6.88,6.88,0,0,1,10,0Zm0,9.51a2.41,2.41,0,0,0,1-.2,2.34,2.34,0,0,0,.78-0.55A2.34,2.34,0,0,0,12.31,8a2.47,2.47,0,0,0,0-1.94,2.34,2.34,0,0,0-.55-0.78A2.34,2.34,0,0,0,11,4.7,2.47,2.47,0,0,0,9,4.7a2.34,2.34,0,0,0-.78.55A2.34,2.34,0,0,0,7.69,6,2.47,2.47,0,0,0,7.69,8a2.34,2.34,0,0,0,.55.78A2.34,2.34,0,0,0,9,9.31,2.41,2.41,0,0,0,10,9.51Z\"/></g> </defs></svg></script>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('popup/map-popup-content.html',\n    '<div class=\"map-popup-content\"><md-content md-theme=\"{{:: $root.$theme || \\'blue\\' }}\" flex=\"\"><md-button class=\"md-icon-button pip-map-info-window-close-button\" ng-click=\"closeClick(); $event.stopPropagation()\" tabindex=\"-1\" aria-label=\"close\"><md-icon class=\"theme-icon-active\" md-svg-icon=\"icons:cross\"></md-icon></md-button><ng-transclude></ng-transclude></md-content><div class=\"pip-map-info-window-arrow-wrapper\"><div><div></div></div><div><div></div></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('popup/map-popup.html',\n    '<ui-gmap-window ng-if=\"popup.isEnabled\" show=\"popup.isEnabled\" coords=\"popup.position\" templateurl=\":: popup.element.templateUrl\" templateparameter=\":: popup\" options=\":: popup.element.options\" closeclick=\"popup.close()\"></ui-gmap-window>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/circles/map-circles.html',\n    '<ui-gmap-circle ng-repeat=\"c in ctrl.models\" center=\"c[ctrl.options.center]\" stroke=\"c[ctrl.options.stroke]\" fill=\"c[ctrl.options.fill]\" radius=\"c[ctrl.options.radius]\" geodesic=\"c.geodesic\" events=\"ctrl.events\" visible=\"true\"></ui-gmap-circle>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/kml/map-kml.html',\n    '');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/markers/map-markers.html',\n    '<ui-gmap-markers models=\"ctrl.models\" coords=\":: ctrl.options.model.coords\" icon=\":: ctrl.options.model.icon\" options=\"\\'options\\'\" control=\":: ctrl.control\" events=\":: ctrl.events\" fit=\":: ctrl.options.fitBounds\"></ui-gmap-markers><ui-gmap-polylines ng-if=\":: ctrl.connect\" models=\"ctrl.models\" path=\":: ctrl.connect.property\" stroke=\":: ctrl.connect.stroke\" icons=\":: ctrl.connect.icons\"></ui-gmap-polylines>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/polygons/map-polygons.html',\n    '<ui-gmap-polygons models=\"ctrl.models\" path=\"ctrl.options.path\" stroke=\"ctrl.options.stroke\" fill=\"ctrl.options.fill\" control=\"ctrl.control\" events=\"ctrl.events\" visible=\"\\'visible\\'\" geodesic=\"\\'geodesic\\'\" editable=\"\\'editable\\'\" draggable=\"\\'draggable\\'\" fit=\":: ctrl.options.fitBounds\"></ui-gmap-polygons>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/polylines/map-polylines.html',\n    '<ui-gmap-polylines models=\"ctrl.models\" path=\"ctrl.options.path\" stroke=\"ctrl.options.stroke\" icons=\"ctrl.options.icons\" control=\"ctrl.control\" events=\"ctrl.events\" visible=\"\\'visible\\'\" geodesic=\"\\'geodesic\\'\" editable=\"\\'editable\\'\" draggable=\"\\'draggable\\'\" static=\"ctrl.options.static\" fit=\"ctrl.options.fitBounds\"></ui-gmap-polylines>');\n}]);\n})();\n\n//# sourceMappingURL=pip-suite-map-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}