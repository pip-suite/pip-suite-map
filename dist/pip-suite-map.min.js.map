{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/GoogleMapsRemoveAfterService.ts","src/HelpService.ts","src/Map.ts","src/MapEventHandlerService.ts","src/config.ts","src/edit/MapEdit.ts","src/edit/index.ts","src/elements/MapElementControllerService.ts","src/elements/MapElementDirectiveService.ts","src/elements/MapElementRequireService.ts","src/elements/circles/MapCircles.ts","src/elements/index.ts","src/elements/kml/MapKml.ts","src/elements/markers/MapMarkers.ts","src/elements/polygons/MapPolygons.ts","src/elements/polylines/MapPolylines.ts","src/index.ts","src/popup/MapElementPopupService.ts","src/popup/MapPopup.ts","src/popup/MapPopupContent.ts","src/popup/MapPopupService.ts","temp/pip-suite-map-html.min.js","src/popup/index.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","maps","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","angular","provider","mapOptions","mapTypeId","google","MapTypeId","SATELLITE","disableDefaultUI","panControl","zoomControl","options","_","defaults","cloneDeep","$get","$rootScope","map","geoRegion","onMapClickCallback","onTilesLoaded","once","event","trigger","boundary","center","latitude","nw_lat","se_lat","longitude","nw_lon","se_lon","zoom","control","assign","bounds","events","click","tilesloaded","zoom_changed","directiveSpecificMaxZoomLevel","maxZoomLevel","directiveSpecificMinZoomLevel","minZoomLevel","currentZoomLevel","getZoom","setZoom","infoWindow","additionalClass","offset","show","boxClass","closeBoxURL","pixelOffset","Size","setMapBounds","unwatchBoundsChange","$watch","newVal","northeast","southwest","fitMapToBounds","isEmpty","currentMapBounds","getBounds","contains","getNorthEast","getSouthWest","fitBounds","uiGmapModelKeyDecorator","$delegate","setChildScope","prototype","keys","childScope","result","apply","arguments","hasOwnProperty","model","$inject","defaultIconParameters","iconBaseSize","iconNormalScaleFactor","iconActiveScaleFactor","iconsPerSprite","name","numberInSprite","scope","setIconSettings","sizes","extend","uiGmapGoogleMapApi","$timeout","service","isReady","whenReady","getIconDimensions","setIcon","triggerEvent","createSize","createPoint","createKML","getCenterFromRegion","fitMapToRegion","getBoundsFromRegion","getBoundsFromCoordinates","forceMapToFitBounds","shouldFitBound","setModelOptions","getDegreesBetweenTwoPoints","getDirection","getDirectionByAngle","getIconOriginByDirection","then","mapTypes","roadMap","ROADMAP","satellite","hybrid","HYBRID","terrain","TERRAIN","symbolPath","SymbolPath","symbols","circle","CIRCLE","backwardClosed","BACKWARD_CLOSED_ARROW","forwardClosed","FORWARD_CLOSED_ARROW","backwardOpened","BACKWARD_OPEN_ARROW","forwardCOpened","FORWARD_OPEN_ARROW","bind","icon","isActive","parameters","scaleFactor","size","origin","anchor","scaledSize","iconDimensions","width","height","x","y","Point","Layer","KmlLayer","coordinates","LatLngBounds","LatLng","forEach","coordinate","force","northEast","southWest","mapContainsBounds","pluralModel","plainObject","gObject","isFunction","setOptions","point1","point2","p1","lat","lng","p2","geometry","spherical","computeHeading","degree","directions","iconSize","gutter","direction","decorator","3","USGSOverlay","image","opacity","bounds_","image_","map_","div_","setMap","MapComponentCtrl","$injector","$scope","$element","_this","get","mixTo","$applyAsync","sidePanel","embededMap","pipMapHelperSrv","uiGmapIsReady","MapPopupFct","init","addClass","justResized","gMap","newCenter","isNumber","panTo","oldVal","embededSrc","embededOverlay","map_north","map_west","map_south","map_east","draw","setEmbededBounds","$on","throttleResize","OverlayView","onAdd","div","document","createElement","style","borderStyle","borderWidth","position","img","src","appendChild","getPanes","overlayLayer","overlayProjection","getProjection","sw","fromLatLngToDivPixel","ne","left","top","defaultOptions","onRemove","parentNode","removeChild","disableDoubleClickZoom","setInitBounds","popup","merge","componentOptions","getMap","templateUrl","showSidePanel","promise","finally","onMapReady","getMapInstance","srcImage","getGMap","externalClick","noop","externalZoom","externalCenter","center_changed","debounceCenterChange","debounce","onClick","mapId","dblclick","onEventHandler","updateMapTiles","updateCenter","throttle","setCenter","getCenter","throttleUpdatingCenter","template","hideSidePanel","closePopup","freeze","isFrozen","setMapOptions","draggable","scrollwheel","unfreeze","setCursor","cursor","createElementPopup","createPopupInstance","add","create","console","log","close","controller","strict","controllerAs","4","mixin","postHandler","eventName","callback","handlerName","eventObj","gModel","args","latLng","getPositionFromLatLng","defaultHandlerName","charAt","toUpperCase","slice","obj","5","uiGmapGoogleMapApiProvider","configure","key","v","libraries","config_1","config","6","MapEditBindings","overlay","onEdit","showActionPanel","actionTypes","disabled","disabledPolygons","disabledPolygonsOptions","disabledPolylines","disabledPolylinesOptions","disabledCircles","disabledCirclesOptions","clearMap","addCircle","addRectangle","addPolygon","addLine","$onDestroy","$onChanges","changes","currentValue","setOverlay","convertToGoogleMapOverlay","type","currentOverlay","setDraggable","setEditable","$onInit","getPosition","getPath","getArray","each","coor","createPolygon","createPolyline","createCircle","createMarker","createRectangle","pos","centerCoords","marker","Marker","getOptionsByType","Circle","distance","radius","polygonCoords_1","push","polygon","Polygon","paths","polylineCoords_1","polyline","Polyline","path","rectangleBounds","rectangle","Rectangle","_polygonOptions","getDisableOptions","_circleOptions","_polylineOptions","_markerOptions","_rectangleOptions","editable","onEditOverlay","radius_changed","addListener","north","east","south","west","getRadius","showAction","action","includes","enumerable","configurable","drawingManagerOptions","drawingMode","drawing","OverlayType","POLYGON","RECTANGLE","POLYLINE","addMarker","MARKER","MapEditController","$mdConstant","$document","mapTypeControl","streetViewControl","drawingManagerControl","fillColor","fillOpacity","strokeWeight","strokeColor","clickable","zIndex","scale","strokeOpacity","ControlPosition","TOP_CENTER","circleOptions","polygonOptions","polylineOptions","markerOptions","rectangleOptions","val","getDrawingManager","setDrawingMode","getDrawingMode","addDomListener","keyCode","which","component","defineProperty","value","8","factory","MapElementsCtrl","popUpOpened","$q","models","externalDblclick","externalRightclick","rightclick","mouseup","position_changed","objEvent","updatePopupPosition","mapCtrl","initPopup","setNewOptions","popupOptions","onShow","onShowPopup","onClose","onClosePopup","getBoundsToFitAsync","reject","getAllPositions","isArray","isModelEmpty","onDblclick","longClick","correctCircleModel","togglePopup","m","toFixed","model_1","onRightclick","onMousedown","start","Date","getTime","onMouseup","end","toggle","getModels","checkContainsModel","indexOf","getPlural","id","getPlurals","setPosition","freezeMap","unfreezeMap","$attrs","$controllers","elementController","bindToController","pipMapElementsFct","startIndex","ctrl","index","elements","filter","ctrlName","replace","toLowerCase","getController","MapCirclesCtrlFct","MapElementsCtrlFct","MapCirclesCtrl","$parse","_super","Object","stroke","fill","setPositionGetterSetter","pathProp","setDefaultPositionsIfNeeded","positions","Array","concat","MapCirclesCtrlBuilder","$controller","instance","pipMapCircles","directive","12","./MapElementDirectiveService","./MapElementRequireService","./circles/MapCircles","./kml/MapKml","./markers/MapMarkers","./polygons/MapPolygons","./polylines/MapPolylines","13","MapKmlCtrlFct","MapKmlCtrl","existingModels","preserveViewport","suppressInfoWindows","getPopupParameters","meta","getMetadata","update","removeOldModels","addNewModels","getOldModels","deRegisterModel","newUrls","url","getNewModels","copy","addModel","registerModel","addEvents","existingUrls","mapInstance","layer","clickHandler","onEvent","copyArguments","getPopupMetaData","splice","MapKmlCtrlBuilder","pipMapKml","link","definition","$watchCollection","MapMarkersCtrlFct","MapMarkersCtrl","coords","connect","initConnect","coordsProp","setIconActive","popupModel","resetIconActive","MapMarkersCtrlBuilder","pipMapMarkers","MapPolygonsCtrlFct","MapPolygonsCtrl","color","weight","MapPolygonsCtrlBuilder","pipMapPolygons","MapPolylinesCtrlFct","MapPolylinesCtrl","pipMapPolylines","MapPolylinesCtrlBuilder","17","./HelpService","./Map","./MapEventHandlerService","./config","./edit","./elements","./popup","18","MapElementPopupFct","className","initBreakpoints","breakpoints","breakpoint","defaultOffset","fitOffset","some","utils","hasBreakpoint","MapElementPopup","element","updatePosition","isNewModel","isEnabled","setBreakpointHandler","removeBreakpointHandler","resetBreakpointHandler","22","./MapElementPopupService","./MapPopup","./MapPopupContent","./MapPopupService","23","run","$templateCache","put"],"mappings":"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","file":"pip-suite-map.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","declare let google: any;\n\n(() => {\n    'use strict';\n\n    /**\n     * @ngdoc module\n     * @name pipGoogleMaps\n     *\n     * @description\n     * Module with common helper functionality for Google Maps\n     */\n\n    /**\n     * @ngdoc provider\n     * @name pipGoogleMaps\n     */\n    function GoogleMapsProvider() {\n\n        var mapOptions = {\n            mapTypeId: google.maps.MapTypeId.SATELLITE,\n            disableDefaultUI: true,\n            panControl: false,\n            zoomControl: false\n        };\n\n        /**\n         * Getter/setter for Google Maps options.\n         * @param {Object} options @link https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n         * @returns {Object}\n         */\n        this.mapOptions = function (options) {\n            mapOptions = _.defaults({}, options, mapOptions);\n\n            return _.cloneDeep(mapOptions);\n        };\n\n        this.$get = function ($rootScope) {\n            return {\n                /**\n                 * Getter for Google Maps options.\n                 * @returns {Object} @link https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n                 */\n                mapOptions: function () {\n                    return _.cloneDeep(mapOptions);\n                },\n\n                /**\n                 * Helper function to create new Angular Google Maps object. @link http://angular-ui.github.io/angular-google-maps/#!/api/google-map\n                 * @param {Object} (options={}) - additional map options\n                 * @param {Number} (options.maxZoom) - max map zoom level\n                 * @param {Number} (options.minZoom) - min map zoom level\n                 * @param {Object} (geoRegion) - object with coordinates of map bounds. Has specific format.\n                 * @param {Object} geoRegion.boundary - map bounds object\n                 * @param {Number} geoRegion.boundary.nw_lat - North-West latitude\n                 * @param {Number} geoRegion.boundary.nw_lob - North-West longitude\n                 * @param {Number} geoRegion.boundary.se_lat - South-East latitude\n                 * @param {Number} geoRegion.boundary.se_lon - South-East longitude\n                 * @param {Function} (onMapClickCallback) - function to call when map itself is clicked\n                 * @returns {Object}\n                 */\n                map: function (options, geoRegion, onMapClickCallback) {\n                    options || (options = {});\n\n                    var onTilesLoaded = _.once(function (map) {\n                        google.maps.event.trigger(map, 'resize');  // fix map is not fully loaded issue\n                    });\n\n                  var boundary = geoRegion && geoRegion.boundary || {};\n\n                    return {\n                        center: {\n                            latitude:  (boundary.nw_lat + boundary.se_lat) / 2 || 0,\n                            longitude: (boundary.nw_lon + boundary.se_lon) / 2 || 0\n                        },\n                        zoom: 16,\n                        control: {},\n                        options: _.assign({}, options, mapOptions),\n                        bounds: {},\n                        events: {\n                            click: onMapClickCallback || function () {},\n                            tilesloaded: onTilesLoaded,\n                            zoom_changed: onZoomChanged\n                        }\n                    };\n\n                    function onZoomChanged(map) {\n                        var directiveSpecificMaxZoomLevel = options.maxZoomLevel,\n                            directiveSpecificMinZoomLevel = options.minZoomLevel,\n                            maxZoomLevel = directiveSpecificMaxZoomLevel == null ? mapOptions['maxZoom'] : directiveSpecificMaxZoomLevel,\n                            minZoomLevel = directiveSpecificMinZoomLevel == null ? mapOptions['minZoom'] : directiveSpecificMinZoomLevel,\n                            currentZoomLevel = map.getZoom();\n\n                        if (currentZoomLevel > maxZoomLevel) {\n                            map.setZoom(maxZoomLevel);\n                        } else if (currentZoomLevel < minZoomLevel) {\n                            map.setZoom(minZoomLevel);\n                        }\n                    }\n                },\n\n                /**\n                 * Helper function to create new info window object. @link http://angular-ui.github.io/angular-google-maps/#!/api/window\n                 * @param {String} (additionalClass=\"\") - additional classes to append to info window along with default \"pip-map-info-window\"\n                 * @param {google.maps.Size} (offset=new google.maps.Size(-175, -210, 'px', 'px')) - offset of info window from marker\n                 * @returns {Object}\n                 */\n                infoWindow: function (additionalClass, offset) {\n                    return {\n                        show: false,\n                        control: {},\n                        options: {\n                            boxClass: 'pip-map-info-window ' + additionalClass,\n                            closeBoxURL: '',\n                            pixelOffset: offset || new google.maps.Size(-175, -210, 'px', 'px')\n                        }\n                    };\n                },\n\n                /**\n                 * Set map bounds\n                 * @param {Object} map - Angular Google Maps object\n                 * @param {Object} geoRegion - object with coordinates of map bounds. Has specific format.\n                 * @param {Object} geoRegion.boundary - map bounds object\n                 * @param {Number} geoRegion.boundary.nw_lat - North-West latitude\n                 * @param {Number} geoRegion.boundary.nw_lob - North-West longitude\n                 * @param {Number} geoRegion.boundary.se_lat - South-East latitude\n                 * @param {Number} geoRegion.boundary.se_lon - South-East longitude\n                 */\n                setMapBounds: function (map, geoRegion) {\n                    var unwatchBoundsChange = $rootScope.$watch(function() {\n                        return map.bounds;\n                    }, function (newVal) {\n                        if (newVal.northeast && newVal.southwest) {\n                            map.bounds = {\n                                northeast: {\n                                    latitude: geoRegion.boundary.nw_lat,\n                                    longitude: geoRegion.boundary.se_lon\n                                },\n                                southwest: {\n                                    latitude: geoRegion.boundary.se_lat,\n                                    longitude: geoRegion.boundary.nw_lon\n                                }\n                            };\n\n                            unwatchBoundsChange();\n                        }\n                    }, true);\n                },\n\n                /**\n                 * Fit map to specified bounds\n                 * @param {Object} map - Angular Google Maps object\n                 * @param {google.maps.LatLngBounds} bounds - bounds, @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n                 */\n                fitMapToBounds: function (map, bounds) {\n                    if (!bounds.isEmpty()) {\n                        var currentMapBounds = map.getBounds();\n\n                        if (_.isEmpty(currentMapBounds)\n                            || (!_.isEmpty(currentMapBounds)\n                            && currentMapBounds.contains\n                            && (!currentMapBounds.contains(bounds.getNorthEast())\n                            || !currentMapBounds.contains(bounds.getSouthWest())))) {\n                            map.fitBounds(bounds);\n                        }\n                    }\n                }\n            };\n        };\n    }\n\n    angular\n        .module('pipMaps')\n        .provider('pipGoogleMaps', <any>GoogleMapsProvider);\n})();\n","(() => {\n  'use strict';\n\n  function uiGmapModelKeyDecorator($delegate) {\n    /**\n     * This is a hot fix to the setChildScope problem\n     * @see https://github.com/angular-ui/angular-google-maps/issues/1562\n     * The issue is that ModelKey.prototype.setChildScope sets childScope.model = model;\n     * where model is always for some reason is undefined\n     * then in BasePolysParentModel.prototype.pieceMeal it extends\n     * _.extend(obj.child.scope, obj.model);\n     *\n     * in scope we have childScope with model: {} and in obj.model we have model: undefined\n     * then we will have undefined as a model and crashes.\n     * For some reason it is not working this way anytime, because sometimes payload.updates is empty\n     * and it works as expected but we should remove this undefined property to avoid this issues\n     *\n     * TODO: Remove this hot-fix when it is resolved inside angular-google-maps\n     */\n\n\n    var setChildScope = $delegate.prototype.setChildScope;\n\n    $delegate.prototype.setChildScope = function (keys, childScope) {\n      var result = setChildScope.apply(this, arguments);\n\n      if (childScope && childScope.hasOwnProperty('model') && !childScope.model) {\n        delete childScope.model;\n      }\n\n      return result;\n    };\n\n    return $delegate;\n  }\n\n\n  /**\n   * @typedef {Object} Map~GeoRegion\n   * @property {Object} boundary Map bounds object\n   * @property {Number} boundary.nw_lat North-West latitude\n   * @property {Number} boundary.nw_lon North-West longitude\n   * @property {Number} boundary.se_lat South-East latitude\n   * @property {Number} boundary.se_lon South-East longitude\n   */\n\n\n  /**\n   * @typedef {Object} Map~position\n   * @property {*} latitude Latitude\n   * @property {*} longitude Longitude\n   */\n\n\n  /**\n   * @ngdoc service\n   * @name pipMapComponent.pipMapHelperSrvProvider\n   *\n   * @description Helper for map. Contains methods to work with icons, map constants, etc.\n   */\n  function /*@ngInject*/ pipMapHelperSrv() {\n    var defaultIconParameters = {\n      iconBaseSize: 96,\n      iconNormalScaleFactor: 0.5,\n      iconActiveScaleFactor: 1,\n      iconsPerSprite: 1\n    };\n\n    var directions = [{\n        name: 'North',\n        numberInSprite: 0,\n        scope: [-22.5, 22.5]\n      },\n      {\n        name: 'Northeast',\n        numberInSprite: 1,\n        scope: [22.5, 67.5]\n      },\n      {\n        name: 'East',\n        numberInSprite: 2,\n        scope: [67.5, 112.5]\n      },\n      {\n        name: 'Southeast',\n        numberInSprite: 3,\n        scope: [112.5, 157.5]\n      },\n      {\n        name: 'South',\n        numberInSprite: 4,\n        scope: [157.5, -157.5]\n      },\n      {\n        name: 'SouthWest',\n        numberInSprite: 5,\n        scope: [-157.5, -112.5]\n      },\n      {\n        name: 'West',\n        numberInSprite: 6,\n        scope: [-112.5, -67.5]\n      },\n      {\n        name: 'Northwest',\n        numberInSprite: 7,\n        scope: [-67.5, -22.5]\n      },\n      {\n        name: 'Stop',\n        numberInSprite: 8,\n        scope: []\n      }\n    ];\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.pipMapHelperSrvProvider\n     * @name pipMapComponent.pipMapHelperSrvProvider#setIconSettings\n     * @param {Object} sizes Object with new sizes\n     * @param {number} [sizes.baseSize] Base icon size\n     * @param {number} [sizes.normalFactor] Scale factor for normal icon state\n     * @param {number} [sizes.activeFactor] Scale facor for active icon state\n     * @param {number} [sizes.perSprite] ??\n     *\n     * @description Override service defaults\n     */\n    this.setIconSettings = function (sizes) {\n      angular.extend(defaultIconParameters, sizes);\n    };\n\n\n    this.$get = (uiGmapGoogleMapApi, $timeout) => {\n      /**\n       * @ngdoc service\n       * @name pipMapComponent.pipMapHelperSrv\n       *\n       * @description Helper for map. Contains methods to work with icons, map constants, etc.\n       */\n      var service = {\n        isReady: false,\n        whenReady: uiGmapGoogleMapApi,\n        maps: {},\n        getIconDimensions: null,\n        setIcon: null,\n        triggerEvent: null,\n        createSize: null,\n        createPoint: null,\n        createKML: null,\n        getCenterFromRegion: null,\n        fitMapToRegion: null,\n        getBoundsFromRegion: null,\n        getBoundsFromCoordinates: null,\n        fitMapToBounds: null,\n        forceMapToFitBounds: null,\n        shouldFitBound: null,\n        setModelOptions: null,\n        getDegreesBetweenTwoPoints: null,\n        getDirection: null,\n        getDirectionByAngle: null,\n        getIconOriginByDirection: null\n      };\n\n\n      uiGmapGoogleMapApi.then(onInit.bind(service));\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#getIconDimensions\n       * @private\n       *\n       * @param {Object} icon Icon set dimensions to\n       * @param {number} [icon.numberInSprite] Icon position in sprite\n       * @param {boolean} [isActive = false] Whether to set active scale or normal\n       *\n       * @returns {Object} Icon dimensions\n       * @see http://blog.mridey.com/2010/03/using-markerimage-in-maps-javascript.html for more details\n       * Including method name\n       * 1. It is used only in this service\n       * 2. It seems to count position of an arrow near the icon, which shows it's movement direction\n       */\n      service.getIconDimensions = function (icon, isActive) {\n        var parameters = angular.extend({}, defaultIconParameters, icon);\n        var scaleFactor = isActive ? parameters.iconActiveScaleFactor : parameters.iconNormalScaleFactor;\n        var size = parameters.iconBaseSize * scaleFactor;\n\n        return {\n          origin: this.createPoint(0, size * icon.numberInSprite || 1),\n          anchor: this.createPoint(size / 2, size / 2),\n          size: this.createSize(size, size),\n          scaledSize: this.createSize(size, parameters.iconsPerSprite * size),\n          isActive: isActive\n        };\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#setIcon\n       *\n       * @param {Object} icon Icon to set position for\n       * @param {boolean} [icon.isActive] True if icon currently is active\n       * @param {number} [icon.numberInSprite] Icon position in sprite\n       * @param {?boolean} isActive True if marker is active. If not boolean - it will leave old value of active\n       *\n       * @description Adds to an icon size properties\n       */\n      service.setIcon = function (icon, isActive) {\n        isActive = typeof isActive === 'boolean' ? isActive : icon.isActive;\n\n        service.whenReady.then(function () {\n          var iconDimensions = this.getIconDimensions(icon, isActive);\n          _.extend(icon, iconDimensions);\n        }.bind(this));\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#triggerEvent\n       *\n       * @description Triggers event with provided arguments\n       */\n      service.triggerEvent = function () {\n        var event = this.maps.event;\n\n        if (!event) {\n          return null;\n        }\n\n        return event.trigger.apply(event, arguments);\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#createSize\n       * @param {number} width Width property for the size object\n       * @param {number} height Height property for the size object\n       * @returns {Object} New size instance or empty object\n       *\n       * @description Creates new size object of a given width and height in pixels\n       */\n      service.createSize = function (width, height) {\n        var Size = this.maps.Size;\n\n        if (!Size) {\n          return {};\n        }\n\n        return new Size(width, height, 'px', 'px');\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#createPoint\n       * @param {number} x X coordinate for the point object\n       * @param {number} y Y coordinate for the point object\n       * @returns {Object} New point instance or empty object\n       *\n       * @description Creates new point object of a given coordinates\n       */\n      service.createPoint = function (x, y) {\n        var Point = this.maps.Point;\n\n        if (!Point) {\n          return {};\n        }\n\n        return new Point(x, y);\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#createPoint\n       * @param {Object} options Settings for KML layer\n       * @param {google.maps.Map} options.map Map instance to create kml layer for\n       * @param {string} options.url Url of KML file\n       *\n       * @description Creates new point object of a given coordinates\n       */\n      service.createKML = function (options) {\n        var Layer = this.maps.KmlLayer;\n\n        if (!Layer) {\n          return {};\n        }\n\n        return new Layer(options);\n      };\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#getCenterFromRegion\n       *\n       * @param {Map~GeoRegion} geoRegion - object with coordinates of map bounds. Has specific format.\n       * @return {Map~position} Map center\n       *\n       * @description Get map center from geo region\n       */\n      service.getCenterFromRegion = function (geoRegion) {\n        if (!geoRegion || !geoRegion.boundary) {\n          return {\n            latitude: 0,\n            longitude: 0\n          };\n        }\n\n        return {\n          latitude: (geoRegion.boundary.nw_lat + geoRegion.boundary.se_lat) / 2,\n          longitude: (geoRegion.boundary.nw_lon + geoRegion.boundary.se_lon) / 2\n        };\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#fitMapToRegion\n       *\n       * @param {google.maps.Map} map Map to fit bounds\n       * @param {Map~GeoRegion} geoRegion bounds\n       * @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n       *\n       * @description Fit map to specified geo region\n       */\n      service.fitMapToRegion = function (map, geoRegion) {\n        var bounds = this.getBoundsFromRegion(geoRegion);\n\n        // without timeout it sometimes is not working\n        $timeout(this.forceMapToFitBounds.bind(this, map, bounds));\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#getBoundsFromRegion\n       *\n       * @param {Map~GeoRegion} geoRegion - object with coordinates of map bounds. Has specific format\n       * @returns {google.maps.LatLngBounds|Object} New boundary or\n       * empty object if no geoRegion is not provided or empty\n       *\n       * @description Get map bounds from geo region\n       */\n      service.getBoundsFromRegion = function (geoRegion) {\n        if (!geoRegion || !geoRegion.boundary) {\n          return {};\n        }\n\n        return this.getBoundsFromCoordinates([{\n            latitude: geoRegion.boundary.se_lat,\n            longitude: geoRegion.boundary.se_lon\n          },\n          {\n            latitude: geoRegion.boundary.nw_lat,\n            longitude: geoRegion.boundary.nw_lon\n          }\n        ]);\n      };\n\n\n      /**\n       * @ngdocs method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#getBoundsFromCoordinates\n       *\n       * @param {Array<Map~position>} coordinates Coordinates to get bounds from\n       * @returns {google.maps.LatLngBounds|Object} Bounds fit coordinates\n       *\n       * @description Creates google bounds instance from given coordinates\n       */\n      service.getBoundsFromCoordinates = function (coordinates) {\n        var LatLngBounds = this.maps.LatLngBounds;\n        var LatLng = this.maps.LatLng;\n\n        if (!LatLng || !LatLngBounds) {\n          return {};\n        }\n\n        var bounds = new LatLngBounds();\n\n        coordinates.forEach(function (coordinate) {\n          if (!coordinate.latitude || !coordinate.longitude) {\n            return;\n          }\n\n          bounds.extend(new LatLng(coordinate.latitude, coordinate.longitude));\n        });\n\n        return bounds;\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#fitMapToBounds\n       *\n       * @param {google.maps.Map} map Map to fit bounds\n       * @param {google.maps.LatLngBounds} bounds bounds\n       * @param {boolean} [force = false] force If true - forces setting of the bounds\n       * @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n       *\n       * @description Checks whether given bounds is larger then current\n       * and fit map to specified bounds if so\n       */\n      service.fitMapToBounds = function (map, bounds, force) {\n        if (bounds.isEmpty()) {\n          return;\n        }\n\n        if (force || this.shouldFitBound(map, bounds)) {\n          map.fitBounds(bounds);\n        }\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#forceMapToFitBounds\n       *\n       * @param {google.maps.Map} map Map to fit bounds\n       * @param {google.maps.LatLngBounds} bounds bounds\n       * @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n       *\n       * @description Fit map to specified bounds\n       */\n      service.forceMapToFitBounds = function (map, bounds) {\n        this.fitMapToBounds(map, bounds, true);\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#shouldFitBound\n       *\n       * @param {google.maps.Map} map Map to fit bounds\n       * @param {google.maps.LatLngBounds} bounds bounds\n       *\n       * @private\n       * @description Checks if map should fit bounds\n       */\n      service.shouldFitBound = function (map, bounds) {\n        var northEast = bounds.getNorthEast();\n        var southWest = bounds.getSouthWest();\n\n        var currentMapBounds = map.getBounds();\n        var mapContainsBounds = currentMapBounds.contains &&\n          (!currentMapBounds.contains(northEast) || !currentMapBounds.contains(southWest));\n\n        return _.isEmpty(currentMapBounds) || mapContainsBounds;\n      };\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.pipMapHelperSrv\n       * @name pipMapComponent.pipMapHelperSrv#setModelOptions\n       *\n       * @param {Object} pluralModel Plural model to set options for\n       * @param {Object} [pluralModel.gObject] Google object\n       * @param {Object} options New options\n       *\n       * @description Sets options for plural model if it is possible\n       */\n      service.setModelOptions = function (pluralModel, options) {\n        var plainObject = pluralModel && pluralModel.gObject;\n\n        if (plainObject && angular.isFunction(plainObject.setOptions)) {\n          plainObject.setOptions(options);\n        }\n      };\n\n\n      service.getDegreesBetweenTwoPoints = function (point1, point2) {\n        let p1 = {\n          lat: () => {\n            return point1.lat || point1.latitude\n          },\n          lng: () => {\n            return point1.lng || point1.longitude\n          }\n        };\n        let p2 = {\n          lat: () => {\n            return point2.lat || point2.latitude\n          },\n          lng: () => {\n            return point2.lng || point2.longitude\n          }\n        };\n\n        return google.maps.geometry.spherical.computeHeading(p1, p2);\n      }\n\n\n      service.getDirection = function (point1, point2) {\n        const degree = this.getDegreesBetweenTwoPoints(point1, point2);\n\n          if (\n            (point1.lat || point1.latitude) === (point2.lat || point2.latitude) &&\n            (point1.lng || point1.longitude) === (point2.lng || point2.longitude)\n          ) {\n            return directions[8];\n          }\n\n        for (let i = 0; i < 8; i++) {\n          if (degree >= directions[i].scope[0] && degree <= directions[i].scope[1]) {\n            return directions[i];\n          }\n        }\n\n        return directions[8];\n      }\n\n      service.getDirectionByAngle = function(degree) {\n        for (let i = 0; i < 8; i++) {\n          if (degree >= directions[i].scope[0] && degree <= directions[i].scope[1]) {\n            return directions[i];\n          }\n        }\n\n        return directions[8];\n      }\n\n      service.getIconOriginByDirection = function (point1, point2, iconSize: number = 82, gutter: number = 15) {\n        const direction = this.getDirection(point1, point2);\n\n        return new google.maps.Point(0, direction.numberInSprite * iconSize + direction.numberInSprite * gutter);\n      }\n\n\n      function onInit(maps) {\n        var mapTypeId = maps.MapTypeId || {};\n        var mapTypes = {\n          roadMap: mapTypeId.ROADMAP,\n          satellite: mapTypeId.SATELLITE,\n          hybrid: mapTypeId.HYBRID,\n          terrain: mapTypeId.TERRAIN\n        };\n\n\n        var symbolPath = maps.SymbolPath || {};\n        var symbols = {\n          circle: symbolPath.CIRCLE,\n          backwardClosed: symbolPath.BACKWARD_CLOSED_ARROW,\n          forwardClosed: symbolPath.FORWARD_CLOSED_ARROW,\n          backwardOpened: symbolPath.BACKWARD_OPEN_ARROW,\n          forwardCOpened: symbolPath.FORWARD_OPEN_ARROW\n        };\n\n        this.isReady = true;\n\n        angular.extend(this, {\n          mapTypes: mapTypes,\n          symbols: symbols,\n          maps: maps\n        });\n      }\n\n\n      return service;\n    };\n  }\n\n  angular.module('pipMaps')\n    .provider('pipMapHelperSrv', < any > pipMapHelperSrv)\n    .decorator('uiGmapModelKey', uiGmapModelKeyDecorator);\n})();","(() => {\n  'use strict';\n  USGSOverlay.prototype = new google.maps.OverlayView();\n\n  /** @constructor */\n  function USGSOverlay(bounds, image, map, opacity) {\n\n    // Initialize all properties.\n    this.bounds_ = bounds;\n    this.image_ = image;\n    this.map_ = map;\n\n    this.opacity = opacity ? opacity : null;\n    // Define a property to hold the image's div. We'll\n    // actually create this div upon receipt of the onAdd()\n    // method so we'll leave it null for now.\n    this.div_ = null;\n\n    // Explicitly call setMap on this overlay.\n    this.setMap(map);\n  }\n\n  USGSOverlay.prototype.onAdd = function () {\n\n    var div = document.createElement('div');\n    div.style.borderStyle = 'none';\n    div.style.borderWidth = '0px';\n    div.style.position = 'absolute';\n    if (this.opacity) div.style.opacity = this.opacity;\n\n    // Create the img element and attach it to the div.\n    var img = document.createElement('img');\n    img.src = this.image_;\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.position = 'absolute';\n    div.appendChild(img);\n\n    this.div_ = div;\n\n    // Add the element to the \"overlayLayer\" pane.\n    var panes = this.getPanes();\n    panes.overlayLayer.appendChild(div);\n  };\n\n  USGSOverlay.prototype.draw = function (bounds) {\n\n    // We use the south-west and north-east\n    // coordinates of the overlay to peg it to the correct position and size.\n    // To do this, we need to retrieve the projection from the overlay.\n    var overlayProjection = this.getProjection();\n    if (!overlayProjection) return;\n\n    // Retrieve the south-west and north-east coordinates of this overlay\n    // in LatLngs and convert them to pixel coordinates.\n    // We'll use these coordinates to resize the div.\n    if (bounds) {\n      this.bounds_ = bounds\n    }\n    var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());\n    var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());\n\n\n    // Resize the image's div to fit the indicated dimensions.\n    var div = this.div_;\n\n    if (!div) return;\n\n    // div.style.left = sw.x + 'px';\n    // div.style.top = ne.y + 'px';\n    // div.style.width = (ne.x - sw.x) + 'px';\n    // div.style.height = (sw.y - ne.y) + 'px';\n    div.style.left = sw.x + 'px';\n    div.style.top = sw.y + 'px';\n    div.style.width = (ne.x - sw.x) + 'px';\n    div.style.height = (ne.y - sw.y) + 'px';\n    if (this.opacity) div.style.opacity = this.opacity;\n  };\n\n  // The onRemove() method will be called automatically from the API if\n  // we ever set the overlay's map property to 'null'.\n  USGSOverlay.prototype.onRemove = function () {\n    if (this.div_ && this.div_.parentNode) this.div_.parentNode.removeChild(this.div_);\n    this.div_ = null;\n  };\n\n  /**\n   * @ngdoc directive\n   * @name pipMapComponent.pipMap\n   * @restrict AE\n   *\n   * @scope\n   * @property {Object} pipOptions Options for a map (including options for map provider)\n   *\n   * @property {Map~GeoRegion} pipOptions.geoRegion Geo region to set map center and bounds\n   * @see https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n   * @property {Object} [pipOptions.map] Options for map provider\n   * @property {boolean} [pipOptions.map.mapTypeId = satellite] Map view\n   * @property {boolean} [pipOptions.map.disableDefaultUI = true] Disabling default UI controls\n   * @property {boolean} [pipOptions.map.panControl = false] Allows pan control\n   * @property {boolean} [pipOptions.map.zoomControl = false] Allows zoom control\n   * @property {boolean} [pipOptions.setInitBounds = false] True if need to set bounds on init from geoRegion\n   *\n   * @property {Object} pipInstance Instance of the directive's controller to be able to use it's methods manually\n   *\n   * @description Directive to create map. It is an abstraction between a map provider and the framework\n   * Also it provides methods with controller to zoom, fit map, etc\n   */\n\n  function MapComponentCtrl($injector, $scope, $element) {\n    var mapEventHandlerMixinFct = $injector.get('mapEventHandlerMixinFct');\n    mapEventHandlerMixinFct.mixTo(this, $scope.$applyAsync.bind($scope));\n    this.sidePanel = {};\n\n    this.embededMap = null;\n\n    this.pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n    this.uiGmapIsReady = $injector.get('uiGmapIsReady');\n    this.$timeout = $injector.get('$timeout');\n    this.$rootScope = $injector.get('$rootScope');\n    this.MapPopupFct = $injector.get('MapPopupFct');\n\n    this.pipMapHelperSrv.whenReady.then(this.init.bind(this));\n\n    $element.addClass('pip-map flex layout-row');\n\n    $scope.$watch('ctrl.componentOptions.center', (newVal) => {\n      if (this.justResized == true) {\n        //this.justResized = false;\n        return;\n      }\n\n      if (this.gMap && newVal) {\n        let newCenter = { lat: newVal.latitude || newVal.lat, lng: newVal.longitude || newVal.lng };\n\n        if (_.isNumber(newCenter.lat) && _.isNumber(newCenter.lng)) {\n          this.gMap.panTo(newCenter);\n        }\n      }\n    }, true);\n\n    $scope.$watch('ctrl.componentOptions.zoom', (newVal) => {\n      if (this.map) this.map.zoom = newVal;\n    });\n\n    $scope.$watch('ctrl.componentOptions.embededMap', (newVal, oldVal) => {\n      if (newVal && oldVal && newVal.embededSrc && oldVal.embededSrc && newVal.embededSrc == oldVal.embededSrc) {\n        if (this.embededOverlay) {\n          var bounds = new google.maps.LatLngBounds(new google.maps.LatLng(newVal.map_north, newVal.map_west), new google.maps.LatLng(newVal.map_south, newVal.map_east));\n          this.embededOverlay.draw(bounds)\n          return;\n        }\n      }\n      this.setEmbededBounds();\n    });\n\n    this.$rootScope.$on('pipMainResized', () => {\n      //this.$timeout(this.updateMapTiles(true));\n      this.throttleResize();\n    });\n  }\n\n\n  /**\n   * @ngdoc property\n   * @propertyOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#defaultOptions\n   * @type {{mapTypeId: *, disableDefaultUI: boolean, panControl: boolean, zoomControl: boolean}}\n   *\n   * @description Default map components\n   */\n  MapComponentCtrl.prototype.defaultOptions = {\n    map: {\n      disableDefaultUI: true,\n      panControl: false,\n      zoomControl: false,\n      disableDoubleClickZoom: true\n    },\n\n    setInitBounds: false,\n\n    popup: {}\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#init\n   *\n   * @description Init map\n   */\n  MapComponentCtrl.prototype.init = function () {\n    /**\n     * @ngdoc property\n     * @propertyOf pipMapComponent.MapComponentCtrl\n     * @name pipMapComponent.MapComponentCtrl#componentOptions\n     * @type {Object}\n     *\n     * @description Options from outer scope\n     */\n    this.options = angular.merge({\n      map: {\n        mapTypeId: this.pipMapHelperSrv.mapTypes.satellite\n      }\n    }, this.defaultOptions, this.componentOptions);\n\n    if (!this.componentOptions.control) this.componentOptions.control = {};\n    this.map = this.getMap();\n    this.map.zoom = this.componentOptions.zoom;\n    this.map.center = this.componentOptions.center;\n\n    if (this.options.sidePanel && this.options.sidePanel.templateUrl) {\n      this.showSidePanel(this.options.sidePanel.templateUrl);\n    }\n\n    this.uiGmapIsReady.promise()\n      .finally(this.onMapReady.bind(this));\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#onMapReady\n   *\n   * @description On map ready handler\n   */\n  MapComponentCtrl.prototype.onMapReady = function () {\n    this.setInitBounds();\n    this.setEmbededBounds();\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#setInitBounds\n   *\n   * @description On map ready handler\n   */\n  MapComponentCtrl.prototype.setInitBounds = function () {\n    var map = this.getMapInstance();\n\n    if (this.options.setInitBounds && map) {\n      this.pipMapHelperSrv.fitMapToRegion(map, this.options.geoRegion);\n    }\n  };\n\n  MapComponentCtrl.prototype.setEmbededBounds = function () {\n    var map = this.getMapInstance();\n    if (this.componentOptions.embededMap && this.componentOptions.embededMap.embededSrc) {\n      var bounds = new google.maps.LatLngBounds(new google.maps.LatLng(this.componentOptions.embededMap.map_north, this.componentOptions.embededMap.map_west), new google.maps.LatLng(this.componentOptions.embededMap.map_south, this.componentOptions.embededMap.map_east));\n      var srcImage = this.componentOptions.embededMap.embededSrc;\n      this.embededOverlay = new USGSOverlay(bounds, srcImage, map, this.componentOptions.embededMap.opacity);\n    } else {\n      if (this.embededOverlay) this.embededOverlay.onRemove();\n      this.embededOverlay = null;\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#getMapInstance\n   * @returns {google.maps.Map} Google map instance\n   *\n   * @protected\n   * @description Returns Google map object\n   */\n  MapComponentCtrl.prototype.getMapInstance = function () {\n    if (!this.gMap && this.componentOptions && this.componentOptions.control && this.componentOptions.control.getGMap) {\n      this.gMap = this.componentOptions.control.getGMap();\n    }\n\n    return this.gMap;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#getMap\n   *\n   * @link http://angular-ui.github.io/angular-google-maps/#!/api/google-map\n   * @description Helper function to create new Angular Google Maps object.\n   */\n  MapComponentCtrl.prototype.getMap = function () {\n    let externalClick = this.options.events && this.options.events.click ? this.options.events.click : angular.noop;\n    let externalZoom = this.options.events && this.options.events.zoom_changed ? this.options.events.zoom_changed : angular.noop;\n    let externalCenter = this.options.events && this.options.events.center_changed ? this.options.events.center_changed : angular.noop;\n    var debounceCenterChange = _.debounce(function (event) {\n      externalCenter(event);\n    }, 500)\n    // var debounceZoomChange = _.debounce(function (event) {\n    //   externalZoom(event);\n    // }, 50)\n    return {\n      control: {},\n      options: this.options.map,\n      bounds: this.options.bounds || {},\n      events: _.extend(this.options.events, {\n        click: (event) => {\n          this.onClick(event);\n          externalClick();\n        },\n        zoom_changed: (event) => {\n          if (event && this.componentOptions && this.componentOptions.mapId) {\n            event.mapId = this.componentOptions.mapId;\n            externalZoom(event);\n            // debounceZoomChange(event);\n          }\n        },\n        center_changed: (event) => {\n          if (event && this.componentOptions && this.componentOptions.mapId) {\n            event.mapId = this.componentOptions.mapId;\n            // externalCenter(event);\n            debounceCenterChange(event);\n          }\n        },\n        dblclick: this.onEventHandler.bind(this),\n        tilesloaded: this.updateMapTiles.bind(this)\n      })\n    };\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#updateMapTiles\n   *\n   * @description Updates map tiles. It is fix for all problems related to not fully loaded tiles\n   */\n  MapComponentCtrl.prototype.updateMapTiles = function (updateCenter = false) {\n    var gMap = this.getMapInstance();\n    if (!gMap) return;\n    this.pipMapHelperSrv.triggerEvent(gMap, 'resize'); // fix map is not fully loaded issue\n  };\n\n  var throttleUpdatingCenter = _.throttle((gMap, center) => {\n    if (!center) return;\n\n    gMap.panTo(center);\n    gMap.setCenter(center);\n  }, 400);\n\n  MapComponentCtrl.prototype.throttleResize = function () {\n    var gMap = this.getMapInstance();\n    if (!gMap)\n      return;\n    if (this.justResized != true) {\n      this.justResized = true;\n      var center = gMap.getCenter();\n      this.$timeout(() => {\n        throttleUpdatingCenter(gMap, center);\n      });\n      this.$timeout(() => {\n        this.justResized = false;\n      }, 400)\n    }\n\n    this.pipMapHelperSrv.triggerEvent(gMap, 'resize');\n  };\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#fitMapToBounds\n   *\n   * @param {google.maps.LatLngBounds} bounds bounds\n   * @link https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds\n   *\n   * @description Fit map to specified bounds\n   */\n  MapComponentCtrl.prototype.fitMapToBounds = function (bounds) {\n    this.pipMapHelperSrv.fitMapToBounds(this.getMapInstance(), bounds);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#showSidePanel\n   * @param {string} template Template url to pass to ng-include directive\n   *\n   * @description Shows side panel\n   */\n  MapComponentCtrl.prototype.showSidePanel = function (template) {\n    this.sidePanel.template = template;\n    this.sidePanel.show = true;\n    this.$timeout(this.updateMapTiles.bind(this));\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#hideSidePanel\n   *\n   * @description Hides side panel\n   */\n  MapComponentCtrl.prototype.hideSidePanel = function () {\n    this.sidePanel.template = null;\n    this.sidePanel.show = false;\n    this.$timeout(this.updateMapTiles.bind(this));\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#onClick\n   *\n   * @description On click default handler\n   */\n  MapComponentCtrl.prototype.onClick = function () {\n    this.closePopup();\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#freeze\n   *\n   * @description Freezes map's pan and zoom with mouse\n   */\n  MapComponentCtrl.prototype.freeze = function () {\n    if (this.isFrozen) {\n      return;\n    }\n\n    this.setMapOptions({\n      draggable: false,\n      disableDoubleClickZoom: true,\n      scrollwheel: false\n    });\n    this.isFrozen = true;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#unfreeze\n   *\n   * @description Unfreezes map's pan and zoom with mouse\n   */\n  MapComponentCtrl.prototype.unfreeze = function () {\n    if (!this.isFrozen) {\n      return;\n    }\n\n    this.setMapOptions({\n      draggable: true,\n      disableDoubleClickZoom: true,\n      scrollwheel: true\n    });\n    this.isFrozen = false;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#setCursor\n   * @param {string} [cursor] Cursor code. If empty - the default behaviour is restored\n   *\n   * @description Overrides cursor for the map or set back default behaviour if cursor is not provided\n   * @todo: I couldn't find any possibility to set a cursor for a map.\n   * We can only set cursor for draggableMap and map dragging.\n   * Also it is possible to set cursors for markers (not polys)\n   */\n  MapComponentCtrl.prototype.setCursor = function (cursor) {\n    this.cursor = cursor;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#setMapOptions\n   * @param {google.maps.MapOptions} options Options to set\n   *\n   * @description Sets map options from given options object\n   */\n  MapComponentCtrl.prototype.setMapOptions = function (options) {\n    var mapInstance = this.getMapInstance();\n    mapInstance.setOptions(options);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#createElementPopup\n   * @param {Object} options Popup options\n   * @returns {Object} Popup instance\n   *\n   * @description Creates popup instance and returns it\n   */\n  MapComponentCtrl.prototype.createElementPopup = function (options) {\n    this.createPopupInstance();\n\n    return this.popup.add(options);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#createPopupInstance\n   *\n   * @description Creates popup instance\n   */\n  MapComponentCtrl.prototype.createPopupInstance = function () {\n    if (this.popup) {\n      return;\n    }\n\n    this.popup = this.MapPopupFct.create();\n  };\n\n\n  /**\n   * @ngdoc method\n   * @methodOf pipMapComponent.MapComponentCtrl\n   * @name pipMapComponent.MapComponentCtrl#closePopup\n   *\n   * @description Closes popup\n   */\n  MapComponentCtrl.prototype.closePopup = function () {\n    if (!this.popup) {\n      return;\n    }\n    console.log('this.popup', this.popup);\n    this.popup.close();\n  };\n\n  function pipMapComponent() {\n    return {\n      strict: 'AE',\n      scope: true,\n      transclude: true,\n      bindToController: {\n        componentOptions: '=pipOptions'\n      },\n      controller: 'MapComponentCtrl',\n      controllerAs: 'ctrl',\n      templateUrl: 'map.html'\n    };\n  }\n\n  angular.module('pipMaps')\n    .controller('MapComponentCtrl', MapComponentCtrl)\n    .directive('pipMap', pipMapComponent);\n})();","\n(() => {\n  'use strict';\n\n  /**\n   * @typedef {Object} Map~eventObj\n   * @property {Object} gModel Google native model passed to event handler\n   * @property {string} eventName Event name\n   * @property {Array} args Arguments passed to the original handler\n   * @property {Object} [model] Model related to an element, fired an event\n   * @property {Object} [position] Clicked position coordinates\n   * @property {Object} [position.latitude] Clicked position latitude\n   * @property {Object} [position.longitude] Clicked position longitude\n   */\n\n\n  /**\n   * @ngdoc service\n   * @name pipMapComponent.mapEventHandlerMixinFct\n   * @description Provides methods for types conversion\n   * @mixin\n   */\n  function mapEventHandlerMixinFct() {\n    /**\n     *  @param {Object} gModel Google element class instance\n     * @param {string} eventName Fired event name\n     * @param {Object|Array} model Element model (settings object like we create here) or 'args'\n     * @param {Array} [args] Arguments passed to google native handler\n     * @returns {Map~eventObj}\n     *\n     * @private\n     * @description Creates event object from arguments\n     * Can be used for both map and model clickers\n     */\n\n    var createEventObjFromHandlerArguments = function (gModel, eventName, model, args) {\n      if (!args || !args.length) {\n        args  = model;\n        model = null;\n      }\n\n      var position = args[0] && args[0].latLng && getPositionFromLatLng(args[0].latLng);\n\n      return {\n        gModel   : gModel,\n        eventName: eventName,\n        args     : args,\n        model    : model,\n        position : position\n      };\n    };\n\n    /**\n     * @param {Object} latLng Google longitude-latitude class instance\n     * @returns {Map~position}\n     *\n     * @private\n     * @description Gets latitude and longitude from latLng instance\n     */\n    var getPositionFromLatLng = function (latLng) {\n      return {\n        latitude : latLng.lat(),\n        longitude: latLng.lng()\n      };\n    };\n\n\n    var mixin = function (postHandler) {\n      postHandler = postHandler || angular.noop;\n\n      return {\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.mapEventHandlerMixinFct\n         * @name pipMapComponent.mapEventHandlerMixinFct#addEventHandler\n         * @param {string} eventName Event name\n         * @param {Function} callback Callback to call\n         *\n         * @returns {Function} Remove handler method\n         * @description Add event handler for given event name\n         */\n        addEventHandler: function (eventName, callback) {\n          var handlerName   = '__onEventOverridden_' + eventName;\n          this[handlerName] = callback;\n\n          return function () {\n            this[handlerName] = null;\n          }.bind(this);\n        },\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.mapEventHandlerMixinFct\n         * @name pipMapComponent.mapEventHandlerMixinFct#onEventHandler\n         * @param {Object} gObject Google map class instance\n         * @param {string} eventName Fired event name\n         * @param {Object|Array} args Model on which event was fired or args\n         * @param {Array} [model] Arguments passed to google native handler\n         *\n         * @description Event handler\n         */\n        onEventHandler: function (gObject, eventName) {\n          var handlerName = '__onEventOverridden_' + eventName;\n          var eventObj    = createEventObjFromHandlerArguments.apply(null, arguments);\n\n          if (angular.isFunction(this[handlerName])) {\n            this[handlerName](eventObj);\n            postHandler();\n\n            return;\n          }\n\n          var defaultHandlerName = 'on' + eventName.charAt(0).toUpperCase() + eventName.slice(1);\n\n          if (angular.isFunction(this[defaultHandlerName])) {\n            this[defaultHandlerName](eventObj);\n            postHandler();\n          }\n        }\n      };\n    };\n\n    return {\n      mixTo: function (obj, $scope) {\n        angular.extend(obj, mixin($scope));\n      }\n    };\n  }\n\n  angular.module('pipMaps')\n    .factory('mapEventHandlerMixinFct', mapEventHandlerMixinFct);\n})();\n","{\n    const config = function (uiGmapGoogleMapApiProvider) {\n        uiGmapGoogleMapApiProvider.configure({\n            key: 'AIzaSyBg6cm-FDBFPWzRcn39AuSHGQSrdtVIjEo',\n            v: '3.23',\n            libraries: 'geometry'\n        });\n    };\n\n    angular.module('pipMaps')\n        .config(config);\n}","interface IMapEditBindings {\n    [key: string]: any;\n\n    overlay: any;\n    onEdit: any;\n    mapOptions: any;\n    showActionPanel: any;\n    actionTypes: any;\n    control: any;\n    disabled: any;\n}\n\nconst MapEditBindings: IMapEditBindings = {\n    overlay: '<pipOverlay',\n    onEdit: '&?pipOnEdit',\n    mapOptions: '=?pipMapOptions',\n    showActionPanel: '<?pipShowActionPanel',\n    actionTypes: '<?pipActionTypes',\n    control: '&?pipControl',\n    disabled: '<?pipDisabled',\n    disabledPolygons: '<?pipDisabledPolygons',\n    disabledPolygonsOptions: '<?pipDisabledPolygonsOptions',\n    disabledPolylines: '<?pipDisabledPolylines',\n    disabledPolylinesOptions: '<?pipDisabledPolylinesOptions',\n    disabledCircles: '<?pipDisabledCircles',\n    disabledCirclesOptions: '<?pipDisabledCirclesOptions'\n}\n\nclass actionTypes {\n    public static clearMap: string = 'clear';\n    public static addCircle: string = 'circle';\n    public static addRectangle: string = 'rectangle';\n    public static addPolygon: string = 'polygon';\n    public static addLine: string = 'line';\n}\n\nclass MapEditChanges implements ng.IOnChangesObject, IMapEditBindings {\n    [key: string]: ng.IChangesObject<any>;\n\n    overlay: ng.IChangesObject<any>;\n    mapOptions: ng.IChangesObject<any>;\n    showActionPanel: ng.IChangesObject<boolean>;\n    actionTypes: ng.IChangesObject<any>;\n    disabled: ng.IChangesObject<boolean>;\n    control: any;\n    onEdit: any;\n}\n\n\nclass MapEditController {\n    public map = {\n        control: {},\n        options: {\n            disableDefaultUI: true,\n            mapTypeId: \"satellite\",\n            panControl: false,\n            zoomControl: false,\n            mapTypeControl: false,\n            streetViewControl: false\n        }\n    };\n    public drawingManagerControl: any = {};\n    public drawingManagerOptions: any = {};\n    public currentOverlay: any = {};\n    public actionTypes: any[];\n\n    public showActionPanel: boolean;\n    public overlay: any;\n    public mapOptions: any;\n    public onEdit: Function;\n    public control: Function;\n    public disabled: boolean;\n\n    private _circleOptions = {\n        fillColor: '#F8E81C',\n        fillOpacity: 0.2,\n        strokeWeight: 3,\n        strokeColor: '#F8E81C',\n        clickable: false,\n        editable: !this.disabled,\n        zIndex: 1\n    };\n    private _polygonOptions = {\n        fillColor: '#F8E81C',\n        fillOpacity: 0.2,\n        strokeWeight: 3,\n        strokeColor: '#F8E81C',\n        clickable: false,\n        editable: !this.disabled,\n        draggable: !this.disabled,\n        zIndex: 1\n    };\n    private _polylineOptions = {\n        strokeWeight: 6,\n        strokeColor: '#F8E81C',\n        clickable: false,\n        editable: !this.disabled,\n        zIndex: 1\n    };\n    private _markerOptions = {\n        icon: {\n            path: 0,\n            scale: 4,\n            strokeWeight: 8,\n            fillColor: '#F8E81C',\n            strokeColor: '#F8E81C',\n            strokeOpacity: 0.9,\n            draggable: !this.disabled\n        }\n    };\n\n    private _rectangleOptions = {\n        fillColor: '#F8E81C',\n        fillOpacity: 0.2,\n        strokeWeight: 3,\n        strokeColor: '#F8E81C',\n        clickable: false,\n        editable: !this.disabled,\n        draggable: !this.disabled,\n        zIndex: 1\n    };\n\n    constructor(\n        private $element: JQuery,\n        private $scope: ng.IScope,\n        private $mdConstant: any,\n        private $document: ng.IDocumentService,\n        private $timeout: ng.ITimeoutService,\n        private uiGmapGoogleMapApi: any\n    ) {\n        $element.addClass('pip-map-edit');\n\n        uiGmapGoogleMapApi.then((maps) => {\n            this.drawingManagerOptions = {\n                drawingControl: false,\n                drawingControlOptions: {\n                    position: google.maps.ControlPosition.TOP_CENTER,\n                    drawingModes: [\n                        google.maps.drawing.OverlayType.CIRCLE,\n                        google.maps.drawing.OverlayType.POLYGON,\n                        google.maps.drawing.OverlayType.POLYLINE\n                    ]\n                },\n                circleOptions: this._circleOptions,\n                polygonOptions: this._polygonOptions,\n                polylineOptions: this._polylineOptions,\n                markerOptions: this._markerOptions,\n                rectangleOptions: this._rectangleOptions\n                \n            };\n        });\n\n        $scope.$watch('$ctrl.map.control.getGMap', () => {\n            if (this.currentOverlay && this.currentOverlay.setMap && _.isFunction(this.map.control['getGMap'])) {\n                this.currentOverlay.setMap(this.map.control['getGMap']());\n                this.fitBounds();\n            }\n        });\n\n        $scope.$watch('$ctrl.mapOptions.embededMap', () => {\n            _.assign(this.map, this.mapOptions);\n        }, true);\n\n        $scope.$watch('$ctrl.mapOptions.isEmbeded', () => {\n            _.assign(this.map, this.mapOptions);\n        });\n\n\n        $scope.$watch('$ctrl.drawingManagerControl.getDrawingManager', (val) => {\n            if (!this.drawingManagerControl.getDrawingManager) {\n                return;\n            }\n\n            google.maps.event.addListener(this.drawingManagerControl.getDrawingManager(), 'overlaycomplete', (e) => {\n                this.drawingManagerControl.getDrawingManager().setDrawingMode(null);\n                this.setOverlay(e.overlay, e.type, false);\n                this.onEditOverlay();\n            });\n\n            google.maps.event.addListener(this.drawingManagerControl.getDrawingManager(), 'drawingmode_changed', () => {\n                if (this.drawingManagerControl.getDrawingManager().getDrawingMode() !== null) {\n                    if (this.currentOverlay && this.currentOverlay.map) this.currentOverlay.setMap(null);\n                }\n            });\n\n            google.maps.event.addDomListener(document, 'keyup', (e) => {\n                const code = (e.keyCode ? e.keyCode : e.which);\n\n                if (code === 27) {\n                    this.drawingManagerControl.getDrawingManager().setDrawingMode(null);\n                }\n\n                if (code === 46) {\n                    this.clearMap();\n                }\n            });\n\n        });\n    }\n\n    public $onDestroy(): void {\n\n    }\n\n    public $onChanges(changes: MapEditChanges): void {\n        if (changes.overlay && changes.overlay.currentValue) {\n            this.setOverlay(this.convertToGoogleMapOverlay(changes.overlay.currentValue), changes.overlay.currentValue.type);\n        }\n\n        if (changes.disabled) {\n            if (this.currentOverlay) {\n                this.currentOverlay.setDraggable(!changes.disabled.currentValue);\n                if (this.currentOverlay.setEditable) this.currentOverlay.setEditable(!changes.disabled.currentValue);\n            }\n        }\n    }\n\n    public $onInit() {\n        angular.extend(this.map, this.mapOptions);\n\n        if (this.control) {\n            this.control({ control: this });\n        }\n    }\n\n    private fitBounds() {\n        if (!this.map.control['getGMap'] || !this.currentOverlay) return;\n\n        switch (this.overlay.type) {\n            case 'circle': {\n                this.map.control['getGMap']().fitBounds(this.currentOverlay.getBounds());\n                break;\n            }\n\n            case 'marker': {\n                if (this.currentOverlay.getPosition) {\n                    this.map.control['getGMap']().panTo(this.currentOverlay.getPosition());\n                }\n                break;\n            }\n\n            case 'rectangle': {\n                this.map.control['getGMap']().fitBounds(this.currentOverlay.getBounds());\n                break;\n            }\n\n            default: {\n                if (this.currentOverlay.getPath().getArray().length > 0) {\n                    var bounds = new google.maps.LatLngBounds();\n                    _.each(this.currentOverlay.getPath().getArray(), (coor) => {\n                        bounds.extend(coor);\n                    });\n                    this.map.control['getGMap']().fitBounds(bounds);\n                }\n            }\n        }\n    }\n\n    private convertToGoogleMapOverlay(overlay) {\n        if (overlay.type === 'polygon') {\n            return this.createPolygon(overlay);\n        }\n\n        if (overlay.type === 'line' || overlay.type === 'polyline') {\n            return this.createPolyline(overlay);\n        }\n\n        if (overlay.type === 'circle') {\n            return this.createCircle(overlay);\n        }\n\n        if (overlay.type === 'marker') {\n            return this.createMarker(overlay);\n        }\n\n        if (overlay.type === 'rectangle') {\n            return this.createRectangle(overlay);\n        }\n    }\n\n    private createMarker(overlay: any) {\n        if ((overlay.pos && overlay.pos.coordinates) || (overlay.latitude && overlay.longitude)) {\n            let centerCoords = {};\n            centerCoords = {\n                lat: overlay.pos.coordinates ? overlay.pos.coordinates[1] : overlay.latitude,\n                lng: overlay.pos.coordinates ? overlay.pos.coordinates[0] : overlay.longitude\n            };\n\n            const marker = new google.maps.Marker(angular.extend(\n                this.getOptionsByType('marker'),\n                { position: centerCoords }\n            ));\n\n            if (this.map.control['getGMap']) marker.setMap(this.map.control['getGMap']());\n\n            return marker;\n        }\n\n        return new google.maps.Circle(this.getOptionsByType('circle'));\n    }\n\n    private createCircle(overlay: any) {\n        if (overlay.center && (overlay.center.coordinates || (overlay.center.latitude && overlay.center.longitude)) && overlay.distance) {\n            let centerCoords = {};\n            centerCoords = {\n                lat: overlay.center.coordinates ? overlay.center.coordinates[1] : overlay.center.latitude,\n                lng: overlay.center.coordinates ? overlay.center.coordinates[0] : overlay.center.longitude\n            };\n\n            const circle = new google.maps.Circle(angular.extend(\n                this.getOptionsByType('circle'),\n                { center: centerCoords, radius: overlay.distance }\n            ));\n\n            if (this.map.control['getGMap']) circle.setMap(this.map.control['getGMap']());\n\n            return circle;\n        }\n\n        return new google.maps.Circle(this.getOptionsByType('circle'));\n    }\n\n    private createPolygon(overlay) {\n        if (overlay.geometry && overlay.geometry.coordinates) {\n            const polygonCoords = [];\n\n            _.each(overlay.geometry.coordinates[0], (coor) => {\n                polygonCoords.push({ lat: coor[1], lng: coor[0] });\n            });\n\n            const polygon = new google.maps.Polygon(angular.extend(\n                this.getOptionsByType('polygon'),\n                { paths: polygonCoords }\n            ));\n\n            if (this.map.control['getGMap']) polygon.setMap(this.map.control['getGMap']());\n\n            return polygon;\n        }\n\n        return new google.maps.Polygon(this.getOptionsByType('polygon'));;\n    }\n\n    private createPolyline(overlay) {\n        if (overlay.geometry && overlay.geometry.coordinates) {\n            const polylineCoords = [];\n\n            _.each(overlay.geometry.coordinates, (coor) => {\n                polylineCoords.push({ lat: coor[1], lng: coor[0] });\n            });\n\n            const polyline = new google.maps.Polyline(angular.extend(\n                this.getOptionsByType('line'),\n                { path: polylineCoords }\n            ));\n\n            if (this.map.control['getGMap']) polyline.setMap(this.map.control['getGMap']());\n\n            return polyline;\n        }\n\n        return new google.maps.Polyline(this.getOptionsByType('line'));\n    }\n\n    private createRectangle(overlay) {\n        if (overlay.bounds) {\n            var rectangleBounds = overlay.bounds;\n            var rectangle = new google.maps.Rectangle(angular.extend(this.getOptionsByType('rectangle'), { bounds: rectangleBounds }));\n\n            if (this.map.control['getGMap'])\n                rectangle.setMap(this.map.control['getGMap']());\n            \n            return rectangle;\n        }\n        return new google.maps.Rectangle(this.getOptionsByType('rectangle'));\n    };\n\n    private getOptionsByType(type: string): any {\n        switch (type) {\n            case 'polygon':\n                return _.cloneDeep(angular.extend(this._polygonOptions, this.getDisableOptions()));\n            case 'circle':\n                return _.cloneDeep(angular.extend(this._circleOptions, this.getDisableOptions()));\n            case 'line':\n                return _.cloneDeep(angular.extend(this._polylineOptions, this.getDisableOptions()));\n            case 'polyline':\n                return _.cloneDeep(angular.extend(this._polylineOptions, this.getDisableOptions()));\n            case 'marker':\n                return _.cloneDeep(angular.extend(this._markerOptions, this.getDisableOptions()));\n            case 'rectangle':\n                return _.cloneDeep(angular.extend(this._rectangleOptions, this.getDisableOptions()));\n        }\n    }\n\n    private getDisableOptions() {\n        return {\n            editable: !this.disabled,\n            draggable: !this.disabled\n        }\n    }\n\n    private setOverlay(overlay, type, fitBounds = true) {\n        if (!overlay) return;\n\n        this.clearMap();\n        this.currentOverlay = overlay || {};\n        this.currentOverlay.type = type;\n        switch (type) {\n            case 'circle': {\n                this.currentOverlay.center_changed = () => {\n                    this.onEditOverlay();\n                };\n\n                this.currentOverlay.radius_changed = () => {\n                    this.onEditOverlay();\n                };\n                break;\n            }\n\n            case 'marker': {\n                if (!this.currentOverlay.addListener) return;\n\n                this.currentOverlay.addListener('position_changed', () => {\n                    this.onEditOverlay();\n                });\n                break;\n            }\n\n            case 'rectangle': {\n                if (!this.currentOverlay.addListener)\n                    return;\n                this.currentOverlay.addListener('bounds_changed', () => {\n                    this.onEditOverlay();\n                });\n                break;\n            }\n\n            default: {\n                if (!this.currentOverlay.getPath) return;\n\n                google.maps.event.addListener(this.currentOverlay.getPath(), 'set_at', () => {\n                    this.onEditOverlay();\n                });\n\n                google.maps.event.addListener(this.currentOverlay.getPath(), 'insert_at', () => {\n                    this.onEditOverlay();\n                });\n            }\n        }\n\n        if (fitBounds) this.fitBounds();\n    }\n\n    private onEditOverlay() {\n        if (this.onEdit) this.onEdit({\n            overlay: this.currentOverlay,\n            bounds: this.currentOverlay && this.currentOverlay.type === 'rectangle' ? {\n                north: this.currentOverlay.getBounds().getNorthEast().lat(),\n                east: this.currentOverlay.getBounds().getNorthEast().lng(),\n                south: this.currentOverlay.getBounds().getSouthWest().lat(),\n                west: this.currentOverlay.getBounds().getSouthWest().lng(),\n            } : {},\n            type: this.currentOverlay ? this.currentOverlay.type : null,\n            path: this.currentOverlay && (this.currentOverlay.type === 'polygon' || this.currentOverlay.type === 'polyline') ? this.currentOverlay.getPath() : [],\n            center: this.currentOverlay && this.currentOverlay.type === 'circle' ?\n                this.currentOverlay.getCenter() : this.currentOverlay && this.currentOverlay.getPosition && this.currentOverlay.type === 'marker' ? this.currentOverlay.getPosition() : {},\n            radius: this.currentOverlay && this.currentOverlay.type === 'circle' ? this.currentOverlay.getRadius() : {}\n        });\n    }\n\n    public showAction(action) {\n        return !this.actionTypes ? true : this.actionTypes.includes(action);\n    }\n\n    public get showPanel() {\n        return this.showActionPanel === false ? false : true;\n    }\n\n    public addCircle() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.CIRCLE;\n    }\n\n    public addPolygon() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.POLYGON;\n    }\n    \n    public addRectangle() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.RECTANGLE;\n    }\n\n    public addLine() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.POLYLINE;\n    }\n\n    public addMarker() {\n        this.drawingManagerOptions.drawingMode = google.maps.drawing.OverlayType.MARKER;\n    }\n\n    public clearMap() {\n        this.drawingManagerOptions.drawingMode = null;\n        if (this.currentOverlay && this.currentOverlay.map) {\n            this.currentOverlay.setMap(null);\n            this.currentOverlay = null;\n            this.onEditOverlay();\n        }\n    }\n\n}\n\nlet config = function (uiGmapGoogleMapApiProvider) {\n    uiGmapGoogleMapApiProvider.configure({\n        libraries: 'drawing'\n    });\n};\n\n(() => {\n    angular.module('pipMapsEdit')\n        .component('pipMapEdit', {\n            bindings: MapEditBindings,\n            templateUrl: 'edit/MapEdit.html',\n            controller: MapEditController,\n            controllerAs: '$ctrl'\n        })\n        .config(config);\n})();\n","angular.module('pipMapsEdit', []);\n\nimport './MapEdit';","(function () {\n    'use strict';\n\n    function MapElementsCtrlFct() {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapElementsCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         *\n         * @description Controller for a map component (directive)\n         */\n        function MapElementsCtrl($injector, $scope) {\n            var mapEventHandlerMixinFct = $injector.get('mapEventHandlerMixinFct');\n            mapEventHandlerMixinFct.mixTo(this, $scope.$applyAsync.bind($scope));\n\n            this.control = {};\n            this.popUpOpened = null;\n            this.pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n            this.uiGmapIsReady = $injector.get('uiGmapIsReady');\n            this.$q = $injector.get('$q');\n        }\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#$onInit\n         *\n         * @description Init component\n         */\n        MapElementsCtrl.prototype.$onInit = function () {\n            /**\n             * @ngdoc property\n             * @propertyOf pipMapComponent.MapElementsCtrl\n             * @name pipMapComponent.MapElementsCtrl#componentOptions\n             * @type {Object}\n             *\n             * @description Options from outer scope\n             */\n            this.options = angular.merge({}, this.defaultOptions, this.componentOptions);\n            this.models = this.models || [];\n\n            this.externalDblclick = this.options.events && this.options.events.dblclick ? this.options.events.dblclick : angular.noop;\n            this.externalClick = this.options.events && this.options.events.click ? this.options.events.click : angular.noop;\n            this.externalRightclick = this.options.events && this.options.events.rightclick ? this.options.events.rightclick : angular.noop;\n\n            this.events = _.extend(this.options.events,\n                {\n                    dblclick: this.onEventHandler.bind(this),\n                    mousedown: this.onEventHandler.bind(this),\n                    mouseup: this.onEventHandler.bind(this),\n                    rightclick: this.onEventHandler.bind(this),\n                    click: this.onEventHandler.bind(this),\n                    position_changed: (objEvent) => {\n                        this.updatePopupPosition(objEvent);\n                    }\n                });\n        };\n        \n        MapElementsCtrl.prototype.$onDestroy = function () { \n            this.closePopup();\n        };\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapElementsCtrl.prototype.defaultOptions = {\n            popup: false,\n            fitBounds: false\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#init\n         * @param {Object} mapCtrl Instance of the map controller\n         *\n         * @description Init edition\n         */\n        MapElementsCtrl.prototype.init = function (mapCtrl) {\n            this.mapCtrl = mapCtrl;\n            this.initPopup();\n        };\n\n        MapElementsCtrl.prototype.setNewOptions = function (popupOptions) {\n            if (this.popup) this.popup.setNewOptions(popupOptions);\n        };\n\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#initPopup\n         *\n         * @description Init popup for an element\n         */\n        MapElementsCtrl.prototype.initPopup = function () {\n            if (!this.options.popup) {\n                return;\n            }\n\n            this.options.popup = angular.merge({}, this.options.popup, {\n                onShow: this.onShowPopup.bind(this),\n                onClose: this.onClosePopup.bind(this)\n            });\n\n            this.pipMapHelperSrv.whenReady.then(function () {\n                this.popup = this.mapCtrl.createElementPopup(this.options.popup);\n            }.bind(this));\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#onShowPopup\n         * @param {Object} model Model to which popup is shown\n         * @param {Object} options Options of the popup\n         *\n         * @description On popup show handler\n         */\n        MapElementsCtrl.prototype.onShowPopup = function () {\n            this.popUpOpened = true;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#onClosePopup\n         *\n         * @description On popup close handler\n         */\n        MapElementsCtrl.prototype.onClosePopup = function () {\n            this.popUpOpened = false;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getBoundsToFitAsync\n         * @return {Promise} Promise for getting bounds\n         *\n         * @description Gets bounds from model positions to fit them. Does so async, after map is ready\n         * If options for fitting is switched off - it rejects the promise\n         */\n        MapElementsCtrl.prototype.getBoundsToFitAsync = function () {\n            if (!this.options.fitBounds) {\n                return this.$q.reject('Fit is switched off');\n            }\n\n            return this.uiGmapIsReady.promise()\n                .then(function () {\n                    return this.getBounds();\n                }.bind(this));\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getBounds\n         * @return {Object} Bounds for the models\n         *\n         * @description Gets bounds from model positions to fit them\n         */\n        MapElementsCtrl.prototype.getBounds = function () {\n            return this.pipMapHelperSrv.getBoundsFromCoordinates(this.getAllPositions());\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getAllPositions\n         * @returns {Array<Object>} Positions for given model or an empty array\n         *\n         * @description Gets model positions array.\n         */\n        MapElementsCtrl.prototype.getAllPositions = function () {\n            if (!angular.isArray(this.models)) {\n                return [];\n            }\n\n            return this.models.map(function (model) {\n                return this.getPosition(model);\n            }, this);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getPosition\n         * @param {Object} model Model to get position for\n         * @returns {Array<Map~position>|<Map~position>} Position for a model\n         *\n         * @description Default maker position getter. We use it if coords is set to 'self'\n         */\n        MapElementsCtrl.prototype.getPosition = function (model) {\n            return {\n                latitude: model.latitude,\n                longitude: model.longitude\n            };\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#isModelEmpty\n         * @param {Object} model Model to check position for\n         * @returns {boolean} True if current model is empty\n         *\n         * @description Checks whether model is empty\n         */\n        MapElementsCtrl.prototype.isModelEmpty = function (model) {\n            var position = this.getPosition(model);\n            return !position.latitude || !position.longitude;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#onClick\n         * @param {Map~eventObj} eventObj Event object\n         *\n         * @description Handler on model click\n         */\n        MapElementsCtrl.prototype.onDblclick = function (eventObj) {\n            this.externalDblclick(eventObj);\n            //this.correctCircleModel(eventObj);\n            //this.togglePopup(eventObj);\n        };\n\n        MapElementsCtrl.prototype.onClick = function (eventObj) {\n            this.externalClick(eventObj);\n            if (this.longClick) {\n                this.correctCircleModel(eventObj);\n                this.togglePopup(eventObj);\n                this.longClick = false;\n            } else {\n                this.closePopup();\n            }\n            \n        };\n\n        MapElementsCtrl.prototype.correctCircleModel = function (eventObj) {\n            if (eventObj.gModel.radius && eventObj.gModel.center) {\n                let model = {};\n\n                _.each(this.models, (m) => {\n                    if (m[this.options.center] && m[this.options.radius]) {\n                        if (m[this.options.center].latitude.toFixed(5) == eventObj.gModel.center.lat().toFixed(5) &&\n                            m[this.options.center].longitude.toFixed(5) == eventObj.gModel.center.lng().toFixed(5) &&\n                            m[this.options.radius].toFixed(5) === eventObj.gModel.radius.toFixed(5)) {\n                            model = m;\n                        }\n                    }\n                });\n\n                eventObj.model = model;\n            }\n        };\n\n        MapElementsCtrl.prototype.onRightclick = function (eventObj) {\n            this.externalRightclick(eventObj);\n            this.correctCircleModel(eventObj);\n            this.togglePopup(eventObj);\n        };\n\n        MapElementsCtrl.prototype.onMousedown = function (eventObj) {\n            this.start = new Date().getTime();\n        };\n\n        MapElementsCtrl.prototype.onMouseup = function (eventObj) {\n            this.end = new Date().getTime();\n            this.longClick = (this.end - this.start > 300);\n        };\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#togglePopup\n         * @param {Map~eventObj} eventObj Event object\n         *\n         * @description Toggles popup\n         */\n        MapElementsCtrl.prototype.togglePopup = function (eventObj) {\n            if (!this.popup) {\n                return;\n            }\n\n            this.popup.toggle(eventObj);\n        };\n\n        MapElementsCtrl.prototype.closePopup = function (eventObj) {\n            if (!this.popup) {\n                return;\n            }\n\n            this.popup.close();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getModels\n         * @returns {Array<Object>} Array of current models\n         *\n         * @description Returns current models list\n         */\n        MapElementsCtrl.prototype.getModels = function () {\n            return this.models;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#checkContainsModel\n         * @param {Object} model Model to check\n         * @returns {boolean} True if contains\n         *\n         * @description Check whether current element contains given model\n         */\n        MapElementsCtrl.prototype.checkContainsModel = function (model) {\n            return this.models.indexOf(model) > -1;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getPlural\n         * @param {*} id Id of the model to get plural for\n         * @returns {Object} Plural model with given id\n         *\n         * @description Returns plural models with given id.\n         */\n        MapElementsCtrl.prototype.getPlural = function (id) {\n            return this.getPlurals().get(id);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#getPlurals\n         * @returns {Object} Plural object with methods\n         *\n         * @description Returns plurals models\n         */\n        MapElementsCtrl.prototype.getPlurals = function () {\n            return this.control.getPlurals();\n        };\n\n        MapElementsCtrl.prototype.updatePopupPosition = function (objEvent) {\n            if (this.popUpOpened === objEvent.model.id) {\n                this.popup.setPosition({\n                    latitude: objEvent.position.lat(),\n                    longitude: objEvent.position.lng()\n                });\n            }\n        }\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#freezeMap\n         *\n         * @description Freezes map\n         */\n        MapElementsCtrl.prototype.freezeMap = function () {\n            return this.mapCtrl.freeze();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#unfreezeMap\n         *\n         * @description unfreezes map\n         */\n        MapElementsCtrl.prototype.unfreezeMap = function () {\n            return this.mapCtrl.unfreeze();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapElementsCtrl\n         * @name pipMapComponent.MapElementsCtrl#setCursor\n         * @param {string} [cursor] Cursor code. If empty - the default behaviour is restored\n         *\n         * @description Overrides cursor for the map or set back default behaviour if cursor is not provided\n         * @todo: This is not used currently. It was developed to able change cursors from actions\n         */\n        MapElementsCtrl.prototype.setCursor = function (cursor) {\n            return this.mapCtrl.setCursor(cursor);\n        };\n\n\n        return MapElementsCtrl;\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapElementsCtrlFct', MapElementsCtrlFct);\n})();","(function () {\n    'use strict';\n\n    /**\n     * @typedef {Object} Map~PopupBreakpoint\n     * @property {string} name Name of the breakpoint (according to material docs)\n     * @property {number} width Width of the offset\n     * @property {number} height Height of the offset\n     */\n    /**\n     * @ngdoc service\n     * @name pipMapComponent.pipMapElementsFct\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Models array\n     * @property {Object} pipOptions Options for a map elements\n     * @property {boolean} [pipOptions.fitBounds = true] Whether map fit bounds method should work\n     * @property {boolean|Object} [pipOptions.popup = false] Popup for an element settings.\n     * If set to false - popup is disabled\n     * @property {string} [pipOptions.popup.className] Class name to add to a popup\n     * @property {string} [pipOptions.popup.templateUrl] Template url for a popup\n     * @property {Object} [pipOptions.popup.offset] Offset for a popup from current position\n     * @property {number} [pipOptions.popup.width] Width of the offset\n     * @property {number} [pipOptions.popup.height] Height of the offset\n     * @property {Array.<Map~PopupBreakpoint>} [pipOptions.popup.breakpoints] Breakpoints to change offset for\n     * Array is used for ability to prioritize them. If no breakpoint is matched - default offset is used\n     *\n     * @description\n     * This is a template for a directive.\n     * You SHOULD provide proper 'require', 'controller' and 'template' properties\n     * Also you can decorate anything in it\n     */\n    function pipMapElementsFct($timeout) {\n        return {\n            strict: 'AE',\n            scope: {},\n            require: ['^pipMap', 'pipMapElements'],\n            link: function ($scope, $element, $attrs, $controllers) {\n                var mapCtrl = $controllers[0];\n                var elementController = $controllers[1];\n\n                elementController.init(mapCtrl);\n\n                $scope.$watch('ctrl.models', function (models) {\n                    if (models) {\n                        elementController.getBoundsToFitAsync().then(function (bounds) {\n                            // fix issue with map zooming.\n                            // We need timeout because map is fit bound on this call, but then it fits given zoom and bounds are lost\n                            $timeout(mapCtrl.fitMapToBounds.bind(mapCtrl, bounds), 200);\n                        });\n                    }\n                });\n\n                $scope.$watch('ctrl.componentOptions.popup', (popupOptions) => {\n                    elementController.setNewOptions(popupOptions);\n                }, true);\n            },\n\n            bindToController: {\n                componentOptions: '=pipOptions',\n                models: '=pipModels'\n            },\n\n            controller: 'MapElementsCtrl',\n            controllerAs: 'ctrl',\n            templateUrl: 'elements/map-elements.html'\n        };\n    }\n\n    angular.module('pipMapsElements')\n        .factory('pipMapElementsFct', pipMapElementsFct);\n})();","(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name pipMapComponent.mapElementsRequireFct\n   *\n   * @description Provide methods for requiring elements, detect there controllers and types\n   */\n  function mapElementsRequireFct() {\n    return {\n      /**\n       * @ngdoc property\n       * @propertyOf pipMapComponent.mapElementsRequireFct\n       * @name pipMapComponent.mapElementsRequireFct#elements\n       *\n       * @type {Array<string>}\n       */\n      elements: ['?^pipMapMarkers', '?^pipMapPolylines', '?^pipMapPolygons', '?^pipMapKml'],\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.mapElementsRequireFct\n       * @name pipMapComponent.mapElementsRequireFct#getType\n       *\n       * @param {Array<Object>} $controllers Controllers instances which were required\n       * @param {number} [startIndex = 0] Index to start searching from\n       * @returns {string} Type of the element on which this directive is used\n       *\n       * @description Detects by controllers names element type on which this directive is being used\n       */\n      getType: function ($controllers, startIndex) {\n        try {\n          return $controllers.slice(startIndex)\n            .map(function (ctrl, index) {\n              return ctrl && this.elements[index];\n            }, this)\n            .filter(function (ctrlName) {\n              return ctrlName;\n            })[0]\n            .replace('?^pipMap', '')\n            .toLowerCase();\n        } catch (e) {\n          throw new Error('pip-map-editable-element can be used only with map elements directives');\n        }\n      },\n\n\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.mapElementsRequireFct\n       * @name pipMapComponent.mapElementsRequireFct#getController\n       *\n       * @param {Array<Object>} $controllers Controllers instances which were required\n       * @param {number} [startIndex = 0] Index to start searching from\n       * @returns {Object} Instance of the controller\n       *\n       * @description Returns element's controllers among other controllers instances\n       */\n      getController: function ($controllers, startIndex) {\n        return $controllers.slice(startIndex)\n          .filter(function (ctrl) {\n            return ctrl;\n          })[0];\n      }\n    };\n  }\n\n  angular.module('pipMapsElements')\n    .factory('mapElementsRequireFct', mapElementsRequireFct);\n})();\n","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapCircles\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Circles array\n     * @property {Object} pipOptions Options for a map circles\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapCirclesCtrlFct(MapElementsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapCirclesCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapElementsCtrl\n         *\n         * @description Controller for a map circles\n         */\n        function MapCirclesCtrl($injector, $scope) {\n            MapElementsCtrlFct.call(this, $injector, $scope);\n            this.$parse = $injector.get('$parse');\n        }\n\n\n        var _super = MapElementsCtrlFct.prototype;\n        MapCirclesCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapCirclesCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {\n            stroke: 'stroke',\n            fill: 'fill',\n            radius: 'radius',\n            center: 'center',\n            fitBounds: false\n        });\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#$onInit\n         *\n         * @description Init component\n         */\n        MapCirclesCtrl.prototype.$onInit = function () {\n            _super.$onInit.call(this);\n            this.setPositionGetterSetter();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#setPositionGetterSetter\n         *\n         * @description Sets getter for coordinates or null if it not needed. Treats options.model.coords\n         */\n        MapCirclesCtrl.prototype.setPositionGetterSetter = function () {\n            var pathProp = this.options.path;\n\n            this.getPosition = this.$parse(pathProp);\n            this.setPosition = this.getPosition.assign;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#setDefaultPositionsIfNeeded\n         * @param {Object} model Marker to set position for\n         *\n         * @description Checks if current positions is empty and sets default if needed\n         */\n        MapCirclesCtrl.prototype.setDefaultPositionsIfNeeded = function (model) {\n            var positions = this.getPosition(model);\n\n            if (!angular.isArray(positions)) {\n                this.setPosition(model, []);\n            }\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#getAllPositions\n         * @returns {Array<Object>} Positions for given model or an empty array\n         *\n         * @description Gets model positions array.\n         */\n        MapCirclesCtrl.prototype.getAllPositions = function () {\n            var paths = _super.getAllPositions.call(this);\n            return Array.prototype.concat.apply([], paths); //flatten array of arrays\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#setPosition\n         * @param {Object} model Marker to set position for\n         * @param {Array<Map~position>|<Map~position>} position Position to set\n         *\n         * @description Default maker position setter. We use it if coords is set to 'self'\n         */\n        MapCirclesCtrl.prototype.setPosition = function (model, position) {\n            model[this.defaultOptions.center] = position;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#getPosition\n         * @param {Object} model Marker to get position for\n         * @returns {Array<Map~position>|<Map~position>} Position for a model\n         *\n         * @description Default polygon position getter. We use it if coords is set to 'self'\n         */\n        MapCirclesCtrl.prototype.getPosition = function (model) {\n            return model[this.defaultOptions.center];\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapCirclesCtrl\n         * @name pipMapComponent.MapCirclesCtrl#isModelEmpty\n         * @param {Object} model Model to check position for\n         * @returns {boolean} True if current model is empty\n         *\n         * @description Checks whether model is empty\n         */\n        MapCirclesCtrl.prototype.isModelEmpty = function (model) {\n            var position = this.getPosition(model);\n            return !position;\n        };\n\n\n        return MapCirclesCtrl;\n    }\n\n\n    /**\n     * Create controller\n     */\n    function MapCirclesCtrlBuilder($controller, $scope, MapCirclesCtrlFct) {\n        var instance = $controller(MapCirclesCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n    function pipMapCircles(pipMapElementsFct) {\n        return angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapCircles'],\n            controller: 'MapCirclesCtrl',\n            templateUrl: 'elements/circles/map-circles.html'\n        });\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapCirclesCtrlFct', MapCirclesCtrlFct)\n        .controller('MapCirclesCtrl', MapCirclesCtrlBuilder)\n        .directive('pipMapCircles', pipMapCircles);\n})();","angular.module('pipMapsElements', []);\n\nimport './MapElementControllerService';\nimport './MapElementDirectiveService';\nimport './MapElementRequireService';\n\nimport './kml/MapKml';\nimport './markers/MapMarkers';\nimport './polygons/MapPolygons';\nimport './polylines/MapPolylines';\nimport './circles/MapCircles';","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapKml\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Kml array\n     * @property {Object} pipOptions Options for a map markers\n     * @property {boolean|Object} [pipOptions.connect = false] Connection lines settings\n     * (connect markers or groups together). If set to false - connections are disabled\n     * @property {Object} [pipOptions.connect.stroke] Settings for connections stroke\n     * @property {Object} [pipOptions.connect.icons] Settings for connection icons\n     * @property {Object} [pipOptions.connect.property] Settings for connection data\n     * from which property it should take data to show connections.\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapKmlCtrlFct(MapElementsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapKmlCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapElementsCtrl\n         *\n         * @description Controller for a map KML\n         */\n        function MapKmlCtrl($injector, $scope) {\n            MapElementsCtrlFct.call(this, $injector, $scope);\n\n            this.pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n            this.existingModels = [];\n        }\n\n\n        var _super = MapElementsCtrlFct.prototype;\n        MapKmlCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapKmlCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {\n            layer: {\n                preserveViewport: true,\n                suppressInfoWindows: true\n            }\n        });\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#getPopupParameters\n         * @returns {Object} Parameters object\n         *\n         * @description Gets parameters object for a popup template\n         * @todo: Check whether this code is actual after moving to one popup instance per map\n         */\n        MapKmlCtrl.prototype.getPopupParameters = function (): any {\n            if (!this.popup.model) {\n                return {};\n            }\n\n            return {\n                model: this.popup.model,\n                position: this.popup.position,\n                meta: this.popup.model.instance.getMetadata()\n            };\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#update\n         *\n         * @description Updates models\n         */\n        MapKmlCtrl.prototype.update = function () {\n            this.pipMapHelperSrv.whenReady.then(function () {\n                this.removeOldModels();\n                this.addNewModels();\n            }.bind(this));\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#removeOldModels\n         *\n         * @description Removes old models\n         */\n        MapKmlCtrl.prototype.removeOldModels = function () {\n            this.getOldModels()\n                .forEach(function (model) {\n                    model.instance.setMap(null);\n                    this.deRegisterModel(model);\n                }, this);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#getOldModels\n         * @returns {Array<Object>} Old models\n         *\n         * @description Returns old models\n         */\n        MapKmlCtrl.prototype.getOldModels = function () {\n            var newUrls = this.models.map(function (model) {\n                return model.url;\n            });\n\n            return this.existingModels\n                .filter(function (model) {\n                    return newUrls.indexOf(model.url) === -1;\n                });\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#addNewModels\n         *\n         * @description Adds new models to the map models\n         */\n        MapKmlCtrl.prototype.addNewModels = function () {\n            this.getNewModels()\n                .forEach(function (model) {\n                    var copy = angular.copy(model);\n                    this.addModel(copy);\n                    this.registerModel(copy);\n                    this.addEvents(copy);\n                }, this);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#getNewModels\n         * @returns {Array<Object>} New models\n         *\n         * @description Returns array of models to add\n         */\n        MapKmlCtrl.prototype.getNewModels = function () {\n            var existingUrls = this.existingModels.map(function (model) {\n                return model.url;\n            });\n\n            return this.models\n                .filter(function (model) {\n                    return existingUrls.indexOf(model.url) === -1;\n                });\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#addModel\n         * @param {Object} model Model to add\n         *\n         * @description Adds a model to the map\n         */\n        MapKmlCtrl.prototype.addModel = function (model) {\n            var mapInstance = this.mapCtrl.getMapInstance();\n            var options = angular.merge({\n                map: mapInstance,\n                url: model.url\n            }, this.options.layer);\n\n            model.instance = this.pipMapHelperSrv.createKML(options);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#addEvents\n         * @param {Object} model Model to add\n         * @param {Object} model.instance Instance of the model's map element\n         *\n         * @description Adds events to a model\n         */\n        MapKmlCtrl.prototype.addEvents = function (model) {\n            var clickHandler = this.onEvent.bind(this, model, 'click');\n            model.instance.addListener('click', clickHandler);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#onEvent\n         * @param {Object} model Model to add\n         * @param {Object} model.instance Instance of the model's map element\n         * @param {string} name Event name\n         *\n         * @description Event handler - adapter between mixin's handler and native events\n         */\n        MapKmlCtrl.prototype.onEvent = function (model, name) {\n            var args = this.copyArguments(arguments, 2);\n            this.onEventHandler(model.instance, name, model, args);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#copyArguments\n         *\n         * @param {Arguments} args Arguments array\n         * @param {number} startIndex Starting index for copying\n         * @return {Array} Copied arguments\n         *\n         * @description Copies arguments into an array.\n         * @see https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n         */\n        MapKmlCtrl.prototype.copyArguments = function (args, startIndex) {\n            var result = [];\n\n            for (var i = 0; i < args.length - startIndex; ++i) {\n                result[i] = args[i + startIndex];\n            }\n\n            return result;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#getPopupMetaData\n         * @returns {?Object} Metadata for current model in popup\n         *\n         * @description Returns metadata\n         * @todo: Check whether this code is actual after moving to one popup instance per map\n         */\n        MapKmlCtrl.prototype.getPopupMetaData = function () {\n            return this.popup.model && this.popup.model.instance.getMetadata();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#registerModel\n         * @param {Object} model Model to register\n         *\n         * @description Registers model as existing\n         */\n        MapKmlCtrl.prototype.registerModel = function (model) {\n            this.existingModels.push(model);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapKmlCtrl\n         * @name pipMapComponent.MapKmlCtrl#deRegisterModel\n         * @param {Object} model Model to de-register\n         *\n         * @description De-registers model as existing\n         */\n        MapKmlCtrl.prototype.deRegisterModel = function (model) {\n            var index = this.existingModels.indexOf(model);\n            this.existingModels.splice(index, 1);\n        };\n\n\n        return MapKmlCtrl;\n    }\n\n\n    /**\n     * Create controller\n     */\n    function MapKmlCtrlBuilder($controller, $scope, MapKmlCtrlFct) {\n        var instance = $controller(MapKmlCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n\n    function pipMapKml(pipMapElementsFct) {\n        var definition = angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapKml'],\n            controller: 'MapKmlCtrl',\n            templateUrl: 'elements/kml/map-kml.html'\n        });\n\n        var link = definition.link;\n        definition.link = function ($scope, $element, $attrs, $controllers) {\n            link.apply(this, arguments);\n\n            var mapCtrl = $controllers[0];\n            var elementController = $controllers[1];\n\n            elementController.mapCtrl = mapCtrl;\n            $scope.$watchCollection('ctrl.models', function (models) {\n                if (models) {\n                    elementController.update();\n                }\n            });\n        };\n\n        return definition;\n    }\n\n    angular.module('pipMapsElements')\n        .directive('pipMapKml', pipMapKml)\n        .factory('MapKmlCtrlFct', MapKmlCtrlFct)\n        .controller('MapKmlCtrl', MapKmlCtrlBuilder);\n})();","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapMarkers\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Markers array\n     * @property {Object} pipOptions Options for a map markers\n     * @property {boolean|Object} [pipOptions.connect = false] Connection lines settings\n     * (connect markers or groups together). If set to false - connections are disabled\n     * @property {Object} [pipOptions.connect.stroke] Settings for connections stroke\n     * @property {Object} [pipOptions.connect.icons] Settings for connection icons\n     * @property {Object} [pipOptions.connect.property] Settings for connection data\n     * from which property it should take data to show connections.\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapMarkersCtrlFct(MapElementsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapMarkersCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapElementsCtrl\n         *\n         * @description Controller for a map marker\n         */\n        function MapMarkersCtrl($injector, $scope) {\n            MapElementsCtrlFct.call(this, $injector, $scope);\n\n            this.$parse = $injector.get('$parse');\n            this.pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n        }\n\n\n        var _super = MapElementsCtrlFct.prototype;\n        MapMarkersCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapMarkersCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {\n            model: {\n                coords: 'self',\n                icon: 'icon'\n            },\n            connect: false\n        });\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#$onInit\n         *\n         * @description Init component\n         */\n        MapMarkersCtrl.prototype.$onInit = function () {\n            _super.$onInit.call(this);\n            this.setPositionGetterSetter();\n            this.initConnect();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#initConnect\n         *\n         * @description Init polyline configuration for connections\n         */\n        MapMarkersCtrl.prototype.initConnect = function () {\n            if (!this.options.connect) {\n                return;\n            }\n\n            var options = this.options.connect;\n\n            this.connect = angular.merge({\n                show: true\n            }, options);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#setPositionGetterSetter\n         *\n         * @description Sets getter for coordinates or null if it not needed. Treats options.model.coords\n         */\n        MapMarkersCtrl.prototype.setPositionGetterSetter = function () {\n            var coordsProp = this.options.model.coords;\n\n            if (coordsProp === 'self') { // take object with coordinates\n                return;\n            }\n\n            this.getPosition = this.$parse(coordsProp);\n            this.setPosition = this.getPosition.assign;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#setPosition\n         * @param {Object} model Marker to set position for\n         * @param {Array<Map~position>|<Map~position>} position Position to set\n         *\n         * @description Default maker position setter. We use it if coords is set to 'self'\n         */\n        MapMarkersCtrl.prototype.setPosition = function (model, position) {\n            angular.extend(model, position);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#onShowPopup\n         * @param {Object} model Model to which popup is shown\n         *\n         * @description Closes popup window and clears related data\n         */\n        MapMarkersCtrl.prototype.onShowPopup = function (model) {\n            //this.resetIconActive();\n            this.popUpOpened = model.id;\n            if (!this.options.popup.options.setPosition) {\n                return;\n            }\n\n            //this.setIconActive(model);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#onClosePopup\n         *\n         * @description Closes popup window and clears related data\n         */\n        MapMarkersCtrl.prototype.onClosePopup = function () {\n            //this.resetIconActive();\n            this.popUpOpened = null;\n        };\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#setIconActive\n         * @param {Object} model Model to set icon for\n         *\n         * @description Sets icon for the marker active\n         */\n        MapMarkersCtrl.prototype.setIconActive = function (model) {\n            if (!model || !model.icon) {\n                return;\n            }\n\n            this.popupModel = model;\n            this.pipMapHelperSrv.setIcon(this.popupModel.icon, true);\n        };\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapMarkersCtrl\n         * @name pipMapComponent.MapMarkersCtrl#resetIconActive\n         *\n         * @description Sets icon for the marker inactive\n         */\n        MapMarkersCtrl.prototype.resetIconActive = function () {\n            if (!this.popupModel || !this.popupModel.icon) {\n                return;\n            }\n\n            this.pipMapHelperSrv.setIcon(this.popupModel.icon, false);\n            this.popupModel = null;\n        };\n\n        return MapMarkersCtrl;\n    }\n\n    /**\n     * Create controller\n     */\n    function MapMarkersCtrlBuilder($controller, $scope, MapMarkersCtrlFct) {\n        var instance = $controller(MapMarkersCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n    function pipMapMarkers(pipMapElementsFct) {\n        return angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapMarkers'],\n            controller: 'MapMarkersCtrl',\n            templateUrl: 'elements/markers/map-markers.html'\n        });\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapMarkersCtrlFct', MapMarkersCtrlFct)\n        .controller('MapMarkersCtrl', MapMarkersCtrlBuilder)\n        .directive('pipMapMarkers', pipMapMarkers);\n})();","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapPolygons\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Polygons array\n     * @property {Object} pipOptions Options for a map polygons\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapPolygonsCtrlFct(MapElementsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapPolygonsCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapElementsCtrl\n         *\n         * @description Controller for a map polygons\n         */\n        function MapPolygonsCtrl($injector, $scope) {\n            MapElementsCtrlFct.call(this, $injector, $scope);\n            this.$parse = $injector.get('$parse');\n        }\n\n\n        var _super = MapElementsCtrlFct.prototype;\n        MapPolygonsCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#defaultOptions\n         * @type {Object}\n         *\n         * @description Default map components\n         */\n        MapPolygonsCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {\n            path: 'path',\n            stroke: {\n                color: '#ff6262',\n                weight: 5\n            },\n            fitBounds: false\n        });\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#$onInit\n         *\n         * @description Init component\n         */\n        MapPolygonsCtrl.prototype.$onInit = function () {\n            _super.$onInit.call(this);\n            this.setPositionGetterSetter();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#setPositionGetterSetter\n         *\n         * @description Sets getter for coordinates or null if it not needed. Treats options.model.coords\n         */\n        MapPolygonsCtrl.prototype.setPositionGetterSetter = function () {\n            var pathProp = this.options.path;\n\n            this.getPosition = this.$parse(pathProp);\n            this.setPosition = this.getPosition.assign;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#setDefaultPositionsIfNeeded\n         * @param {Object} model Marker to set position for\n         *\n         * @description Checks if current positions is empty and sets default if needed\n         */\n        MapPolygonsCtrl.prototype.setDefaultPositionsIfNeeded = function (model) {\n            var positions = this.getPosition(model);\n\n            if (!angular.isArray(positions)) {\n                this.setPosition(model, []);\n            }\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#getAllPositions\n         * @returns {Array<Object>} Positions for given model or an empty array\n         *\n         * @description Gets model positions array.\n         */\n        MapPolygonsCtrl.prototype.getAllPositions = function () {\n            var paths = _super.getAllPositions.call(this);\n            return Array.prototype.concat.apply([], paths); //flatten array of arrays\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#setPosition\n         * @param {Object} model Marker to set position for\n         * @param {Array<Map~position>|<Map~position>} position Position to set\n         *\n         * @description Default maker position setter. We use it if coords is set to 'self'\n         */\n        MapPolygonsCtrl.prototype.setPosition = function (model, position) {\n            model[this.defaultOptions.path] = position;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#getPosition\n         * @param {Object} model Marker to get position for\n         * @returns {Array<Map~position>|<Map~position>} Position for a model\n         *\n         * @description Default polygon position getter. We use it if coords is set to 'self'\n         */\n        MapPolygonsCtrl.prototype.getPosition = function (model) {\n            return model[this.defaultOptions.path];\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPolygonsCtrl\n         * @name pipMapComponent.MapPolygonsCtrl#isModelEmpty\n         * @param {Object} model Model to check position for\n         * @returns {boolean} True if current model is empty\n         *\n         * @description Checks whether model is empty\n         */\n        MapPolygonsCtrl.prototype.isModelEmpty = function (model) {\n            var position = this.getPosition(model);\n            return !position || !position.length || !position[0].latitude || !position[0].longitude;\n        };\n\n\n        return MapPolygonsCtrl;\n    }\n\n\n    /**\n     * Create controller\n     */\n    function MapPolygonsCtrlBuilder($controller, $scope, MapPolygonsCtrlFct) {\n        var instance = $controller(MapPolygonsCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n    function pipMapPolygons(pipMapElementsFct) {\n        return angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapPolygons'],\n            controller: 'MapPolygonsCtrl',\n            templateUrl: 'elements/polygons/map-polygons.html'\n        });\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapPolygonsCtrlFct', MapPolygonsCtrlFct)\n        .controller('MapPolygonsCtrl', MapPolygonsCtrlBuilder)\n        .directive('pipMapPolygons', pipMapPolygons);\n})();","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.pipMapPolylines\n     * @restrict AE\n     *\n     * @scope\n     * @property {Array<Object>} pipModels Polylines array\n     * @property {Object} pipOptions Options for a map polylines\n     *\n     * @description  it extends pipMapElementsFct\n     * @see pipMapComponent.pipMapElementsFct\n     */\n\n    function MapPolylinesCtrlFct(MapPolygonsCtrlFct) {\n        /*@ngInject*/\n        /**\n         * @ngdoc Controller\n         * @name pipMapComponent.MapPolylinesCtrl\n         * @mixes pipMapComponent.mapEventHandlerMixinFct\n         * @constructor\n         * @extends pipMapComponent.MapPolygonsCtrl\n         * @description Controller for a map polylines\n         */\n        function MapPolylinesCtrl($injector, $scope) {\n            MapPolygonsCtrlFct.call(this, $injector, $scope);\n        }\n\n\n        var _super = MapPolygonsCtrlFct.prototype;\n        MapPolylinesCtrl.prototype = Object.create(_super);\n\n\n        /**\n         * @ngdoc property\n         * @propertyOf pipMapComponent.MapPolylinesCtrl\n         * @name pipMapComponent.MapPolylinesCtrl#defaultOptions\n         * @type {Object}\n         * @description Default map components\n         */\n        MapPolylinesCtrl.prototype.defaultOptions = angular.merge({}, _super.defaultOptions, {});\n\n\n        return MapPolylinesCtrl;\n    }\n\n    /**\n     * Create controller\n     */\n    function MapPolylinesCtrlBuilder($controller, $scope, MapPolylinesCtrlFct) {\n        var instance = $controller(MapPolylinesCtrlFct, {\n            $scope: $scope\n        });\n\n        angular.extend(instance, this);\n        instance.$onInit();\n\n        return instance;\n    }\n\n    function pipMapPolylines(pipMapElementsFct) {\n        return angular.extend({}, pipMapElementsFct, {\n            require: ['^pipMap', 'pipMapPolylines'],\n            controller: 'MapPolylinesCtrl',\n            templateUrl: 'elements/polylines/map-polylines.html'\n        });\n    }\n\n    angular.module('pipMapsElements')\n        .factory('MapPolylinesCtrlFct', MapPolylinesCtrlFct)\n        .controller('MapPolylinesCtrl', MapPolylinesCtrlBuilder)\n        .directive('pipMapPolylines', pipMapPolylines);\n})();","/// <reference path=\"../typings/tsd.d.ts\" />\n\nimport './popup';\nimport './elements';\nimport './edit';\n//import './editable_element/EditableElement';\n\n{\n    angular.module('pipMaps', [\n        'uiGmapgoogle-maps',\n        // Map services\n        'pipMaps.Templates',\n        'pipMapsPopup',\n        'pipMapsElements',\n  //      'pipMapsEditableElement',\n        'pipMapsEdit'\n    ]);\n}\n\nimport './config';\nimport './GoogleMapsRemoveAfterService';\nimport './HelpService';\nimport './Map';\nimport './MapEventHandlerService';\n","\n(() => {\n  'use strict';\n\n  function MapElementPopupFct($injector) {\n    var pipMapHelperSrv = $injector.get('pipMapHelperSrv');\n    var $rootScope = $injector.get('$rootScope');\n\n    /**\n     * @ngdoc service\n     * @name pipMapComponent.MapElementPopupFct\n     *\n     * @class\n     * @description Element popup class\n     */\n    function MapElementPopupFct(options) {\n      var er = new Error();\n      var offset = pipMapHelperSrv.createSize(options.offset.width, options.offset.height);\n\n      this.options = angular.merge({\n        boxClass: 'pip-map-info-window ' + options.className,\n        closeBoxURL: '',\n        pixelOffset: offset\n      }, options.options);\n\n      this.templateUrl = options.templateUrl;\n\n      this.onShow = options.onShow;\n      this.onClose = options.onClose;\n\n      this.initBreakpoints(options.offset.breakpoints);\n    }\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#initBreakpoints\n     * @private\n     *\n     * @param {Array<Object>} breakpoints Array of breakpoint to init\n     *\n     * @description Init popup breakpoints if any\n     */\n    MapElementPopupFct.prototype.initBreakpoints = function (breakpoints) {\n      breakpoints = breakpoints || [];\n\n      this.breakpoints = breakpoints.map(function (breakpoint) {\n        return {\n          name: breakpoint.name,\n          offset: pipMapHelperSrv.createSize(breakpoint.width, breakpoint.height)\n        };\n      }, this);\n\n      this.defaultOffset = this.options.pixelOffset;\n    };\n\n    MapElementPopupFct.prototype.setNewOptions = function (options) {\n      var offset = pipMapHelperSrv.createSize(options.offset.width, options.offset.height);\n\n      this.options = angular.merge({\n        boxClass: 'pip-map-info-window ' + options.className,\n        closeBoxURL: '',\n        pixelOffset: offset\n      }, options.options);\n\n      this.initBreakpoints(options.offset.breakpoints);\n      this.fitOffset();\n    }\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#close\n     *\n     * @description Closes element popup\n     */\n    MapElementPopupFct.prototype.close = function () {\n      this.onClose();\n    };\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#show\n     * @param {Object} model to show popup for\n     *\n     * @description Shows element popup\n     */\n    MapElementPopupFct.prototype.show = function (model) {\n      this.onShow(model);\n      this.fitOffset();\n    };\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#setPosition\n     *\n     * @description Sets position of the element popup\n     */\n    MapElementPopupFct.prototype.setPosition = function () {\n      this.fitOffset();\n    };\n\n\n    /**\n     * @ngdoc method\n     * @methodOf pipMapComponent.MapElementPopupFct\n     * @name pipMapComponent.MapElementPopupFct#fitOffset\n     *\n     * @description\n     */\n    MapElementPopupFct.prototype.fitOffset = function () {\n      var hasBreakpoint = this.breakpoints.some(function (breakpoint) {\n        var isTargetBreakpoint = $rootScope.utils.hasBreakpoint(breakpoint.name);\n\n        if (isTargetBreakpoint) {\n          this.options.pixelOffset = breakpoint.offset;\n          return true;\n        }\n      }, this);\n\n      if (!hasBreakpoint) {\n        this.options.pixelOffset = this.defaultOffset;\n      }\n    };\n\n\n    return {\n      /**\n       * @ngdoc method\n       * @methodOf pipMapComponent.MapElementPopupFct\n       * @name pipMapComponent.MapElementPopupFct#fitOffset\n       * @static\n       *\n       * @description\n       */\n      create: function (options) {\n        return new MapElementPopupFct(options);\n      }\n    };\n  }\n\n  angular.module('pipMapsPopup')\n    .factory('MapElementPopupFct', MapElementPopupFct);\n\n})();\n","(() => {\n    'use strict';\n\n    /**\n     * @ngdoc directive\n     * @name pipMapComponent.mapPopup\n     * @restrict A\n     *\n     * @description Directive for popup for map elements. Also treats editable elements properly\n     */\n    function mapPopup() {\n        return {\n            strict: 'A',\n            scope: {\n                popup: '=pipMapPopup'\n            },\n            templateUrl: 'popup/map-popup.html'\n        };\n    }\n\n    angular.module('pipMapsPopup')\n        .directive('pipMapPopup', mapPopup);\n})();","(() => {\n  'use strict';\n\n  /**\n   * @ngdoc directive\n   * @name pipMapComponent.mapPopupContent\n   * @restrict AE\n   *\n   * @description Directive for basic popup content. Transcluded.\n   */\n  function mapPopupContent() {\n    return {\n      strict     : 'AE',\n      transclude : true,\n      templateUrl: 'popup/map-popup-content.html'\n    };\n  }\n\n  angular.module('pipMapsPopup')\n    .directive('pipMapPopupContent', mapPopupContent);\n})();\n","(() => {\n    'use strict';\n\n    function MapPopupFct($injector) {\n        var MapElementPopup = $injector.get('MapElementPopupFct');\n        var $rootScope = $injector.get('$rootScope');\n        var $timeout = $injector.get('$timeout');\n\n        /**\n         * @ngdoc service\n         * @name pipMapComponent.MapPopupFct\n         *\n         * @description Controller for popup for map elements directive\n         */\n        function MapPopupFct() {\n            this.elements = [];\n        }\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#add\n         *\n         * @param {Object} options Popup options\n         * @returns {Object}\n         *\n         * @description Init popup configuration\n         */\n        MapPopupFct.prototype.add = function (options) {\n            var element = MapElementPopup.create(options);\n            this.elements.push(element);\n\n            return {\n                toggle: this.toggle.bind(this, element),\n                close: this.close.bind(this, element),\n                setPosition: (position) => {\n                    if (this.element.options.updatePosition === false) return;\n\n                    this.position = position;\n                },\n                setNewOptions: (options) => {\n                    element.setNewOptions(options);\n                }\n            };\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#toggle\n         *\n         * @param {pipMapComponent.MapElementPopupFct} element Element popup to show\n         * @param {Map~eventObj} eventObj Event object for popup\n         *\n         * @description Toggles popup\n         */\n        MapPopupFct.prototype.toggle = function (element, eventObj) {\n            if (this.isNewModel(eventObj)) {\n                // if (this.element !== element) {\n                this.close();\n\n                this.element = element;\n                $timeout(function () {\n                    this.show(element);\n                }.bind(this), 10); //magic number to let info-popup-window to be destroyed and init once again\n                // }\n\n                this.setPosition(eventObj);\n                return;\n            }\n\n            this.close();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#isNewModel\n         *\n         * @param {Map~eventObj} eventObj Event object for popup\n         * @returns {boolean} true if new\n         *\n         * @description Checks whether this is new popup to show\n         */\n        MapPopupFct.prototype.isNewModel = function (eventObj) {\n            return this.model !== eventObj.model;\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#show\n         *\n         * @param {pipMapComponent.MapElementPopupFct} element Element popup to show\n         *\n         * @description Shows popup for an element with given event object\n         */\n        MapPopupFct.prototype.show = function (element) {\n            if (!this.model || !this.position) {\n                return;\n            }\n\n            this.isEnabled = true;\n\n            this.setBreakpointHandler(element);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#setPosition\n         *\n         * @param {Map~eventObj} eventObj Event for showing popup\n         *\n         * @description Closes popup window and clears related data\n         */\n        MapPopupFct.prototype.setPosition = function (eventObj) {\n            this.position = this.getPosition(eventObj);\n            this.model = eventObj.model;\n            this.element.show(this.model);\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#setBreakpointHandler\n         * @param {pipMapComponent.MapElementPopupFct} element Element popup to show\n         *\n         * @description Sets breakpoint handler\n         */\n        MapPopupFct.prototype.setBreakpointHandler = function (element) {\n            this.removeBreakpointHandler = $rootScope.$on('pipMainLayoutResized', element.setPosition.bind(element));\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#resetBreakpointHandler\n         *\n         * @description Resets breakpoint handler\n         */\n        MapPopupFct.prototype.resetBreakpointHandler = function () {\n            if (this.removeBreakpointHandler) this.removeBreakpointHandler();\n        };\n\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#close\n         *\n         * @description Closes popup window and clears related data\n         */\n        MapPopupFct.prototype.close = function () {\n            if (!this.element) {\n                return;\n            }\n\n            this.element.close();\n\n            this.resetBreakpointHandler();\n\n            this.model = null;\n            this.isEnabled = false;\n            this.position = null;\n            this.element = null;\n        };\n\n        /**\n         * @ngdoc method\n         * @methodOf pipMapComponent.MapPopupFct\n         * @name pipMapComponent.MapPopupFct#getPosition\n         * @private\n         *\n         * @param {Map~eventObj} eventObj Event for showing popup\n         *\n         * @description Gets position for a popup\n         */\n        MapPopupFct.prototype.getPosition = function (eventObj) {\n            return eventObj.position;\n        };\n\n\n        return {\n            /**\n             * @ngdoc method\n             * @methodOf pipMapComponent.MapPopupFct\n             * @name pipMapComponent.MapPopupFct#create\n             * @returns {pipMapComponent.MapPopupFct} Popup service instance\n             *\n             * @static\n             * @description Creates popup service instance\n             */\n            create: function () {\n                return new MapPopupFct();\n            }\n        };\n    }\n\n    angular.module('pipMapsPopup')\n        .factory('MapPopupFct', MapPopupFct);\n})();","(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('map.html',\n    '<div class=\"pip-map-side-panel flex-fixed flex-order-1\" ng-if=\"ctrl.sidePanel.show\"><ng-include src=\"ctrl.sidePanel.template\"></ng-include></div><ui-gmap-google-map class=\"flex pip-map-provider-wrapper\" control=\"ctrl.componentOptions.control\" center=\"ctrl.map.center\" zoom=\"ctrl.map.zoom\" options=\"ctrl.map.options\" bounds=\"ctrl.map.bounds\" events=\"ctrl.map.events\"><div pip-map-popup=\"ctrl.popup\" ng-if=\"ctrl.popup\"></div><ng-transclude></ng-transclude></ui-gmap-google-map>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('edit/MapEdit.html',\n    '<pip-map pip-options=\"$ctrl.map\"><ui-gmap-drawing-manager options=\"$ctrl.drawingManagerOptions\" control=\"$ctrl.drawingManagerControl\"></ui-gmap-drawing-manager><pip-map-polygons pip-models=\"$ctrl.disabledPolygons\" pip-options=\"$ctrl.disabledPolygonsOptions\"></pip-map-polygons><pip-map-polylines pip-models=\"$ctrl.disabledPolylines\" pip-options=\"$ctrl.disabledPolylinesOptions\"></pip-map-polylines><pip-map-circles pip-models=\"$ctrl.disabledCircles\" pip-options=\"$ctrl.disabledCirclesOptions\"></pip-map-circles></pip-map><div class=\"action-panel w-stretch layout-row layout-align-center-center\" ng-if=\"$ctrl.showPanel\"><div class=\"action-buttons color-primary-bg flex-fixed\"><md-button ng-click=\"$ctrl.clearMap()\" ng-if=\"$ctrl.showAction(\\'clear\\')\">{{ \\'CLEAR_MAP\\' | translate }}</md-button><md-button ng-click=\"$ctrl.addCircle()\" ng-if=\"$ctrl.showAction(\\'circle\\')\">{{ \\'ADD_CIRCLE\\' | translate }}</md-button><md-button ng-click=\"$ctrl.addPolygon()\" ng-if=\"$ctrl.showAction(\\'polygon\\')\">{{ \\'ADD_POLYGON\\' | translate }}</md-button><md-button ng-click=\"$ctrl.addLine()\" ng-if=\"$ctrl.showAction(\\'line\\')\">{{ \\'ADD_LINE\\' | translate }}</md-button></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('edit_old/map-edit-tool.html',\n    '<div layout=\"column\" class=\"pip-map-edit-tool theme-text-primary\" ng-init=\"currentElement = editCtrl.currentElement; tool = currentElement.tool; model = tool.currentModel\"><header hide-xs=\"\" class=\"pip-map-edit-header\" layout=\"column\" layout-align=\"space-between\"><h2 class=\"md-title\">{{:: currentElement.getEditTitle() }}</h2><div class=\"pip-map-edit-actions\" layout=\"row\"><span class=\"pip-map-edit-actions-block-main\"><md-button ng-click=\"tool.undo()\" ng-disabled=\"tool.isUndoDisabled()\"><md-icon md-svg-icon=\"map:undo\" aria-label=\"Undo\"></md-icon></md-button></span><md-divider></md-divider><span class=\"pip-map-edit-actions-block-tool\"><md-button ng-repeat=\"action in tool.actions\" ng-disabled=\"tool.isActionDisabled(action)\" ng-click=\"tool.setAction(action)\"><md-icon md-svg-icon=\"{{:: action.definition.icon }}\" aria-label=\"{{:: action.definition.name }}\" ng-class=\"{ active: tool.isActionActive(action) }\"></md-icon></md-button></span></div></header><header hide-gt-xs=\"\" class=\"pip-map-edit-header\" layout=\"column\" layout-align=\"space-between\"><form name=\"editCtrl.modelForm\" ng-include=\"editCtrl.currentElement.tool.template\"></form></header><md-divider></md-divider><section flex=\"auto\" class=\"pip-map-edit-content\"><form hide-xs=\"\" name=\"editCtrl.modelForm\" ng-include=\"editCtrl.currentElement.tool.template\"></form></section><md-divider></md-divider><footer hide-xs=\"\" class=\"pip-map-edit-footer\" layout=\"row\" layout-align=\"end center\"><div flex=\"\"><md-button ng-click=\"editCtrl.remove()\">{{:: \\'DELETE\\' | translate }} {{:: currentElement.name }}</md-button></div><md-button ng-click=\"editCtrl.cancel()\">{{:: \\'CANCEL\\' | translate }}</md-button><md-button ng-click=\"editCtrl.save()\" ng-disabled=\"editCtrl.modelForm.$invalid\">{{:: tool.titleSave | translate }}</md-button></footer><footer hide-gt-xs=\"\" class=\"pip-map-edit-footer\" layout=\"row\" layout-align=\"start center\"><div layout=\"row\" layout-align=\"space-around\"><md-button ng-click=\"tool.undo()\" ng-disabled=\"tool.isUndoDisabled()\"><md-icon md-svg-icon=\"map:undo\" aria-label=\"Remove\"></md-icon></md-button></div><md-divider></md-divider><md-menu flex=\"\" layout=\"column\"><md-button class=\"pip-map-edit-actions-trigger\" ng-click=\"$mdOpenMenu($event)\"><md-icon class=\"active\" md-svg-icon=\"{{ tool.currentAction.definition.icon }}\" aria-label=\"Trigger menu\" md-menu-origin=\"\"></md-icon><md-icon md-svg-icon=\"map:tools\" aria-label=\"Triangle down\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"action in tool.actions\"><md-button ng-click=\"tool.setAction(action)\" ng-disabled=\"tool.isActionDisabled(action)\"><md-icon md-svg-icon=\"{{:: action.definition.icon }}\" aria-label=\"{{:: action.definition.name }}\" ng-class=\"{ active: tool.isActionActive(action) }\" md-menu-align-target=\"\"></md-icon>{{:: action.definition.name }}</md-button></md-menu-item></md-menu-content></md-menu><md-divider></md-divider><div layout=\"row\" layout-align=\"space-around\"><md-button ng-click=\"editCtrl.cancel()\"><md-icon md-svg-icon=\"map:cross\" aria-label=\"Close\"></md-icon></md-button><md-button ng-click=\"editCtrl.save()\" ng-disabled=\"editCtrl.modelForm.$invalid\"><md-icon md-svg-icon=\"map:check\" aria-label=\"Sumbit\"></md-icon></md-button></div></footer></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('edit_old/map-edit-tools-list.html',\n    '<md-fab-speed-dial class=\"pip-floating-button map-add-button md-scale\" md-direction=\"up\" md-open=\"fab.isOpen\"><md-fab-trigger><md-button class=\"md-fab\" ng-class=\"{\\'md-accent md-raised\\': !fab.isOpen, \\'md-warn\\': fab.isOpen}\"><md-icon md-svg-icon=\"map:plus\" aria-label=\"Open\" class=\"md-headline centered-add-icon\" ng-if=\"!fab.isOpen\"></md-icon><md-icon md-svg-icon=\"map:cross\" aria-label=\"Close\" class=\"md-headline centered-add-icon\" ng-if=\"fab.isOpen\"></md-icon></md-button></md-fab-trigger><md-fab-actions class=\"pip-map-edit-tools-list\"><div ng-repeat=\"element in ::editCtrl.elements\"><span class=\"pip-map-edit-tooltip\">{{:: element.name }}</span><md-button class=\"md-fab md-raised md-mini\" ng-click=\"editCtrl.createElement(element)\"><md-icon md-svg-icon=\"{{:: element.icon }}\" aria-label=\"{{:: element.icon }}\"></md-icon></md-button></div></md-fab-actions></md-fab-speed-dial>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('edit_old/map-edit.html',\n    '<script type=\"text/ng-template\" id=\"map-icons.svg\"><svg xmlns=\"http://www.w3.org/2000/svg\"> <defs> <g id=\"trash\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M128 107c0-24 19-43 43-43l170 0c24 0 43 19 43 43l0 256-256 0z m277 320l-74 0-22 21-106 0-22-21-74 0 0-43 298 0z\"/></g> <g id=\"plus\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M405 235l-128 0 0-128-42 0 0 128-128 0 0 42 128 0 0 128 42 0 0-128 128 0z\"/></g> <g id=\"cross\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M405 375l-30 30-119-119-119 119-30-30 119-119-119-119 30-30 119 119 119-119 30 30-119 119z\"/></g> <g id=\"undo\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M213 320l0 85-149-149 149-149 0 87c107 0 182-34 235-109-21 107-85 214-235 235z\"/></g> <g id=\"check\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M192 167l-89 89-30-30 119-119 256 256-30 30z\"/></g> <g id=\"tools\" transform=\"translate(512,0) scale(-1,1) rotate(180,256,256)\"><path d=\"M149 299l107-107 107 107z\"/></g> <g id=\"add-point\" transform=\"translate(0,0) scale(25)\"><path class=\"cls-1\" d=\"M8.46,9l2.81-.17a0.31,0.31,0,0,0,.2-0.53L3.4,0.09A0.31,0.31,0,0,0,2.87.3V11.81a0.31,0.31,0,0,0,.51.23L5.51,10.2l1.9,4.64a0.31,0.31,0,0,0,.4.17l2.37-1a0.31,0.31,0,0,0,.17-0.4Z\"/><polygon class=\"cls-1\" points=\"14.96 15.62 14.96 12.72 13.49 12.72 13.49 15.62 10.59 15.62 10.59 17.1 13.49 17.1 13.49 20 14.96 20 14.96 17.1 17.87 17.1 17.87 15.62 14.96 15.62\"/></g> <g id=\"remove-point\" transform=\"translate(0,0) scale(25)\"><path class=\"cls-1\" d=\"M8.46,9l2.81-.17a0.31,0.31,0,0,0,.2-0.53L3.4,0.09a0.31,0.31,0,0,0-.53.22V11.82a0.31,0.31,0,0,0,.51.23l2.12-1.84,1.9,4.64a0.31,0.31,0,0,0,.4.17l2.37-1a0.31,0.31,0,0,0,.17-0.4Z\"/><rect class=\"cls-1\" x=\"10.58\" y=\"15.63\" width=\"7.28\" height=\"1.48\"/></g> <g id=\"pan\" transform=\"translate(0,0) scale(25)\"><path d=\"M15.28,6.56V9H11V4.74h2.41a0.31,0.31,0,0,0,.24-0.51L10.24,0.13a0.31,0.31,0,0,0-.47,0L6.31,4.23a0.31,0.31,0,0,0,.24.51H9V9H4.72V6.56a0.31,0.31,0,0,0-.51-0.24L0.11,9.78a0.31,0.31,0,0,0,0,.47l4.11,3.46a0.31,0.31,0,0,0,.51-0.24V11.07H9v4.23H6.54a0.31,0.31,0,0,0-.24.51l3.46,4.11a0.31,0.31,0,0,0,.47,0l3.46-4.11a0.31,0.31,0,0,0-.24-0.51H11V11.07h4.23v2.41a0.31,0.31,0,0,0,.51.24l4.11-3.46a0.31,0.31,0,0,0,0-.47L15.78,6.32A0.31,0.31,0,0,0,15.28,6.56Z\"/></g> <g id=\"pen\" transform=\"translate(0,0) scale(25)\"><path d=\"M18.92,1.08a3.27,3.27,0,0,0-2.33-1,3.9,3.9,0,0,0-2.71,1.25,3.47,3.47,0,0,0-.44.54L5.66,10.66l-0.43-.43A0.36,0.36,0,0,0,5,10.12a0.39,0.39,0,0,0-.27.11L3.62,11.31a0.38,0.38,0,0,0,0,.53l0.45,0.45a8,8,0,0,1-2.46,1.09,0.54,0.54,0,0,0-.35.38v0S1,18.13,0,19.43a0.36,0.36,0,0,0,0,.36h0l0.13,0.14h0A0.57,0.57,0,0,0,.43,20a0.27,0.27,0,0,0,.13,0c1.42-.82,5.62-1.22,5.66-1.22h0a0.55,0.55,0,0,0,.38-0.35,9.52,9.52,0,0,1,1.1-2.45l0.44,0.44a0.36,0.36,0,0,0,.26.11,0.38,0.38,0,0,0,.27-0.11l1.07-1.07A0.39,0.39,0,0,0,9.87,15a0.36,0.36,0,0,0-.11-0.27l-0.43-.43,8.83-7.79a3.46,3.46,0,0,0,.54-0.44,4,4,0,0,0,1.24-2.47A3.22,3.22,0,0,0,18.92,1.08ZM4.66,17a1.15,1.15,0,1,1,0-1.63A1.15,1.15,0,0,1,4.66,17Z\"/></g> <g id=\"select\" transform=\"translate(0,0) scale(25)\"><path d=\"M15.66,11.25L4.71,0.09a0.31,0.31,0,0,0-.53.22V15.94a0.31,0.31,0,0,0,.51.23l3-2.57,2.54,6.21a0.31,0.31,0,0,0,.4.17l3.31-1.35a0.31,0.31,0,0,0,.17-0.4L11.54,12l3.92-.24A0.31,0.31,0,0,0,15.66,11.25Z\"/></g> <g id=\"hand\" transform=\"translate(0,0) scale(25)\"><path d=\"M16.9,3.52a0.92,0.92,0,0,0-.92.92v4a0.44,0.44,0,0,1-.88,0V1.76a1.1,1.1,0,0,0-2.21,0V8.44h0a0.42,0.42,0,0,1-.83,0V1.2a1.2,1.2,0,0,0-2.39,0s0,7.19,0,7.27a0.4,0.4,0,0,1-.8,0V2.24a1.2,1.2,0,1,0-2.39,0c0,8.67,0,7.67,0,8.39a2,2,0,0,1-.13,1c-0.11.08-.25,0-0.43-0.26C5.51,10.79,4.13,9,2.79,9.63a1.33,1.33,0,0,0-.33,1.93s3,4.34,4,5.84c0.59,0.88.75,1.16,1,1.45C8.15,20,8.58,20,9.84,20H15c2.79,0,2.79-3.31,2.79-4.73V4.94C17.82,3.93,17.41,3.52,16.9,3.52Z\"/></g> <g id=\"draw\" transform=\"translate(0,0) scale(25)\"><path d=\"M1.94,4.37L0,2.49A2.08,2.08,0,0,1,.19,2.27L0.41,2l0.27-.26A2.84,2.84,0,0,0,1,1.48l0.39-.34A5.66,5.66,0,0,1,2,.68,6.24,6.24,0,0,1,2.92.27,3,3,0,0,1,4,.09a2.72,2.72,0,0,1,.81.15A2.6,2.6,0,0,1,5.7.79a2.85,2.85,0,0,1,.74,1,3.49,3.49,0,0,1,.3,1.54,4.64,4.64,0,0,1-.1,1,4.76,4.76,0,0,1-.28.88Q6.14,5.59,5.88,6t-0.59.88l-0.46.75q-0.28.46-.59,1L3.68,9.75a9.54,9.54,0,0,0-.43,1,4.27,4.27,0,0,0-.15.85,2,2,0,0,0,.05.67,1,1,0,0,0,.19.45,0.42,0.42,0,0,0,.32.17A0.72,0.72,0,0,0,4,12.79a1.59,1.59,0,0,0,.34-0.26,2.42,2.42,0,0,0,.3-0.3L4.9,12l0.4-.48L6,10.65l0.77-.93q0.39-.46.62-0.77T8.26,8A9.38,9.38,0,0,1,9.5,7a8.58,8.58,0,0,1,1.57-.84,4.66,4.66,0,0,1,1.78-.35,4,4,0,0,1,2,.46,4.25,4.25,0,0,1,1.33,1.16A4.89,4.89,0,0,1,17,9a8.61,8.61,0,0,1,.32,1.48H20V13.2H17.29a9.87,9.87,0,0,1-.74,3.25,7.19,7.19,0,0,1-1.33,2.06,4.55,4.55,0,0,1-1.6,1.08,4.31,4.31,0,0,1-1.5.31,3.5,3.5,0,0,1-1.37-.27,3.43,3.43,0,0,1-1.11-.74,3.47,3.47,0,0,1-.77-1.08,3.12,3.12,0,0,1-.28-1.32,4.63,4.63,0,0,1,.35-1.61A6.43,6.43,0,0,1,10,13.1a7.75,7.75,0,0,1,1.85-1.55,7.63,7.63,0,0,1,2.67-1q-0.05-.31-0.1-0.66a1.6,1.6,0,0,0-.23-0.63,1.25,1.25,0,0,0-.55-0.49,2.45,2.45,0,0,0-1-.18A2.09,2.09,0,0,0,11.5,9a8.11,8.11,0,0,0-1.17.9q-0.57.57-1.15,1.24T8.1,12.4L7.23,13.46a10.26,10.26,0,0,1-.83.88,6.4,6.4,0,0,1-.81.7,2.76,2.76,0,0,1-.86.41,3.09,3.09,0,0,1-.75.12,4.28,4.28,0,0,1-.75,0,4,4,0,0,1-.74-0.22,3,3,0,0,1-.66-0.37A3.32,3.32,0,0,1,.72,13.56a5.4,5.4,0,0,1-.28-0.92,4.69,4.69,0,0,1-.1-1A5.76,5.76,0,0,1,.8,9.5a21.73,21.73,0,0,1,1-2.15q0.57-1,1.07-1.74l0.61-.89,0.27-.46A3,3,0,0,0,4,3.75,0.91,0.91,0,0,0,4.05,3.3,0.38,0.38,0,0,0,3.82,3a0.42,0.42,0,0,0-.34.05A2.67,2.67,0,0,0,3,3.34L2.5,3.81Q2.22,4.06,1.94,4.37ZM12.15,17.23A1.36,1.36,0,0,0,12.81,17a2.31,2.31,0,0,0,.68-0.63,4.77,4.77,0,0,0,.62-1.17,7.65,7.65,0,0,0,.41-1.85A4.78,4.78,0,0,0,13,14a4.59,4.59,0,0,0-1,.85,3.77,3.77,0,0,0-.53.88,1.89,1.89,0,0,0-.17.67,0.74,0.74,0,0,0,.08.34,0.76,0.76,0,0,0,.21.26,0.66,0.66,0,0,0,.25.15A0.79,0.79,0,0,0,12.15,17.23Z\"/></g> <g id=\"point\" transform=\"translate(0,0) scale(25)\"><path d=\"M10,0a6.88,6.88,0,0,1,4.94,2.06A6.88,6.88,0,0,1,17,7q0,3.93-7,13Q3,10.94,3,7A6.88,6.88,0,0,1,5.06,2.06,6.88,6.88,0,0,1,10,0Zm0,9.51a2.41,2.41,0,0,0,1-.2,2.34,2.34,0,0,0,.78-0.55A2.34,2.34,0,0,0,12.31,8a2.47,2.47,0,0,0,0-1.94,2.34,2.34,0,0,0-.55-0.78A2.34,2.34,0,0,0,11,4.7,2.47,2.47,0,0,0,9,4.7a2.34,2.34,0,0,0-.78.55A2.34,2.34,0,0,0,7.69,6,2.47,2.47,0,0,0,7.69,8a2.34,2.34,0,0,0,.55.78A2.34,2.34,0,0,0,9,9.31,2.41,2.41,0,0,0,10,9.51Z\"/></g> </defs></svg></script>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('popup/map-popup-content.html',\n    '<div class=\"map-popup-content\"><md-content md-theme=\"{{:: $root.$theme || \\'blue\\' }}\" flex=\"\"><md-button class=\"md-icon-button pip-map-info-window-close-button\" ng-click=\"closeClick(); $event.stopPropagation()\" tabindex=\"-1\" aria-label=\"close\"><md-icon class=\"theme-icon-active\" md-svg-icon=\"icons:cross\"></md-icon></md-button><ng-transclude></ng-transclude></md-content><div class=\"pip-map-info-window-arrow-wrapper\"><div><div></div></div><div><div></div></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('popup/map-popup.html',\n    '<ui-gmap-window ng-if=\"popup.isEnabled\" show=\"popup.isEnabled\" coords=\"popup.position\" templateurl=\":: popup.element.templateUrl\" templateparameter=\":: popup\" options=\":: popup.element.options\" closeclick=\"popup.close()\"></ui-gmap-window>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/circles/map-circles.html',\n    '<ui-gmap-circle ng-repeat=\"c in ctrl.models\" center=\"c[ctrl.options.center]\" stroke=\"c[ctrl.options.stroke]\" fill=\"c[ctrl.options.fill]\" radius=\"c[ctrl.options.radius]\" geodesic=\"c.geodesic\" events=\"ctrl.events\" visible=\"true\"></ui-gmap-circle>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/kml/map-kml.html',\n    '');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/markers/map-markers.html',\n    '<ui-gmap-markers models=\"ctrl.models\" coords=\":: ctrl.options.model.coords\" icon=\":: ctrl.options.model.icon\" options=\"\\'options\\'\" control=\":: ctrl.control\" events=\":: ctrl.events\" fit=\":: ctrl.options.fitBounds\"></ui-gmap-markers><ui-gmap-polylines ng-if=\":: ctrl.connect\" models=\"ctrl.models\" path=\":: ctrl.connect.property\" stroke=\":: ctrl.connect.stroke\" icons=\":: ctrl.connect.icons\"></ui-gmap-polylines>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/polygons/map-polygons.html',\n    '<ui-gmap-polygons models=\"ctrl.models\" path=\"ctrl.options.path\" stroke=\"ctrl.options.stroke\" fill=\"ctrl.options.fill\" control=\"ctrl.control\" events=\"ctrl.events\" visible=\"\\'visible\\'\" geodesic=\"\\'geodesic\\'\" editable=\"\\'editable\\'\" draggable=\"\\'draggable\\'\" fit=\":: ctrl.options.fitBounds\"></ui-gmap-polygons>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipMaps.Templates');\n} catch (e) {\n  module = angular.module('pipMaps.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('elements/polylines/map-polylines.html',\n    '<ui-gmap-polylines models=\"ctrl.models\" path=\"ctrl.options.path\" stroke=\"ctrl.options.stroke\" icons=\"ctrl.options.icons\" control=\"ctrl.control\" events=\"ctrl.events\" visible=\"\\'visible\\'\" geodesic=\"\\'geodesic\\'\" editable=\"\\'editable\\'\" draggable=\"\\'draggable\\'\" static=\"ctrl.options.static\" fit=\"ctrl.options.fitBounds\"></ui-gmap-polylines>');\n}]);\n})();\n\n//# sourceMappingURL=pip-suite-map-html.min.js.map\n","{\n    angular.module('pipMapsPopup', []);\n}\n\nimport './MapElementPopupService';\nimport './MapPopup';\nimport './MapPopupContent';\nimport './MapPopupService';"]}